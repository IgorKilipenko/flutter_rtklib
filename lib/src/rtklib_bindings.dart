// Part of the LLVM Project, under the Apache License v2.0 with LLVM
// Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// --------------------------------------------------------------------------------
//
// The RTKLIB software package is distributed under the following BSD 2-clause
// license. Users are permitted to develop, produce or sell their own non-
// commercial or commercial products utilizing, linking or including RTKLIB as long
// as they comply with the license.
//
// --------------------------------------------------------------------------------
//
//          Copyright (c) 2007-2020, T. Takasu, All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this list
// of conditions and the following disclaimer. Redistributions in binary form must
// reproduce the above copyright notice, this list of conditions and the following
// disclaimer in the documentation and/or other materials provided with the
// distribution.
//
// The software package includes some companion executive binaries or shared
// libraries necessary to execute APs on Windows. These licenses succeed to the
// original ones of these software.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// --------------------------------------------------------------------------------
//
// Notes:
// Previous versions of RTKLIB until ver. 2.4.1 had been distributed under GPLv3
// license.
// --------------------------------------------------------------------------------
//
// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_field, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Rtklib
class RtkDylib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RtkDylib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RtkDylib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// global variables
  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _chisqr =
      _lookup<ffi.Pointer<ffi.Double>>('chisqr');

  ffi.Pointer<ffi.Double> get chisqr => _chisqr.value;

  set chisqr(ffi.Pointer<ffi.Double> value) => _chisqr.value = value;

  /// chi-sqr(n) table (alpha=0.001)
  late final ffi.Pointer<prcopt_t> _prcopt_default =
      _lookup<prcopt_t>('prcopt_default');

  prcopt_t get prcopt_default => _prcopt_default.ref;

  /// default positioning options
  late final ffi.Pointer<solopt_t> _solopt_default =
      _lookup<solopt_t>('solopt_default');

  solopt_t get solopt_default => _solopt_default.ref;

  /// default solution output options
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<sbsigpband_t>>> _igpband1 =
      _lookup<ffi.Pointer<ffi.Pointer<sbsigpband_t>>>('igpband1');

  ffi.Pointer<ffi.Pointer<sbsigpband_t>> get igpband1 => _igpband1.value;

  set igpband1(ffi.Pointer<ffi.Pointer<sbsigpband_t>> value) =>
      _igpband1.value = value;

  /// SBAS IGP band 0-8
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<sbsigpband_t>>> _igpband2 =
      _lookup<ffi.Pointer<ffi.Pointer<sbsigpband_t>>>('igpband2');

  ffi.Pointer<ffi.Pointer<sbsigpband_t>> get igpband2 => _igpband2.value;

  set igpband2(ffi.Pointer<ffi.Pointer<sbsigpband_t>> value) =>
      _igpband2.value = value;

  /// SBAS IGP band 9-10
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _formatstrs =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('formatstrs');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get formatstrs => _formatstrs.value;

  set formatstrs(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      _formatstrs.value = value;

  /// stream format strings
  late final ffi.Pointer<ffi.Pointer<opt_t>> _sysopts =
      _lookup<ffi.Pointer<opt_t>>('sysopts');

  ffi.Pointer<opt_t> get sysopts => _sysopts.value;

  set sysopts(ffi.Pointer<opt_t> value) => _sysopts.value = value;

  /// satellites, systems, codes functions
  int satno(
    int sys,
    int prn,
  ) {
    return _satno(
      sys,
      prn,
    );
  }

  late final _satnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('satno');
  late final _satno = _satnoPtr.asFunction<int Function(int, int)>();

  int satsys(
    int sat,
    ffi.Pointer<ffi.Int> prn,
  ) {
    return _satsys(
      sat,
      prn,
    );
  }

  late final _satsysPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'satsys');
  late final _satsys =
      _satsysPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int satid2no(
    ffi.Pointer<ffi.Char> id,
  ) {
    return _satid2no(
      id,
    );
  }

  late final _satid2noPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'satid2no');
  late final _satid2no =
      _satid2noPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void satno2id(
    int sat,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _satno2id(
      sat,
      id,
    );
  }

  late final _satno2idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('satno2id');
  late final _satno2id =
      _satno2idPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int obs2code(
    ffi.Pointer<ffi.Char> obs,
  ) {
    return _obs2code(
      obs,
    );
  }

  late final _obs2codePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Char>)>>(
          'obs2code');
  late final _obs2code =
      _obs2codePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> code2obs(
    int code,
  ) {
    return _code2obs(
      code,
    );
  }

  late final _code2obsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Uint8)>>(
          'code2obs');
  late final _code2obs =
      _code2obsPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  double code2freq(
    int sys,
    int code,
    int fcn,
  ) {
    return _code2freq(
      sys,
      code,
      fcn,
    );
  }

  late final _code2freqPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Uint8, ffi.Int)>>(
      'code2freq');
  late final _code2freq =
      _code2freqPtr.asFunction<double Function(int, int, int)>();

  double sat2freq(
    int sat,
    int code,
    ffi.Pointer<nav_t> nav,
  ) {
    return _sat2freq(
      sat,
      code,
      nav,
    );
  }

  late final _sat2freqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int, ffi.Uint8, ffi.Pointer<nav_t>)>>('sat2freq');
  late final _sat2freq =
      _sat2freqPtr.asFunction<double Function(int, int, ffi.Pointer<nav_t>)>();

  int code2idx(
    int sys,
    int code,
  ) {
    return _code2idx(
      sys,
      code,
    );
  }

  late final _code2idxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Uint8)>>(
          'code2idx');
  late final _code2idx = _code2idxPtr.asFunction<int Function(int, int)>();

  int satexclude(
    int sat,
    double var1,
    int svh,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _satexclude(
      sat,
      var1,
      svh,
      opt,
    );
  }

  late final _satexcludePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Double, ffi.Int,
              ffi.Pointer<prcopt_t>)>>('satexclude');
  late final _satexclude = _satexcludePtr
      .asFunction<int Function(int, double, int, ffi.Pointer<prcopt_t>)>();

  int testsnr(
    int base,
    int freq,
    double el,
    double snr,
    ffi.Pointer<snrmask_t> mask,
  ) {
    return _testsnr(
      base,
      freq,
      el,
      snr,
      mask,
    );
  }

  late final _testsnrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Int, ffi.Double, ffi.Double,
              ffi.Pointer<snrmask_t>)>>('testsnr');
  late final _testsnr = _testsnrPtr.asFunction<
      int Function(int, int, double, double, ffi.Pointer<snrmask_t>)>();

  void setcodepri(
    int sys,
    int idx,
    ffi.Pointer<ffi.Char> pri,
  ) {
    return _setcodepri(
      sys,
      idx,
      pri,
    );
  }

  late final _setcodepriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('setcodepri');
  late final _setcodepri = _setcodepriPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Char>)>();

  int getcodepri(
    int sys,
    int code,
    ffi.Pointer<ffi.Char> opt,
  ) {
    return _getcodepri(
      sys,
      code,
      opt,
    );
  }

  late final _getcodepriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Uint8, ffi.Pointer<ffi.Char>)>>('getcodepri');
  late final _getcodepri = _getcodepriPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// matrix and vector functions
  ffi.Pointer<ffi.Double> mat(
    int n,
    int m,
  ) {
    return _mat(
      n,
      m,
    );
  }

  late final _matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Int, ffi.Int)>>('mat');
  late final _mat =
      _matPtr.asFunction<ffi.Pointer<ffi.Double> Function(int, int)>();

  ffi.Pointer<ffi.Int> imat(
    int n,
    int m,
  ) {
    return _imat(
      n,
      m,
    );
  }

  late final _imatPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int> Function(ffi.Int, ffi.Int)>>(
      'imat');
  late final _imat =
      _imatPtr.asFunction<ffi.Pointer<ffi.Int> Function(int, int)>();

  ffi.Pointer<ffi.Double> zeros(
    int n,
    int m,
  ) {
    return _zeros(
      n,
      m,
    );
  }

  late final _zerosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Int, ffi.Int)>>('zeros');
  late final _zeros =
      _zerosPtr.asFunction<ffi.Pointer<ffi.Double> Function(int, int)>();

  ffi.Pointer<ffi.Double> eye(
    int n,
  ) {
    return _eye(
      n,
    );
  }

  late final _eyePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Int)>>(
          'eye');
  late final _eye = _eyePtr.asFunction<ffi.Pointer<ffi.Double> Function(int)>();

  double dot(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    int n,
  ) {
    return _dot(
      a,
      b,
      n,
    );
  }

  late final _dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Int)>>('dot');
  late final _dot = _dotPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int)>();

  double norm(
    ffi.Pointer<ffi.Double> a,
    int n,
  ) {
    return _norm(
      a,
      n,
    );
  }

  late final _normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('norm');
  late final _norm =
      _normPtr.asFunction<double Function(ffi.Pointer<ffi.Double>, int)>();

  void cross3(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    ffi.Pointer<ffi.Double> c,
  ) {
    return _cross3(
      a,
      b,
      c,
    );
  }

  late final _cross3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cross3');
  late final _cross3 = _cross3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int normv3(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
  ) {
    return _normv3(
      a,
      b,
    );
  }

  late final _normv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('normv3');
  late final _normv3 = _normv3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void matcpy(
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> B,
    int n,
    int m,
  ) {
    return _matcpy(
      A,
      B,
      n,
      m,
    );
  }

  late final _matcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Int, ffi.Int)>>('matcpy');
  late final _matcpy = _matcpyPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  void matmul(
    ffi.Pointer<ffi.Char> tr,
    int n,
    int k,
    int m,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> B,
    double beta,
    ffi.Pointer<ffi.Double> C,
  ) {
    return _matmul(
      tr,
      n,
      k,
      m,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _matmulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('matmul');
  late final _matmul = _matmulPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Double>)>();

  int matinv(
    ffi.Pointer<ffi.Double> A,
    int n,
  ) {
    return _matinv(
      A,
      n,
    );
  }

  late final _matinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('matinv');
  late final _matinv =
      _matinvPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int solve(
    ffi.Pointer<ffi.Char> tr,
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> Y,
    int n,
    int m,
    ffi.Pointer<ffi.Double> X,
  ) {
    return _solve(
      tr,
      A,
      Y,
      n,
      m,
      X,
    );
  }

  late final _solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>)>>('solve');
  late final _solve = _solvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  int lsq(
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> y,
    int n,
    int m,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> Q,
  ) {
    return _lsq(
      A,
      y,
      n,
      m,
      x,
      Q,
    );
  }

  late final _lsqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lsq');
  late final _lsq = _lsqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int filter(
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> P,
    ffi.Pointer<ffi.Double> H,
    ffi.Pointer<ffi.Double> v,
    ffi.Pointer<ffi.Double> R,
    int n,
    int m,
  ) {
    return _filter(
      x,
      P,
      H,
      v,
      R,
      n,
      m,
    );
  }

  late final _filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int)>>('filter');
  late final _filter = _filterPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int)>();

  int smoother(
    ffi.Pointer<ffi.Double> xf,
    ffi.Pointer<ffi.Double> Qf,
    ffi.Pointer<ffi.Double> xb,
    ffi.Pointer<ffi.Double> Qb,
    int n,
    ffi.Pointer<ffi.Double> xs,
    ffi.Pointer<ffi.Double> Qs,
  ) {
    return _smoother(
      xf,
      Qf,
      xb,
      Qb,
      n,
      xs,
      Qs,
    );
  }

  late final _smootherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('smoother');
  late final _smoother = _smootherPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void matprint(
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
  ) {
    return _matprint(
      A,
      n,
      m,
      p,
      q,
    );
  }

  late final _matprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('matprint');
  late final _matprint = _matprintPtr
      .asFunction<void Function(ffi.Pointer<ffi.Double>, int, int, int, int)>();

  void matfprint(
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
    ffi.Pointer<FILE> fp,
  ) {
    return _matfprint(
      A,
      n,
      m,
      p,
      q,
      fp,
    );
  }

  late final _matfprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<FILE>)>>('matfprint');
  late final _matfprint = _matfprintPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, int, int, int, int, ffi.Pointer<FILE>)>();

  void add_fatal(
    ffi.Pointer<fatalfunc_t> func,
  ) {
    return _add_fatal(
      func,
    );
  }

  late final _add_fatalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fatalfunc_t>)>>(
          'add_fatal');
  late final _add_fatal =
      _add_fatalPtr.asFunction<void Function(ffi.Pointer<fatalfunc_t>)>();

  /// time and string functions
  double str2num(
    ffi.Pointer<ffi.Char> s,
    int i,
    int n,
  ) {
    return _str2num(
      s,
      i,
      n,
    );
  }

  late final _str2numPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('str2num');
  late final _str2num = _str2numPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, int, int)>();

  int str2time(
    ffi.Pointer<ffi.Char> s,
    int i,
    int n,
    ffi.Pointer<gtime_t> t,
  ) {
    return _str2time(
      s,
      i,
      n,
      t,
    );
  }

  late final _str2timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<gtime_t>)>>('str2time');
  late final _str2time = _str2timePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<gtime_t>)>();

  void time2str(
    gtime_t t,
    ffi.Pointer<ffi.Char> str,
    int n,
  ) {
    return _time2str(
      t,
      str,
      n,
    );
  }

  late final _time2strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t, ffi.Pointer<ffi.Char>, ffi.Int)>>('time2str');
  late final _time2str = _time2strPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Char>, int)>();

  gtime_t epoch2time(
    ffi.Pointer<ffi.Double> ep,
  ) {
    return _epoch2time(
      ep,
    );
  }

  late final _epoch2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Pointer<ffi.Double>)>>(
          'epoch2time');
  late final _epoch2time =
      _epoch2timePtr.asFunction<gtime_t Function(ffi.Pointer<ffi.Double>)>();

  void time2epoch(
    gtime_t t,
    ffi.Pointer<ffi.Double> ep,
  ) {
    return _time2epoch(
      t,
      ep,
    );
  }

  late final _time2epochPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>)>>('time2epoch');
  late final _time2epoch = _time2epochPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Double>)>();

  void time2epoch_n(
    gtime_t t,
    ffi.Pointer<ffi.Double> ep,
    int n,
  ) {
    return _time2epoch_n(
      t,
      ep,
      n,
    );
  }

  late final _time2epoch_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t, ffi.Pointer<ffi.Double>, ffi.Int)>>('time2epoch_n');
  late final _time2epoch_n = _time2epoch_nPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Double>, int)>();

  gtime_t gpst2time(
    int week,
    double sec,
  ) {
    return _gpst2time(
      week,
      sec,
    );
  }

  late final _gpst2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Int, ffi.Double)>>(
          'gpst2time');
  late final _gpst2time =
      _gpst2timePtr.asFunction<gtime_t Function(int, double)>();

  double time2gpst(
    gtime_t t,
    ffi.Pointer<ffi.Int> week,
  ) {
    return _time2gpst(
      t,
      week,
    );
  }

  late final _time2gpstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Int>)>>('time2gpst');
  late final _time2gpst = _time2gpstPtr
      .asFunction<double Function(gtime_t, ffi.Pointer<ffi.Int>)>();

  gtime_t gst2time(
    int week,
    double sec,
  ) {
    return _gst2time(
      week,
      sec,
    );
  }

  late final _gst2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Int, ffi.Double)>>(
          'gst2time');
  late final _gst2time =
      _gst2timePtr.asFunction<gtime_t Function(int, double)>();

  double time2gst(
    gtime_t t,
    ffi.Pointer<ffi.Int> week,
  ) {
    return _time2gst(
      t,
      week,
    );
  }

  late final _time2gstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Int>)>>('time2gst');
  late final _time2gst =
      _time2gstPtr.asFunction<double Function(gtime_t, ffi.Pointer<ffi.Int>)>();

  gtime_t bdt2time(
    int week,
    double sec,
  ) {
    return _bdt2time(
      week,
      sec,
    );
  }

  late final _bdt2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Int, ffi.Double)>>(
          'bdt2time');
  late final _bdt2time =
      _bdt2timePtr.asFunction<gtime_t Function(int, double)>();

  double time2bdt(
    gtime_t t,
    ffi.Pointer<ffi.Int> week,
  ) {
    return _time2bdt(
      t,
      week,
    );
  }

  late final _time2bdtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Int>)>>('time2bdt');
  late final _time2bdt =
      _time2bdtPtr.asFunction<double Function(gtime_t, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> time_str(
    gtime_t t,
    int n,
  ) {
    return _time_str(
      t,
      n,
    );
  }

  late final _time_strPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(gtime_t, ffi.Int)>>(
      'time_str');
  late final _time_str =
      _time_strPtr.asFunction<ffi.Pointer<ffi.Char> Function(gtime_t, int)>();

  gtime_t timeadd(
    gtime_t t,
    double sec,
  ) {
    return _timeadd(
      t,
      sec,
    );
  }

  late final _timeaddPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t, ffi.Double)>>(
          'timeadd');
  late final _timeadd =
      _timeaddPtr.asFunction<gtime_t Function(gtime_t, double)>();

  double timediff(
    gtime_t t1,
    gtime_t t2,
  ) {
    return _timediff(
      t1,
      t2,
    );
  }

  late final _timediffPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gtime_t, gtime_t)>>(
          'timediff');
  late final _timediff =
      _timediffPtr.asFunction<double Function(gtime_t, gtime_t)>();

  gtime_t gpst2utc(
    gtime_t t,
  ) {
    return _gpst2utc(
      t,
    );
  }

  late final _gpst2utcPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('gpst2utc');
  late final _gpst2utc = _gpst2utcPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t utc2gpst(
    gtime_t t,
  ) {
    return _utc2gpst(
      t,
    );
  }

  late final _utc2gpstPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('utc2gpst');
  late final _utc2gpst = _utc2gpstPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t gpst2bdt(
    gtime_t t,
  ) {
    return _gpst2bdt(
      t,
    );
  }

  late final _gpst2bdtPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('gpst2bdt');
  late final _gpst2bdt = _gpst2bdtPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t bdt2gpst(
    gtime_t t,
  ) {
    return _bdt2gpst(
      t,
    );
  }

  late final _bdt2gpstPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('bdt2gpst');
  late final _bdt2gpst = _bdt2gpstPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t timeget() {
    return _timeget();
  }

  late final _timegetPtr =
      _lookup<ffi.NativeFunction<gtime_t Function()>>('timeget');
  late final _timeget = _timegetPtr.asFunction<gtime_t Function()>();

  void timeset(
    gtime_t t,
  ) {
    return _timeset(
      t,
    );
  }

  late final _timesetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gtime_t)>>('timeset');
  late final _timeset = _timesetPtr.asFunction<void Function(gtime_t)>();

  void timereset() {
    return _timereset();
  }

  late final _timeresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('timereset');
  late final _timereset = _timeresetPtr.asFunction<void Function()>();

  double time2doy(
    gtime_t t,
  ) {
    return _time2doy(
      t,
    );
  }

  late final _time2doyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gtime_t)>>('time2doy');
  late final _time2doy = _time2doyPtr.asFunction<double Function(gtime_t)>();

  double utc2gmst(
    gtime_t t,
    double ut1_utc,
  ) {
    return _utc2gmst(
      t,
      ut1_utc,
    );
  }

  late final _utc2gmstPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gtime_t, ffi.Double)>>(
          'utc2gmst');
  late final _utc2gmst =
      _utc2gmstPtr.asFunction<double Function(gtime_t, double)>();

  int read_leaps(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _read_leaps(
      file,
    );
  }

  late final _read_leapsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'read_leaps');
  late final _read_leaps =
      _read_leapsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int adjgpsweek(
    int week,
  ) {
    return _adjgpsweek(
      week,
    );
  }

  late final _adjgpsweekPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('adjgpsweek');
  late final _adjgpsweek = _adjgpsweekPtr.asFunction<int Function(int)>();

  int tickget() {
    return _tickget();
  }

  late final _tickgetPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('tickget');
  late final _tickget = _tickgetPtr.asFunction<int Function()>();

  void sleepms(
    int ms,
  ) {
    return _sleepms(
      ms,
    );
  }

  late final _sleepmsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('sleepms');
  late final _sleepms = _sleepmsPtr.asFunction<void Function(int)>();

  int reppath(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> rpath,
    gtime_t time,
    ffi.Pointer<ffi.Char> rov,
    ffi.Pointer<ffi.Char> base,
  ) {
    return _reppath(
      path,
      rpath,
      time,
      rov,
      base,
    );
  }

  late final _reppathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gtime_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('reppath');
  late final _reppath = _reppathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, gtime_t,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int reppaths(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rpaths,
    int nmax,
    gtime_t ts,
    gtime_t te,
    ffi.Pointer<ffi.Char> rov,
    ffi.Pointer<ffi.Char> base,
  ) {
    return _reppaths(
      path,
      rpaths,
      nmax,
      ts,
      te,
      rov,
      base,
    );
  }

  late final _reppathsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              gtime_t,
              gtime_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('reppaths');
  late final _reppaths = _reppathsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          gtime_t,
          gtime_t,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// coordinates transformation
  void ecef2pos(
    ffi.Pointer<ffi.Double> r,
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _ecef2pos(
      r,
      pos,
    );
  }

  late final _ecef2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('ecef2pos');
  late final _ecef2pos = _ecef2posPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void pos2ecef(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> r,
  ) {
    return _pos2ecef(
      pos,
      r,
    );
  }

  late final _pos2ecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('pos2ecef');
  late final _pos2ecef = _pos2ecefPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void ecef2enu(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> r,
    ffi.Pointer<ffi.Double> e,
  ) {
    return _ecef2enu(
      pos,
      r,
      e,
    );
  }

  late final _ecef2enuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ecef2enu');
  late final _ecef2enu = _ecef2enuPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void enu2ecef(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> e,
    ffi.Pointer<ffi.Double> r,
  ) {
    return _enu2ecef(
      pos,
      e,
      r,
    );
  }

  late final _enu2ecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('enu2ecef');
  late final _enu2ecef = _enu2ecefPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void covenu(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> P,
    ffi.Pointer<ffi.Double> Q,
  ) {
    return _covenu(
      pos,
      P,
      Q,
    );
  }

  late final _covenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('covenu');
  late final _covenu = _covenuPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void covecef(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _covecef(
      pos,
      Q,
      P,
    );
  }

  late final _covecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('covecef');
  late final _covecef = _covecefPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void xyz2enu(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> E,
  ) {
    return _xyz2enu(
      pos,
      E,
    );
  }

  late final _xyz2enuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('xyz2enu');
  late final _xyz2enu = _xyz2enuPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void eci2ecef(
    gtime_t tutc,
    ffi.Pointer<ffi.Double> erpv,
    ffi.Pointer<ffi.Double> U,
    ffi.Pointer<ffi.Double> gmst,
  ) {
    return _eci2ecef(
      tutc,
      erpv,
      U,
      gmst,
    );
  }

  late final _eci2ecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('eci2ecef');
  late final _eci2ecef = _eci2ecefPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void deg2dms(
    double deg,
    ffi.Pointer<ffi.Double> dms,
    int ndec,
  ) {
    return _deg2dms(
      deg,
      dms,
      ndec,
    );
  }

  late final _deg2dmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int)>>('deg2dms');
  late final _deg2dms = _deg2dmsPtr
      .asFunction<void Function(double, ffi.Pointer<ffi.Double>, int)>();

  double dms2deg(
    ffi.Pointer<ffi.Double> dms,
  ) {
    return _dms2deg(
      dms,
    );
  }

  late final _dms2degPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Double>)>>(
          'dms2deg');
  late final _dms2deg =
      _dms2degPtr.asFunction<double Function(ffi.Pointer<ffi.Double>)>();

  /// input and output functions
  void readpos(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> rcv,
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _readpos(
      file,
      rcv,
      pos,
    );
  }

  late final _readposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('readpos');
  late final _readpos = _readposPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Double>)>();

  int sortobs(
    ffi.Pointer<obs_t> obs,
  ) {
    return _sortobs(
      obs,
    );
  }

  late final _sortobsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<obs_t>)>>(
          'sortobs');
  late final _sortobs =
      _sortobsPtr.asFunction<int Function(ffi.Pointer<obs_t>)>();

  void uniqnav(
    ffi.Pointer<nav_t> nav,
  ) {
    return _uniqnav(
      nav,
    );
  }

  late final _uniqnavPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nav_t>)>>(
          'uniqnav');
  late final _uniqnav =
      _uniqnavPtr.asFunction<void Function(ffi.Pointer<nav_t>)>();

  int screent(
    gtime_t time,
    gtime_t ts,
    gtime_t te,
    double tint,
  ) {
    return _screent(
      time,
      ts,
      te,
      tint,
    );
  }

  late final _screentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(gtime_t, gtime_t, gtime_t, ffi.Double)>>('screent');
  late final _screent =
      _screentPtr.asFunction<int Function(gtime_t, gtime_t, gtime_t, double)>();

  int readnav(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readnav(
      file,
      nav,
    );
  }

  late final _readnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>>('readnav');
  late final _readnav = _readnavPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>();

  int savenav(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _savenav(
      file,
      nav,
    );
  }

  late final _savenavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>>('savenav');
  late final _savenav = _savenavPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>();

  void freeobs(
    ffi.Pointer<obs_t> obs,
  ) {
    return _freeobs(
      obs,
    );
  }

  late final _freeobsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_t>)>>(
          'freeobs');
  late final _freeobs =
      _freeobsPtr.asFunction<void Function(ffi.Pointer<obs_t>)>();

  void freenav(
    ffi.Pointer<nav_t> nav,
    int opt,
  ) {
    return _freenav(
      nav,
      opt,
    );
  }

  late final _freenavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nav_t>, ffi.Int)>>(
      'freenav');
  late final _freenav =
      _freenavPtr.asFunction<void Function(ffi.Pointer<nav_t>, int)>();

  int readblq(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> sta,
    ffi.Pointer<ffi.Double> odisp,
  ) {
    return _readblq(
      file,
      sta,
      odisp,
    );
  }

  late final _readblqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('readblq');
  late final _readblq = _readblqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Double>)>();

  int readerp(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<erp_t> erp,
  ) {
    return _readerp(
      file,
      erp,
    );
  }

  late final _readerpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<erp_t>)>>('readerp');
  late final _readerp = _readerpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<erp_t>)>();

  int geterp(
    ffi.Pointer<erp_t> erp,
    gtime_t time,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _geterp(
      erp,
      time,
      val,
    );
  }

  late final _geterpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<erp_t>, gtime_t, ffi.Pointer<ffi.Double>)>>('geterp');
  late final _geterp = _geterpPtr.asFunction<
      int Function(ffi.Pointer<erp_t>, gtime_t, ffi.Pointer<ffi.Double>)>();

  /// debug trace functions
  void traceopen(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _traceopen(
      file,
    );
  }

  late final _traceopenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'traceopen');
  late final _traceopen =
      _traceopenPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void traceclose() {
    return _traceclose();
  }

  late final _traceclosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('traceclose');
  late final _traceclose = _traceclosePtr.asFunction<void Function()>();

  void tracelevel(
    int level,
  ) {
    return _tracelevel(
      level,
    );
  }

  late final _tracelevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('tracelevel');
  late final _tracelevel = _tracelevelPtr.asFunction<void Function(int)>();

  void trace(
    int level,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _trace(
      level,
      format,
    );
  }

  late final _tracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('trace');
  late final _trace =
      _tracePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void tracet(
    int level,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _tracet(
      level,
      format,
    );
  }

  late final _tracetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('tracet');
  late final _tracet =
      _tracetPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void tracemat(
    int level,
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
  ) {
    return _tracemat(
      level,
      A,
      n,
      m,
      p,
      q,
    );
  }

  late final _tracematPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Double>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('tracemat');
  late final _tracemat = _tracematPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Double>, int, int, int, int)>();

  void traceobs(
    int level,
    ffi.Pointer<obsd_t> obs,
    int n,
  ) {
    return _traceobs(
      level,
      obs,
      n,
    );
  }

  late final _traceobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<obsd_t>, ffi.Int)>>('traceobs');
  late final _traceobs =
      _traceobsPtr.asFunction<void Function(int, ffi.Pointer<obsd_t>, int)>();

  void tracenav(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracenav(
      level,
      nav,
    );
  }

  late final _tracenavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<nav_t>)>>(
      'tracenav');
  late final _tracenav =
      _tracenavPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracegnav(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracegnav(
      level,
      nav,
    );
  }

  late final _tracegnavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<nav_t>)>>(
      'tracegnav');
  late final _tracegnav =
      _tracegnavPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracehnav(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracehnav(
      level,
      nav,
    );
  }

  late final _tracehnavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<nav_t>)>>(
      'tracehnav');
  late final _tracehnav =
      _tracehnavPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracepeph(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracepeph(
      level,
      nav,
    );
  }

  late final _tracepephPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<nav_t>)>>(
      'tracepeph');
  late final _tracepeph =
      _tracepephPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracepclk(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracepclk(
      level,
      nav,
    );
  }

  late final _tracepclkPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Pointer<nav_t>)>>(
      'tracepclk');
  late final _tracepclk =
      _tracepclkPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void traceb(
    int level,
    ffi.Pointer<ffi.Uint8> p,
    int n,
  ) {
    return _traceb(
      level,
      p,
      n,
    );
  }

  late final _tracebPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<ffi.Uint8>, ffi.Int)>>('traceb');
  late final _traceb =
      _tracebPtr.asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  int gettracelevel() {
    return _gettracelevel();
  }

  late final _gettracelevelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('gettracelevel');
  late final _gettracelevel = _gettracelevelPtr.asFunction<int Function()>();

  /// platform dependent functions
  int execcmd(
    ffi.Pointer<ffi.Char> cmd,
  ) {
    return _execcmd(
      cmd,
    );
  }

  late final _execcmdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'execcmd');
  late final _execcmd =
      _execcmdPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int expath(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paths,
    int nmax,
  ) {
    return _expath(
      path,
      paths,
      nmax,
    );
  }

  late final _expathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('expath');
  late final _expath = _expathPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  void createdir(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _createdir(
      path,
    );
  }

  late final _createdirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'createdir');
  late final _createdir =
      _createdirPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// positioning models
  double satazel(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> e,
    ffi.Pointer<ffi.Double> azel,
  ) {
    return _satazel(
      pos,
      e,
      azel,
    );
  }

  late final _satazelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('satazel');
  late final _satazel = _satazelPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double geodist(
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> rr,
    ffi.Pointer<ffi.Double> e,
  ) {
    return _geodist(
      rs,
      rr,
      e,
    );
  }

  late final _geodistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('geodist');
  late final _geodist = _geodistPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void dops(
    int ns,
    ffi.Pointer<ffi.Double> azel,
    double elmin,
    ffi.Pointer<ffi.Double> dop,
  ) {
    return _dops(
      ns,
      azel,
      elmin,
      dop,
    );
  }

  late final _dopsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Double>, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('dops');
  late final _dops = _dopsPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Double>, double, ffi.Pointer<ffi.Double>)>();

  /// atmosphere models
  double ionmodel(
    gtime_t t,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
  ) {
    return _ionmodel(
      t,
      ion,
      pos,
      azel,
    );
  }

  late final _ionmodelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('ionmodel');
  late final _ionmodel = _ionmodelPtr.asFunction<
      double Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double ionmapf(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
  ) {
    return _ionmapf(
      pos,
      azel,
    );
  }

  late final _ionmapfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('ionmapf');
  late final _ionmapf = _ionmapfPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double ionppp(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    double re,
    double hion,
    ffi.Pointer<ffi.Double> pppos,
  ) {
    return _ionppp(
      pos,
      azel,
      re,
      hion,
      pppos,
    );
  }

  late final _ionpppPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>>('ionppp');
  late final _ionppp = _ionpppPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, double,
          double, ffi.Pointer<ffi.Double>)>();

  double tropmodel(
    gtime_t time,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    double humi,
  ) {
    return _tropmodel(
      time,
      pos,
      azel,
      humi,
    );
  }

  late final _tropmodelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Double)>>('tropmodel');
  late final _tropmodel = _tropmodelPtr.asFunction<
      double Function(
          gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, double)>();

  double tropmapf(
    gtime_t time,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> mapfw,
  ) {
    return _tropmapf(
      time,
      pos,
      azel,
      mapfw,
    );
  }

  late final _tropmapfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('tropmapf');
  late final _tropmapf = _tropmapfPtr.asFunction<
      double Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int iontec(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    int opt,
    ffi.Pointer<ffi.Double> delay,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _iontec(
      time,
      nav,
      pos,
      azel,
      opt,
      delay,
      var1,
    );
  }

  late final _iontecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('iontec');
  late final _iontec = _iontecPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void readtec(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
    int opt,
  ) {
    return _readtec(
      file,
      nav,
      opt,
    );
  }

  late final _readtecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>, ffi.Int)>>('readtec');
  late final _readtec = _readtecPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>, int)>();

  int ionocorr(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    int sat,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    int ionoopt,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _ionocorr(
      time,
      nav,
      sat,
      pos,
      azel,
      ionoopt,
      ion,
      var1,
    );
  }

  late final _ionocorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ionocorr');
  late final _ionocorr = _ionocorrPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int tropcorr(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    int tropopt,
    ffi.Pointer<ffi.Double> trp,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _tropcorr(
      time,
      nav,
      pos,
      azel,
      tropopt,
      trp,
      var1,
    );
  }

  late final _tropcorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('tropcorr');
  late final _tropcorr = _tropcorrPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int seliflc(
    int optnf,
    int sys,
  ) {
    return _seliflc(
      optnf,
      sys,
    );
  }

  late final _seliflcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'seliflc');
  late final _seliflc = _seliflcPtr.asFunction<int Function(int, int)>();

  /// antenna models
  int readpcv(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<pcvs_t> pcvs,
  ) {
    return _readpcv(
      file,
      pcvs,
    );
  }

  late final _readpcvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<pcvs_t>)>>('readpcv');
  late final _readpcv = _readpcvPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<pcvs_t>)>();

  ffi.Pointer<pcv_t> searchpcv(
    int sat,
    ffi.Pointer<ffi.Char> type,
    gtime_t time,
    ffi.Pointer<pcvs_t> pcvs,
  ) {
    return _searchpcv(
      sat,
      type,
      time,
      pcvs,
    );
  }

  late final _searchpcvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcv_t> Function(ffi.Int, ffi.Pointer<ffi.Char>, gtime_t,
              ffi.Pointer<pcvs_t>)>>('searchpcv');
  late final _searchpcv = _searchpcvPtr.asFunction<
      ffi.Pointer<pcv_t> Function(
          int, ffi.Pointer<ffi.Char>, gtime_t, ffi.Pointer<pcvs_t>)>();

  void antmodel(
    ffi.Pointer<pcv_t> pcv,
    ffi.Pointer<ffi.Double> del,
    ffi.Pointer<ffi.Double> azel,
    int opt,
    ffi.Pointer<ffi.Double> dant,
  ) {
    return _antmodel(
      pcv,
      del,
      azel,
      opt,
      dant,
    );
  }

  late final _antmodelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pcv_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<ffi.Double>)>>('antmodel');
  late final _antmodel = _antmodelPtr.asFunction<
      void Function(ffi.Pointer<pcv_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>)>();

  void antmodel_s(
    ffi.Pointer<pcv_t> pcv,
    double nadir,
    ffi.Pointer<ffi.Double> dant,
  ) {
    return _antmodel_s(
      pcv,
      nadir,
      dant,
    );
  }

  late final _antmodel_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pcv_t>, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('antmodel_s');
  late final _antmodel_s = _antmodel_sPtr.asFunction<
      void Function(ffi.Pointer<pcv_t>, double, ffi.Pointer<ffi.Double>)>();

  /// earth tide models
  void sunmoonpos(
    gtime_t tutc,
    ffi.Pointer<ffi.Double> erpv,
    ffi.Pointer<ffi.Double> rsun,
    ffi.Pointer<ffi.Double> rmoon,
    ffi.Pointer<ffi.Double> gmst,
  ) {
    return _sunmoonpos(
      tutc,
      erpv,
      rsun,
      rmoon,
      gmst,
    );
  }

  late final _sunmoonposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sunmoonpos');
  late final _sunmoonpos = _sunmoonposPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void tidedisp(
    gtime_t tutc,
    ffi.Pointer<ffi.Double> rr,
    int opt,
    ffi.Pointer<erp_t> erp,
    ffi.Pointer<ffi.Double> odisp,
    ffi.Pointer<ffi.Double> dr,
  ) {
    return _tidedisp(
      tutc,
      rr,
      opt,
      erp,
      odisp,
      dr,
    );
  }

  late final _tidedispPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Pointer<erp_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('tidedisp');
  late final _tidedisp = _tidedispPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, int, ffi.Pointer<erp_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  /// geiod models
  int opengeoid(
    int model,
    ffi.Pointer<ffi.Char> file,
  ) {
    return _opengeoid(
      model,
      file,
    );
  }

  late final _opengeoidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'opengeoid');
  late final _opengeoid =
      _opengeoidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  void closegeoid() {
    return _closegeoid();
  }

  late final _closegeoidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('closegeoid');
  late final _closegeoid = _closegeoidPtr.asFunction<void Function()>();

  double geoidh(
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _geoidh(
      pos,
    );
  }

  late final _geoidhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Double>)>>(
          'geoidh');
  late final _geoidh =
      _geoidhPtr.asFunction<double Function(ffi.Pointer<ffi.Double>)>();

  /// datum transformation
  int loaddatump(
    ffi.Pointer<ffi.Char> file,
  ) {
    return _loaddatump(
      file,
    );
  }

  late final _loaddatumpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'loaddatump');
  late final _loaddatump =
      _loaddatumpPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tokyo2jgd(
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _tokyo2jgd(
      pos,
    );
  }

  late final _tokyo2jgdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Double>)>>(
          'tokyo2jgd');
  late final _tokyo2jgd =
      _tokyo2jgdPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int jgd2tokyo(
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _jgd2tokyo(
      pos,
    );
  }

  late final _jgd2tokyoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Double>)>>(
          'jgd2tokyo');
  late final _jgd2tokyo =
      _jgd2tokyoPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  /// rinex functions
  int readrnx(
    ffi.Pointer<ffi.Char> file,
    int rcv,
    ffi.Pointer<ffi.Char> opt,
    ffi.Pointer<obs_t> obs,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<sta_t> sta,
  ) {
    return _readrnx(
      file,
      rcv,
      opt,
      obs,
      nav,
      sta,
    );
  }

  late final _readrnxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<obs_t>,
              ffi.Pointer<nav_t>,
              ffi.Pointer<sta_t>)>>('readrnx');
  late final _readrnx = _readrnxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<obs_t>, ffi.Pointer<nav_t>, ffi.Pointer<sta_t>)>();

  int readrnxt(
    ffi.Pointer<ffi.Char> file,
    int rcv,
    gtime_t ts,
    gtime_t te,
    double tint,
    ffi.Pointer<ffi.Char> opt,
    ffi.Pointer<obs_t> obs,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<sta_t> sta,
  ) {
    return _readrnxt(
      file,
      rcv,
      ts,
      te,
      tint,
      opt,
      obs,
      nav,
      sta,
    );
  }

  late final _readrnxtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<obs_t>,
              ffi.Pointer<nav_t>,
              ffi.Pointer<sta_t>)>>('readrnxt');
  late final _readrnxt = _readrnxtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          gtime_t,
          gtime_t,
          double,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<obs_t>,
          ffi.Pointer<nav_t>,
          ffi.Pointer<sta_t>)>();

  int readrnxc(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readrnxc(
      file,
      nav,
    );
  }

  late final _readrnxcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>>('readrnxc');
  late final _readrnxc = _readrnxcPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>();

  int outrnxobsh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxobsh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxobshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxobsh');
  late final _outrnxobsh = _outrnxobshPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxobsb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<obsd_t> obs,
    int n,
    int epflag,
  ) {
    return _outrnxobsb(
      fp,
      opt,
      obs,
      n,
      epflag,
    );
  }

  late final _outrnxobsbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<obsd_t>, ffi.Int, ffi.Int)>>('outrnxobsb');
  late final _outrnxobsb = _outrnxobsbPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
          ffi.Pointer<obsd_t>, int, int)>();

  int outrnxnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxnavh');
  late final _outrnxnavh = _outrnxnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxgnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxgnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxgnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxgnavh');
  late final _outrnxgnavh = _outrnxgnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxhnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxhnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxhnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxhnavh');
  late final _outrnxhnavh = _outrnxhnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxlnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxlnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxlnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxlnavh');
  late final _outrnxlnavh = _outrnxlnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxqnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxqnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxqnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxqnavh');
  late final _outrnxqnavh = _outrnxqnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxcnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxcnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxcnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxcnavh');
  late final _outrnxcnavh = _outrnxcnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxinavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxinavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxinavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxinavh');
  late final _outrnxinavh = _outrnxinavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxnavb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<eph_t> eph,
  ) {
    return _outrnxnavb(
      fp,
      opt,
      eph,
    );
  }

  late final _outrnxnavbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<eph_t>)>>('outrnxnavb');
  late final _outrnxnavb = _outrnxnavbPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<eph_t>)>();

  int outrnxgnavb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<geph_t> geph,
  ) {
    return _outrnxgnavb(
      fp,
      opt,
      geph,
    );
  }

  late final _outrnxgnavbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<geph_t>)>>('outrnxgnavb');
  late final _outrnxgnavb = _outrnxgnavbPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<geph_t>)>();

  int outrnxhnavb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<seph_t> seph,
  ) {
    return _outrnxhnavb(
      fp,
      opt,
      seph,
    );
  }

  late final _outrnxhnavbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<seph_t>)>>('outrnxhnavb');
  late final _outrnxhnavb = _outrnxhnavbPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<seph_t>)>();

  int rtk_uncompress(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> uncfile,
  ) {
    return _rtk_uncompress(
      file,
      uncfile,
    );
  }

  late final _rtk_uncompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rtk_uncompress');
  late final _rtk_uncompress = _rtk_uncompressPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int convrnx(
    int format,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ofile,
  ) {
    return _convrnx(
      format,
      opt,
      file,
      ofile,
    );
  }

  late final _convrnxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<rnxopt_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('convrnx');
  late final _convrnx = _convrnxPtr.asFunction<
      int Function(int, ffi.Pointer<rnxopt_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int init_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
  ) {
    return _init_rnxctr(
      rnx,
    );
  }

  late final _init_rnxctrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<rnxctr_t>)>>(
          'init_rnxctr');
  late final _init_rnxctr =
      _init_rnxctrPtr.asFunction<int Function(ffi.Pointer<rnxctr_t>)>();

  void free_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
  ) {
    return _free_rnxctr(
      rnx,
    );
  }

  late final _free_rnxctrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rnxctr_t>)>>(
          'free_rnxctr');
  late final _free_rnxctr =
      _free_rnxctrPtr.asFunction<void Function(ffi.Pointer<rnxctr_t>)>();

  int open_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
    ffi.Pointer<FILE> fp,
  ) {
    return _open_rnxctr(
      rnx,
      fp,
    );
  }

  late final _open_rnxctrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>>('open_rnxctr');
  late final _open_rnxctr = _open_rnxctrPtr
      .asFunction<int Function(ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>();

  int input_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rnxctr(
      rnx,
      fp,
    );
  }

  late final _input_rnxctrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>>('input_rnxctr');
  late final _input_rnxctr = _input_rnxctrPtr
      .asFunction<int Function(ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>();

  /// ephemeris and clock functions
  double eph2clk(
    gtime_t time,
    ffi.Pointer<eph_t> eph,
  ) {
    return _eph2clk(
      time,
      eph,
    );
  }

  late final _eph2clkPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(gtime_t, ffi.Pointer<eph_t>)>>(
      'eph2clk');
  late final _eph2clk =
      _eph2clkPtr.asFunction<double Function(gtime_t, ffi.Pointer<eph_t>)>();

  double geph2clk(
    gtime_t time,
    ffi.Pointer<geph_t> geph,
  ) {
    return _geph2clk(
      time,
      geph,
    );
  }

  late final _geph2clkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<geph_t>)>>('geph2clk');
  late final _geph2clk =
      _geph2clkPtr.asFunction<double Function(gtime_t, ffi.Pointer<geph_t>)>();

  double seph2clk(
    gtime_t time,
    ffi.Pointer<seph_t> seph,
  ) {
    return _seph2clk(
      time,
      seph,
    );
  }

  late final _seph2clkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<seph_t>)>>('seph2clk');
  late final _seph2clk =
      _seph2clkPtr.asFunction<double Function(gtime_t, ffi.Pointer<seph_t>)>();

  void eph2pos(
    gtime_t time,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _eph2pos(
      time,
      eph,
      rs,
      dts,
      var1,
    );
  }

  late final _eph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('eph2pos');
  late final _eph2pos = _eph2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<eph_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void geph2pos(
    gtime_t time,
    ffi.Pointer<geph_t> geph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _geph2pos(
      time,
      geph,
      rs,
      dts,
      var1,
    );
  }

  late final _geph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<geph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('geph2pos');
  late final _geph2pos = _geph2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<geph_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void seph2pos(
    gtime_t time,
    ffi.Pointer<seph_t> seph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _seph2pos(
      time,
      seph,
      rs,
      dts,
      var1,
    );
  }

  late final _seph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<seph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('seph2pos');
  late final _seph2pos = _seph2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<seph_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int peph2pos(
    gtime_t time,
    int sat,
    ffi.Pointer<nav_t> nav,
    int opt,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _peph2pos(
      time,
      sat,
      nav,
      opt,
      rs,
      dts,
      var1,
    );
  }

  late final _peph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Int,
              ffi.Pointer<nav_t>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('peph2pos');
  late final _peph2pos = _peph2posPtr.asFunction<
      int Function(
          gtime_t,
          int,
          ffi.Pointer<nav_t>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void satantoff(
    gtime_t time,
    ffi.Pointer<ffi.Double> rs,
    int sat,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> dant,
  ) {
    return _satantoff(
      time,
      rs,
      sat,
      nav,
      dant,
    );
  }

  late final _satantoffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Int,
              ffi.Pointer<nav_t>, ffi.Pointer<ffi.Double>)>>('satantoff');
  late final _satantoff = _satantoffPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, int, ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>)>();

  int satpos(
    gtime_t time,
    gtime_t teph,
    int sat,
    int ephopt,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
    ffi.Pointer<ffi.Int> svh,
  ) {
    return _satpos(
      time,
      teph,
      sat,
      ephopt,
      nav,
      rs,
      dts,
      var1,
      svh,
    );
  }

  late final _satposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              gtime_t,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>)>>('satpos');
  late final _satpos = _satposPtr.asFunction<
      int Function(
          gtime_t,
          gtime_t,
          int,
          int,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>)>();

  void satposs(
    gtime_t time,
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<nav_t> nav,
    int sateph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
    ffi.Pointer<ffi.Int> svh,
  ) {
    return _satposs(
      time,
      obs,
      n,
      nav,
      sateph,
      rs,
      dts,
      var1,
      svh,
    );
  }

  late final _satpossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<obsd_t>,
              ffi.Int,
              ffi.Pointer<nav_t>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int>)>>('satposs');
  late final _satposs = _satpossPtr.asFunction<
      void Function(
          gtime_t,
          ffi.Pointer<obsd_t>,
          int,
          ffi.Pointer<nav_t>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int>)>();

  void setseleph(
    int sys,
    int sel,
  ) {
    return _setseleph(
      sys,
      sel,
    );
  }

  late final _setselephPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'setseleph');
  late final _setseleph = _setselephPtr.asFunction<void Function(int, int)>();

  int getseleph(
    int sys,
  ) {
    return _getseleph(
      sys,
    );
  }

  late final _getselephPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getseleph');
  late final _getseleph = _getselephPtr.asFunction<int Function(int)>();

  void readsp3(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
    int opt,
  ) {
    return _readsp3(
      file,
      nav,
      opt,
    );
  }

  late final _readsp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>, ffi.Int)>>('readsp3');
  late final _readsp3 = _readsp3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>, int)>();

  int readsap(
    ffi.Pointer<ffi.Char> file,
    gtime_t time,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readsap(
      file,
      time,
      nav,
    );
  }

  late final _readsapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, gtime_t, ffi.Pointer<nav_t>)>>('readsap');
  late final _readsap = _readsapPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, gtime_t, ffi.Pointer<nav_t>)>();

  int readdcb(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<sta_t> sta,
  ) {
    return _readdcb(
      file,
      nav,
      sta,
    );
  }

  late final _readdcbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>,
              ffi.Pointer<sta_t>)>>('readdcb');
  late final _readdcb = _readdcbPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>, ffi.Pointer<sta_t>)>();

  int readfcb(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readfcb(
      file,
      nav,
    );
  }

  late final _readfcbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>>('readfcb');
  late final _readfcb = _readfcbPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<nav_t>)>();

  void alm2pos(
    gtime_t time,
    ffi.Pointer<alm_t> alm,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
  ) {
    return _alm2pos(
      time,
      alm,
      rs,
      dts,
    );
  }

  late final _alm2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<alm_t>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('alm2pos');
  late final _alm2pos = _alm2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<alm_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int tle_read(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<tle_t> tle,
  ) {
    return _tle_read(
      file,
      tle,
    );
  }

  late final _tle_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<tle_t>)>>('tle_read');
  late final _tle_read = _tle_readPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<tle_t>)>();

  int tle_name_read(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<tle_t> tle,
  ) {
    return _tle_name_read(
      file,
      tle,
    );
  }

  late final _tle_name_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<tle_t>)>>('tle_name_read');
  late final _tle_name_read = _tle_name_readPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<tle_t>)>();

  int tle_pos(
    gtime_t time,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> satno,
    ffi.Pointer<ffi.Char> desig,
    ffi.Pointer<tle_t> tle,
    ffi.Pointer<erp_t> erp,
    ffi.Pointer<ffi.Double> rs,
  ) {
    return _tle_pos(
      time,
      name,
      satno,
      desig,
      tle,
      erp,
      rs,
    );
  }

  late final _tle_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tle_t>,
              ffi.Pointer<erp_t>,
              ffi.Pointer<ffi.Double>)>>('tle_pos');
  late final _tle_pos = _tle_posPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<tle_t>,
          ffi.Pointer<erp_t>,
          ffi.Pointer<ffi.Double>)>();

  /// receiver raw data functions
  int getbitu(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
  ) {
    return _getbitu(
      buff,
      pos,
      len,
    );
  }

  late final _getbituPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int)>>('getbitu');
  late final _getbitu =
      _getbituPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  int getbits(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
  ) {
    return _getbits(
      buff,
      pos,
      len,
    );
  }

  late final _getbitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int)>>('getbits');
  late final _getbits =
      _getbitsPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void setbitu(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
    int data,
  ) {
    return _setbitu(
      buff,
      pos,
      len,
      data,
    );
  }

  late final _setbituPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int,
              ffi.Uint32)>>('setbitu');
  late final _setbitu = _setbituPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void setbits(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
    int data,
  ) {
    return _setbits(
      buff,
      pos,
      len,
      data,
    );
  }

  late final _setbitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int, ffi.Int, ffi.Int32)>>('setbits');
  late final _setbits = _setbitsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int rtk_crc32(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _rtk_crc32(
      buff,
      len,
    );
  }

  late final _rtk_crc32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>('rtk_crc32');
  late final _rtk_crc32 =
      _rtk_crc32Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int rtk_crc24q(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _rtk_crc24q(
      buff,
      len,
    );
  }

  late final _rtk_crc24qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>('rtk_crc24q');
  late final _rtk_crc24q =
      _rtk_crc24qPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int rtk_crc16(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _rtk_crc16(
      buff,
      len,
    );
  }

  late final _rtk_crc16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ffi.Uint8>, ffi.Int)>>('rtk_crc16');
  late final _rtk_crc16 =
      _rtk_crc16Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int decode_word(
    int word,
    ffi.Pointer<ffi.Uint8> data,
  ) {
    return _decode_word(
      word,
      data,
    );
  }

  late final _decode_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint32, ffi.Pointer<ffi.Uint8>)>>('decode_word');
  late final _decode_word =
      _decode_wordPtr.asFunction<int Function(int, ffi.Pointer<ffi.Uint8>)>();

  int decode_frame(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<alm_t> alm,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_frame(
      buff,
      eph,
      alm,
      ion,
      utc,
    );
  }

  late final _decode_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<alm_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_frame');
  late final _decode_frame = _decode_framePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<eph_t>,
          ffi.Pointer<alm_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int test_glostr(
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _test_glostr(
      buff,
    );
  }

  late final _test_glostrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Uint8>)>>(
          'test_glostr');
  late final _test_glostr =
      _test_glostrPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  int decode_glostr(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<geph_t> geph,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_glostr(
      buff,
      geph,
      utc,
    );
  }

  late final _decode_glostrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<geph_t>,
              ffi.Pointer<ffi.Double>)>>('decode_glostr');
  late final _decode_glostr = _decode_glostrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<geph_t>,
          ffi.Pointer<ffi.Double>)>();

  int decode_bds_d1(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_bds_d1(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_bds_d1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_bds_d1');
  late final _decode_bds_d1 = _decode_bds_d1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int decode_bds_d2(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_bds_d2(
      buff,
      eph,
      utc,
    );
  }

  late final _decode_bds_d2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>)>>('decode_bds_d2');
  late final _decode_bds_d2 = _decode_bds_d2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>)>();

  int decode_gal_inav(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_gal_inav(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_gal_inavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_gal_inav');
  late final _decode_gal_inav = _decode_gal_inavPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int decode_gal_fnav(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_gal_fnav(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_gal_fnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_gal_fnav');
  late final _decode_gal_fnav = _decode_gal_fnavPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int decode_irn_nav(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_irn_nav(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_irn_navPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_irn_nav');
  late final _decode_irn_nav = _decode_irn_navPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  /// @brief initialize receiver raw data control
  ///
  /// initialize receiver raw data control struct and reallocate observation and
  /// epheris buffer
  /// args   : @param[in, out] raw receiver raw data control struct
  /// @param[in] format stream format (STRFMT_???)
  /// @return : status (1:ok, 0:memory allocation error)
  int init_raw(
    ffi.Pointer<raw_t> raw,
    int format,
  ) {
    return _init_raw(
      raw,
      format,
    );
  }

  late final _init_rawPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Int)>>(
      'init_raw');
  late final _init_raw =
      _init_rawPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  void free_raw(
    ffi.Pointer<raw_t> raw,
  ) {
    return _free_raw(
      raw,
    );
  }

  late final _free_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<raw_t>)>>(
          'free_raw');
  late final _free_raw =
      _free_rawPtr.asFunction<void Function(ffi.Pointer<raw_t>)>();

  /// @brief fetch next receiver raw data and input a message from stream
  /// args   : @param[in, out] raw receiver raw data control struct
  /// @param[in] format receiver raw data format (STRFMT_???)
  /// @param data stream data (1 byte)
  /// @return : status (-1: error message, 0: no message, 1: input observation data,
  /// 2: input ephemeris, 3: input sbas message,
  /// 9: input ion/utc parameter)
  int input_raw(
    ffi.Pointer<raw_t> raw,
    int format,
    int data,
  ) {
    return _input_raw(
      raw,
      format,
      data,
    );
  }

  late final _input_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Int, ffi.Uint8)>>('input_raw');
  late final _input_raw =
      _input_rawPtr.asFunction<int Function(ffi.Pointer<raw_t>, int, int)>();

  /// fetch next receiver raw data and input a message from file
  /// args   : @param[in, out] raw receiver raw data control struct
  /// @param[in] format receiver raw data format (STRFMT_???)
  /// @param[in] fp file pointer
  /// @return : status(-2: end of file/format error, -1...31: same as above)
  int input_rawf(
    ffi.Pointer<raw_t> raw,
    int format,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rawf(
      raw,
      format,
      fp,
    );
  }

  late final _input_rawfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Int, ffi.Pointer<FILE>)>>('input_rawf');
  late final _input_rawf = _input_rawfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, int, ffi.Pointer<FILE>)>();

  int init_rt17(
    ffi.Pointer<raw_t> raw,
  ) {
    return _init_rt17(
      raw,
    );
  }

  late final _init_rt17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>)>>(
          'init_rt17');
  late final _init_rt17 =
      _init_rt17Ptr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  int init_cmr(
    ffi.Pointer<raw_t> raw,
  ) {
    return _init_cmr(
      raw,
    );
  }

  late final _init_cmrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>)>>(
          'init_cmr');
  late final _init_cmr =
      _init_cmrPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  void free_rt17(
    ffi.Pointer<raw_t> raw,
  ) {
    return _free_rt17(
      raw,
    );
  }

  late final _free_rt17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<raw_t>)>>(
          'free_rt17');
  late final _free_rt17 =
      _free_rt17Ptr.asFunction<void Function(ffi.Pointer<raw_t>)>();

  void free_cmr(
    ffi.Pointer<raw_t> raw,
  ) {
    return _free_cmr(
      raw,
    );
  }

  late final _free_cmrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<raw_t>)>>(
          'free_cmr');
  late final _free_cmr =
      _free_cmrPtr.asFunction<void Function(ffi.Pointer<raw_t>)>();

  int update_cmr(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<obs_t> obs,
  ) {
    return _update_cmr(
      raw,
      svr,
      obs,
    );
  }

  late final _update_cmrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<raw_t>, ffi.Pointer<rtksvr_t>,
              ffi.Pointer<obs_t>)>>('update_cmr');
  late final _update_cmr = _update_cmrPtr.asFunction<
      int Function(
          ffi.Pointer<raw_t>, ffi.Pointer<rtksvr_t>, ffi.Pointer<obs_t>)>();

  int input_oem4(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_oem4(
      raw,
      data,
    );
  }

  late final _input_oem4Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_oem4');
  late final _input_oem4 =
      _input_oem4Ptr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_cnav(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_cnav(
      raw,
      data,
    );
  }

  late final _input_cnavPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_cnav');
  late final _input_cnav =
      _input_cnavPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  /// @brief input ublox raw message from stream
  ///
  /// fetch next ublox raw data and input a message from stream
  /// args   : @param[in, out] raw receiver raw data control struct
  /// @param[in] data stream data (1 byte)
  /// @return : status (-1: error message, 0: no message, 1: input observation data,
  /// 2: input ephemeris, 3: input sbas message,
  /// 9: input ion/utc parameter)
  ///
  /// notes  : to specify input options, set raw->opt to the following option
  /// strings separated by spaces.
  ///
  /// -EPHALL    : input all ephemerides
  /// -INVCP     : invert polarity of carrier-phase
  /// -TADJ=tint : adjust time tags to multiples of tint (sec)
  /// -STD_SLIP=std: slip by std-dev of carrier phase under std
  /// -MAX_CP_STD=std: max std-dev of carrier phase
  /// -MULTICODE :  preserve multiple signal codes for single freq
  /// -RCVSTDS :  save receiver stdevs to unused rinex fields
  ///
  ///
  /// The supported messages are as follows.
  ///
  /// UBX-RXM-RAW  : raw measurement data
  /// UBX-RXM-RAWX : multi-gnss measurement data
  /// UBX-RXM-SFRB : subframe buffer
  /// UBX-RXM-SFRBX: subframe buffer extension
  ///
  /// UBX-TRK-MEAS and UBX-TRK-SFRBX are based on NEO-M8N (F/W 2.01).
  /// UBX-TRK-D5 is based on NEO-7N (F/W 1.00). They are not formally
  /// documented and not supported by u-blox.
  /// Users can use these messages by their own risk.
  int input_ubx(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_ubx(
      raw,
      data,
    );
  }

  late final _input_ubxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_ubx');
  late final _input_ubx =
      _input_ubxPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_sbp(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_sbp(
      raw,
      data,
    );
  }

  late final _input_sbpPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_sbp');
  late final _input_sbp =
      _input_sbpPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_cres(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_cres(
      raw,
      data,
    );
  }

  late final _input_cresPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_cres');
  late final _input_cres =
      _input_cresPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_stq(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_stq(
      raw,
      data,
    );
  }

  late final _input_stqPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_stq');
  late final _input_stq =
      _input_stqPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_javad(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_javad(
      raw,
      data,
    );
  }

  late final _input_javadPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_javad');
  late final _input_javad =
      _input_javadPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_nvs(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_nvs(
      raw,
      data,
    );
  }

  late final _input_nvsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_nvs');
  late final _input_nvs =
      _input_nvsPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_bnx(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_bnx(
      raw,
      data,
    );
  }

  late final _input_bnxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_bnx');
  late final _input_bnx =
      _input_bnxPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_rt17(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_rt17(
      raw,
      data,
    );
  }

  late final _input_rt17Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_rt17');
  late final _input_rt17 =
      _input_rt17Ptr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_sbf(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_sbf(
      raw,
      data,
    );
  }

  late final _input_sbfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_sbf');
  late final _input_sbf =
      _input_sbfPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_tersus(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_tersus(
      raw,
      data,
    );
  }

  late final _input_tersusPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<raw_t>, ffi.Uint8)>>(
      'input_tersus');
  late final _input_tersus =
      _input_tersusPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_oem4f(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_oem4f(
      raw,
      fp,
    );
  }

  late final _input_oem4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_oem4f');
  late final _input_oem4f = _input_oem4fPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_cnavf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_cnavf(
      raw,
      fp,
    );
  }

  late final _input_cnavfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_cnavf');
  late final _input_cnavf = _input_cnavfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  /// @brief input ublox raw message from file
  ///
  /// fetch next ublox raw data and input a message from file
  /// args   : @param[in, out] raw receiver raw data control struct
  /// @param[in] fp file pointer
  /// @return : status(-2: end of file, -1...9: same as above)
  int input_ubxf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_ubxf(
      raw,
      fp,
    );
  }

  late final _input_ubxfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_ubxf');
  late final _input_ubxf = _input_ubxfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_sbpf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_sbpf(
      raw,
      fp,
    );
  }

  late final _input_sbpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_sbpf');
  late final _input_sbpf = _input_sbpfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_cresf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_cresf(
      raw,
      fp,
    );
  }

  late final _input_cresfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_cresf');
  late final _input_cresf = _input_cresfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_stqf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_stqf(
      raw,
      fp,
    );
  }

  late final _input_stqfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_stqf');
  late final _input_stqf = _input_stqfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_javadf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_javadf(
      raw,
      fp,
    );
  }

  late final _input_javadfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_javadf');
  late final _input_javadf = _input_javadfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_nvsf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_nvsf(
      raw,
      fp,
    );
  }

  late final _input_nvsfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_nvsf');
  late final _input_nvsf = _input_nvsfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_bnxf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_bnxf(
      raw,
      fp,
    );
  }

  late final _input_bnxfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_bnxf');
  late final _input_bnxf = _input_bnxfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_rt17f(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rt17f(
      raw,
      fp,
    );
  }

  late final _input_rt17fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_rt17f');
  late final _input_rt17f = _input_rt17fPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_sbff(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_sbff(
      raw,
      fp,
    );
  }

  late final _input_sbffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_sbff');
  late final _input_sbff = _input_sbffPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_tersusf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_tersusf(
      raw,
      fp,
    );
  }

  late final _input_tersusfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_tersusf');
  late final _input_tersusf = _input_tersusfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int gen_ubx(
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_ubx(
      msg,
      buff,
    );
  }

  late final _gen_ubxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>>('gen_ubx');
  late final _gen_ubx = _gen_ubxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int gen_stq(
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_stq(
      msg,
      buff,
    );
  }

  late final _gen_stqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>>('gen_stq');
  late final _gen_stq = _gen_stqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  int gen_nvs(
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_nvs(
      msg,
      buff,
    );
  }

  late final _gen_nvsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>>('gen_nvs');
  late final _gen_nvs = _gen_nvsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>)>();

  /// rtcm functions
  int init_rtcm(
    ffi.Pointer<rtcm_t> rtcm,
  ) {
    return _init_rtcm(
      rtcm,
    );
  }

  late final _init_rtcmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<rtcm_t>)>>(
          'init_rtcm');
  late final _init_rtcm =
      _init_rtcmPtr.asFunction<int Function(ffi.Pointer<rtcm_t>)>();

  void free_rtcm(
    ffi.Pointer<rtcm_t> rtcm,
  ) {
    return _free_rtcm(
      rtcm,
    );
  }

  late final _free_rtcmPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtcm_t>)>>(
          'free_rtcm');
  late final _free_rtcm =
      _free_rtcmPtr.asFunction<void Function(ffi.Pointer<rtcm_t>)>();

  int input_rtcm2(
    ffi.Pointer<rtcm_t> rtcm,
    int data,
  ) {
    return _input_rtcm2(
      rtcm,
      data,
    );
  }

  late final _input_rtcm2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<rtcm_t>, ffi.Uint8)>>(
      'input_rtcm2');
  late final _input_rtcm2 =
      _input_rtcm2Ptr.asFunction<int Function(ffi.Pointer<rtcm_t>, int)>();

  int input_rtcm3(
    ffi.Pointer<rtcm_t> rtcm,
    int data,
  ) {
    return _input_rtcm3(
      rtcm,
      data,
    );
  }

  late final _input_rtcm3Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<rtcm_t>, ffi.Uint8)>>(
      'input_rtcm3');
  late final _input_rtcm3 =
      _input_rtcm3Ptr.asFunction<int Function(ffi.Pointer<rtcm_t>, int)>();

  int input_rtcm2f(
    ffi.Pointer<rtcm_t> rtcm,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rtcm2f(
      rtcm,
      fp,
    );
  }

  late final _input_rtcm2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>>('input_rtcm2f');
  late final _input_rtcm2f = _input_rtcm2fPtr
      .asFunction<int Function(ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>();

  int input_rtcm3f(
    ffi.Pointer<rtcm_t> rtcm,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rtcm3f(
      rtcm,
      fp,
    );
  }

  late final _input_rtcm3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>>('input_rtcm3f');
  late final _input_rtcm3f = _input_rtcm3fPtr
      .asFunction<int Function(ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>();

  int gen_rtcm2(
    ffi.Pointer<rtcm_t> rtcm,
    int type,
    int sync1,
  ) {
    return _gen_rtcm2(
      rtcm,
      type,
      sync1,
    );
  }

  late final _gen_rtcm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtcm_t>, ffi.Int, ffi.Int)>>('gen_rtcm2');
  late final _gen_rtcm2 =
      _gen_rtcm2Ptr.asFunction<int Function(ffi.Pointer<rtcm_t>, int, int)>();

  int gen_rtcm3(
    ffi.Pointer<rtcm_t> rtcm,
    int type,
    int subtype,
    int sync1,
  ) {
    return _gen_rtcm3(
      rtcm,
      type,
      subtype,
      sync1,
    );
  }

  late final _gen_rtcm3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtcm_t>, ffi.Int, ffi.Int, ffi.Int)>>('gen_rtcm3');
  late final _gen_rtcm3 = _gen_rtcm3Ptr
      .asFunction<int Function(ffi.Pointer<rtcm_t>, int, int, int)>();

  /// solution functions
  void initsolbuf(
    ffi.Pointer<solbuf_t> solbuf,
    int cyclic,
    int nmax,
  ) {
    return _initsolbuf(
      solbuf,
      cyclic,
      nmax,
    );
  }

  late final _initsolbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<solbuf_t>, ffi.Int, ffi.Int)>>('initsolbuf');
  late final _initsolbuf = _initsolbufPtr
      .asFunction<void Function(ffi.Pointer<solbuf_t>, int, int)>();

  void freesolbuf(
    ffi.Pointer<solbuf_t> solbuf,
  ) {
    return _freesolbuf(
      solbuf,
    );
  }

  late final _freesolbufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<solbuf_t>)>>(
          'freesolbuf');
  late final _freesolbuf =
      _freesolbufPtr.asFunction<void Function(ffi.Pointer<solbuf_t>)>();

  void freesolstatbuf(
    ffi.Pointer<solstatbuf_t> solstatbuf,
  ) {
    return _freesolstatbuf(
      solstatbuf,
    );
  }

  late final _freesolstatbufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<solstatbuf_t>)>>(
          'freesolstatbuf');
  late final _freesolstatbuf =
      _freesolstatbufPtr.asFunction<void Function(ffi.Pointer<solstatbuf_t>)>();

  ffi.Pointer<sol_t> getsol(
    ffi.Pointer<solbuf_t> solbuf,
    int index,
  ) {
    return _getsol(
      solbuf,
      index,
    );
  }

  late final _getsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sol_t> Function(
              ffi.Pointer<solbuf_t>, ffi.Int)>>('getsol');
  late final _getsol = _getsolPtr
      .asFunction<ffi.Pointer<sol_t> Function(ffi.Pointer<solbuf_t>, int)>();

  int addsol(
    ffi.Pointer<solbuf_t> solbuf,
    ffi.Pointer<sol_t> sol,
  ) {
    return _addsol(
      solbuf,
      sol,
    );
  }

  late final _addsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<solbuf_t>, ffi.Pointer<sol_t>)>>('addsol');
  late final _addsol = _addsolPtr
      .asFunction<int Function(ffi.Pointer<solbuf_t>, ffi.Pointer<sol_t>)>();

  int readsol(
    ffi.Pointer<ffi.Pointer<ffi.Char>> files,
    int nfile,
    ffi.Pointer<solbuf_t> sol,
  ) {
    return _readsol(
      files,
      nfile,
      sol,
    );
  }

  late final _readsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int,
              ffi.Pointer<solbuf_t>)>>('readsol');
  late final _readsol = _readsolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, ffi.Pointer<solbuf_t>)>();

  int readsolt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> files,
    int nfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflag,
    ffi.Pointer<solbuf_t> sol,
  ) {
    return _readsolt(
      files,
      nfile,
      ts,
      te,
      tint,
      qflag,
      sol,
    );
  }

  late final _readsoltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<solbuf_t>)>>('readsolt');
  late final _readsolt = _readsoltPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int, gtime_t, gtime_t,
          double, int, ffi.Pointer<solbuf_t>)>();

  int readsolstat(
    ffi.Pointer<ffi.Pointer<ffi.Char>> files,
    int nfile,
    ffi.Pointer<solstatbuf_t> statbuf,
  ) {
    return _readsolstat(
      files,
      nfile,
      statbuf,
    );
  }

  late final _readsolstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int,
              ffi.Pointer<solstatbuf_t>)>>('readsolstat');
  late final _readsolstat = _readsolstatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int,
          ffi.Pointer<solstatbuf_t>)>();

  int readsolstatt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> files,
    int nfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    ffi.Pointer<solstatbuf_t> statbuf,
  ) {
    return _readsolstatt(
      files,
      nfile,
      ts,
      te,
      tint,
      statbuf,
    );
  }

  late final _readsolstattPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int, gtime_t,
              gtime_t, ffi.Double, ffi.Pointer<solstatbuf_t>)>>('readsolstatt');
  late final _readsolstatt = _readsolstattPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int, gtime_t, gtime_t,
          double, ffi.Pointer<solstatbuf_t>)>();

  int inputsol(
    int data,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflag,
    ffi.Pointer<solopt_t> opt,
    ffi.Pointer<solbuf_t> solbuf,
  ) {
    return _inputsol(
      data,
      ts,
      te,
      tint,
      qflag,
      opt,
      solbuf,
    );
  }

  late final _inputsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Uint8, gtime_t, gtime_t, ffi.Double, ffi.Int,
              ffi.Pointer<solopt_t>, ffi.Pointer<solbuf_t>)>>('inputsol');
  late final _inputsol = _inputsolPtr.asFunction<
      int Function(int, gtime_t, gtime_t, double, int, ffi.Pointer<solopt_t>,
          ffi.Pointer<solbuf_t>)>();

  int outprcopts(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _outprcopts(
      buff,
      opt,
    );
  }

  late final _outprcoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<prcopt_t>)>>('outprcopts');
  late final _outprcopts = _outprcoptsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<prcopt_t>)>();

  int outsolheads(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolheads(
      buff,
      opt,
    );
  }

  late final _outsolheadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<solopt_t>)>>('outsolheads');
  late final _outsolheads = _outsolheadsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<solopt_t>)>();

  int outsols(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ffi.Double> rb,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsols(
      buff,
      sol,
      rb,
      opt,
    );
  }

  late final _outsolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>>('outsols');
  late final _outsols = _outsolsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>();

  int outsolexs(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolexs(
      buff,
      sol,
      ssat,
      opt,
    );
  }

  late final _outsolexsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>, ffi.Pointer<solopt_t>)>>('outsolexs');
  late final _outsolexs = _outsolexsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
          ffi.Pointer<ssat_t>, ffi.Pointer<solopt_t>)>();

  void outprcopt(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _outprcopt(
      fp,
      opt,
    );
  }

  late final _outprcoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<prcopt_t>)>>('outprcopt');
  late final _outprcopt = _outprcoptPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<prcopt_t>)>();

  void outsolhead(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolhead(
      fp,
      opt,
    );
  }

  late final _outsolheadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<solopt_t>)>>('outsolhead');
  late final _outsolhead = _outsolheadPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<solopt_t>)>();

  void outsol(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ffi.Double> rb,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsol(
      fp,
      sol,
      rb,
      opt,
    );
  }

  late final _outsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>>('outsol');
  late final _outsol = _outsolPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>();

  void outsolex(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolex(
      fp,
      sol,
      ssat,
      opt,
    );
  }

  late final _outsolexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>, ffi.Pointer<solopt_t>)>>('outsolex');
  late final _outsolex = _outsolexPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>, ffi.Pointer<ssat_t>,
          ffi.Pointer<solopt_t>)>();

  int outnmea_rmc(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
  ) {
    return _outnmea_rmc(
      buff,
      sol,
    );
  }

  late final _outnmea_rmcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>>('outnmea_rmc');
  late final _outnmea_rmc = _outnmea_rmcPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>();

  int outnmea_gga(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
  ) {
    return _outnmea_gga(
      buff,
      sol,
    );
  }

  late final _outnmea_ggaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>>('outnmea_gga');
  late final _outnmea_gga = _outnmea_ggaPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>();

  int outnmea_gsa(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
  ) {
    return _outnmea_gsa(
      buff,
      sol,
      ssat,
    );
  }

  late final _outnmea_gsaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>)>>('outnmea_gsa');
  late final _outnmea_gsa = _outnmea_gsaPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>, ffi.Pointer<ssat_t>)>();

  int outnmea_gsv(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
  ) {
    return _outnmea_gsv(
      buff,
      sol,
      ssat,
    );
  }

  late final _outnmea_gsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>)>>('outnmea_gsv');
  late final _outnmea_gsv = _outnmea_gsvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>, ffi.Pointer<ssat_t>)>();

  /// google earth kml converter
  int convkml(
    ffi.Pointer<ffi.Char> infile,
    ffi.Pointer<ffi.Char> outfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflg,
    ffi.Pointer<ffi.Double> offset,
    int tcolor,
    int pcolor,
    int outalt,
    int outtime,
  ) {
    return _convkml(
      infile,
      outfile,
      ts,
      te,
      tint,
      qflg,
      offset,
      tcolor,
      pcolor,
      outalt,
      outtime,
    );
  }

  late final _convkmlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('convkml');
  late final _convkml = _convkmlPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, gtime_t,
          gtime_t, double, int, ffi.Pointer<ffi.Double>, int, int, int, int)>();

  /// gpx converter
  int convgpx(
    ffi.Pointer<ffi.Char> infile,
    ffi.Pointer<ffi.Char> outfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflg,
    ffi.Pointer<ffi.Double> offset,
    int outtrk,
    int outpnt,
    int outalt,
    int outtime,
  ) {
    return _convgpx(
      infile,
      outfile,
      ts,
      te,
      tint,
      qflg,
      offset,
      outtrk,
      outpnt,
      outalt,
      outtime,
    );
  }

  late final _convgpxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('convgpx');
  late final _convgpx = _convgpxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, gtime_t,
          gtime_t, double, int, ffi.Pointer<ffi.Double>, int, int, int, int)>();

  /// sbas functions
  int sbsreadmsg(
    ffi.Pointer<ffi.Char> file,
    int sel,
    ffi.Pointer<sbs_t> sbs,
  ) {
    return _sbsreadmsg(
      file,
      sel,
      sbs,
    );
  }

  late final _sbsreadmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<sbs_t>)>>('sbsreadmsg');
  late final _sbsreadmsg = _sbsreadmsgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<sbs_t>)>();

  int sbsreadmsgt(
    ffi.Pointer<ffi.Char> file,
    int sel,
    gtime_t ts,
    gtime_t te,
    ffi.Pointer<sbs_t> sbs,
  ) {
    return _sbsreadmsgt(
      file,
      sel,
      ts,
      te,
      sbs,
    );
  }

  late final _sbsreadmsgtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, gtime_t, gtime_t,
              ffi.Pointer<sbs_t>)>>('sbsreadmsgt');
  late final _sbsreadmsgt = _sbsreadmsgtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, gtime_t, gtime_t, ffi.Pointer<sbs_t>)>();

  void sbsoutmsg(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<sbsmsg_t> sbsmsg,
  ) {
    return _sbsoutmsg(
      fp,
      sbsmsg,
    );
  }

  late final _sbsoutmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<sbsmsg_t>)>>('sbsoutmsg');
  late final _sbsoutmsg = _sbsoutmsgPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<sbsmsg_t>)>();

  int sbsdecodemsg(
    gtime_t time,
    int prn,
    ffi.Pointer<ffi.Uint32> words,
    ffi.Pointer<sbsmsg_t> sbsmsg,
  ) {
    return _sbsdecodemsg(
      time,
      prn,
      words,
      sbsmsg,
    );
  }

  late final _sbsdecodemsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(gtime_t, ffi.Int, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<sbsmsg_t>)>>('sbsdecodemsg');
  late final _sbsdecodemsg = _sbsdecodemsgPtr.asFunction<
      int Function(
          gtime_t, int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<sbsmsg_t>)>();

  int sbsupdatecorr(
    ffi.Pointer<sbsmsg_t> msg,
    ffi.Pointer<nav_t> nav,
  ) {
    return _sbsupdatecorr(
      msg,
      nav,
    );
  }

  late final _sbsupdatecorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<sbsmsg_t>, ffi.Pointer<nav_t>)>>('sbsupdatecorr');
  late final _sbsupdatecorr = _sbsupdatecorrPtr
      .asFunction<int Function(ffi.Pointer<sbsmsg_t>, ffi.Pointer<nav_t>)>();

  int sbssatcorr(
    gtime_t time,
    int sat,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _sbssatcorr(
      time,
      sat,
      nav,
      rs,
      dts,
      var1,
    );
  }

  late final _sbssatcorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Int,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sbssatcorr');
  late final _sbssatcorr = _sbssatcorrPtr.asFunction<
      int Function(gtime_t, int, ffi.Pointer<nav_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int sbsioncorr(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> delay,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _sbsioncorr(
      time,
      nav,
      pos,
      azel,
      delay,
      var1,
    );
  }

  late final _sbsioncorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sbsioncorr');
  late final _sbsioncorr = _sbsioncorrPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double sbstropcorr(
    gtime_t time,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _sbstropcorr(
      time,
      pos,
      azel,
      var1,
    );
  }

  late final _sbstropcorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              gtime_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sbstropcorr');
  late final _sbstropcorr = _sbstropcorrPtr.asFunction<
      double Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  /// options functions
  ffi.Pointer<opt_t> searchopt(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<opt_t> opts,
  ) {
    return _searchopt(
      name,
      opts,
    );
  }

  late final _searchoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<opt_t> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<opt_t>)>>('searchopt');
  late final _searchopt = _searchoptPtr.asFunction<
      ffi.Pointer<opt_t> Function(ffi.Pointer<ffi.Char>, ffi.Pointer<opt_t>)>();

  int str2opt(
    ffi.Pointer<opt_t> opt,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _str2opt(
      opt,
      str,
    );
  }

  late final _str2optPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<opt_t>, ffi.Pointer<ffi.Char>)>>('str2opt');
  late final _str2opt = _str2optPtr
      .asFunction<int Function(ffi.Pointer<opt_t>, ffi.Pointer<ffi.Char>)>();

  int opt2str(
    ffi.Pointer<opt_t> opt,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _opt2str(
      opt,
      str,
    );
  }

  late final _opt2strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<opt_t>, ffi.Pointer<ffi.Char>)>>('opt2str');
  late final _opt2str = _opt2strPtr
      .asFunction<int Function(ffi.Pointer<opt_t>, ffi.Pointer<ffi.Char>)>();

  int opt2buf(
    ffi.Pointer<opt_t> opt,
    ffi.Pointer<ffi.Char> buff,
  ) {
    return _opt2buf(
      opt,
      buff,
    );
  }

  late final _opt2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<opt_t>, ffi.Pointer<ffi.Char>)>>('opt2buf');
  late final _opt2buf = _opt2bufPtr
      .asFunction<int Function(ffi.Pointer<opt_t>, ffi.Pointer<ffi.Char>)>();

  int loadopts(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<opt_t> opts,
  ) {
    return _loadopts(
      file,
      opts,
    );
  }

  late final _loadoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<opt_t>)>>('loadopts');
  late final _loadopts = _loadoptsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<opt_t>)>();

  int saveopts(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> mode,
    ffi.Pointer<ffi.Char> comment,
    ffi.Pointer<opt_t> opts,
  ) {
    return _saveopts(
      file,
      mode,
      comment,
      opts,
    );
  }

  late final _saveoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<opt_t>)>>('saveopts');
  late final _saveopts = _saveoptsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<opt_t>)>();

  void resetsysopts() {
    return _resetsysopts();
  }

  late final _resetsysoptsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('resetsysopts');
  late final _resetsysopts = _resetsysoptsPtr.asFunction<void Function()>();

  void getsysopts(
    ffi.Pointer<prcopt_t> popt,
    ffi.Pointer<solopt_t> sopt,
    ffi.Pointer<filopt_t> fopt,
  ) {
    return _getsysopts(
      popt,
      sopt,
      fopt,
    );
  }

  late final _getsysoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
              ffi.Pointer<filopt_t>)>>('getsysopts');
  late final _getsysopts = _getsysoptsPtr.asFunction<
      void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
          ffi.Pointer<filopt_t>)>();

  void setsysopts(
    ffi.Pointer<prcopt_t> popt,
    ffi.Pointer<solopt_t> sopt,
    ffi.Pointer<filopt_t> fopt,
  ) {
    return _setsysopts(
      popt,
      sopt,
      fopt,
    );
  }

  late final _setsysoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
              ffi.Pointer<filopt_t>)>>('setsysopts');
  late final _setsysopts = _setsysoptsPtr.asFunction<
      void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
          ffi.Pointer<filopt_t>)>();

  /// stream data input and output functions
  void strinitcom() {
    return _strinitcom();
  }

  late final _strinitcomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('strinitcom');
  late final _strinitcom = _strinitcomPtr.asFunction<void Function()>();

  void strinit(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strinit(
      stream,
    );
  }

  late final _strinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strinit');
  late final _strinit =
      _strinitPtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  void strlock(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strlock(
      stream,
    );
  }

  late final _strlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strlock');
  late final _strlock =
      _strlockPtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  void strunlock(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strunlock(
      stream,
    );
  }

  late final _strunlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strunlock');
  late final _strunlock =
      _strunlockPtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  int stropen(
    ffi.Pointer<stream_t> stream,
    int type,
    int mode,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _stropen(
      stream,
      type,
      mode,
      path,
    );
  }

  late final _stropenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stream_t>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('stropen');
  late final _stropen = _stropenPtr.asFunction<
      int Function(ffi.Pointer<stream_t>, int, int, ffi.Pointer<ffi.Char>)>();

  void strclose(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strclose(
      stream,
    );
  }

  late final _strclosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strclose');
  late final _strclose =
      _strclosePtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  int strread(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Uint8> buff,
    int n,
  ) {
    return _strread(
      stream,
      buff,
      n,
    );
  }

  late final _strreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('strread');
  late final _strread = _strreadPtr.asFunction<
      int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>, int)>();

  int strwrite(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Uint8> buff,
    int n,
  ) {
    return _strwrite(
      stream,
      buff,
      n,
    );
  }

  late final _strwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>,
              ffi.Int)>>('strwrite');
  late final _strwrite = _strwritePtr.asFunction<
      int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>, int)>();

  void strsync(
    ffi.Pointer<stream_t> stream1,
    ffi.Pointer<stream_t> stream2,
  ) {
    return _strsync(
      stream1,
      stream2,
    );
  }

  late final _strsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Pointer<stream_t>)>>('strsync');
  late final _strsync = _strsyncPtr.asFunction<
      void Function(ffi.Pointer<stream_t>, ffi.Pointer<stream_t>)>();

  int strstat(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _strstat(
      stream,
      msg,
    );
  }

  late final _strstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stream_t>, ffi.Pointer<ffi.Char>)>>('strstat');
  late final _strstat = _strstatPtr
      .asFunction<int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Char>)>();

  int strstatx(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _strstatx(
      stream,
      msg,
    );
  }

  late final _strstatxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<stream_t>, ffi.Pointer<ffi.Char>)>>('strstatx');
  late final _strstatx = _strstatxPtr
      .asFunction<int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Char>)>();

  void strsum(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Int> inb,
    ffi.Pointer<ffi.Int> inr,
    ffi.Pointer<ffi.Int> outb,
    ffi.Pointer<ffi.Int> outr,
  ) {
    return _strsum(
      stream,
      inb,
      inr,
      outb,
      outr,
    );
  }

  late final _strsumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('strsum');
  late final _strsum = _strsumPtr.asFunction<
      void Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void strsetopt(
    ffi.Pointer<ffi.Int> opt,
  ) {
    return _strsetopt(
      opt,
    );
  }

  late final _strsetoptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'strsetopt');
  late final _strsetopt =
      _strsetoptPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  gtime_t strgettime(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strgettime(
      stream,
    );
  }

  late final _strgettimePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Pointer<stream_t>)>>(
          'strgettime');
  late final _strgettime =
      _strgettimePtr.asFunction<gtime_t Function(ffi.Pointer<stream_t>)>();

  void strsendnmea(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<sol_t> sol,
  ) {
    return _strsendnmea(
      stream,
      sol,
    );
  }

  late final _strsendnmeaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Pointer<sol_t>)>>('strsendnmea');
  late final _strsendnmea = _strsendnmeaPtr
      .asFunction<void Function(ffi.Pointer<stream_t>, ffi.Pointer<sol_t>)>();

  void strsendcmd(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Char> cmd,
  ) {
    return _strsendcmd(
      stream,
      cmd,
    );
  }

  late final _strsendcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Pointer<ffi.Char>)>>('strsendcmd');
  late final _strsendcmd = _strsendcmdPtr.asFunction<
      void Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Char>)>();

  void strsettimeout(
    ffi.Pointer<stream_t> stream,
    int toinact,
    int tirecon,
  ) {
    return _strsettimeout(
      stream,
      toinact,
      tirecon,
    );
  }

  late final _strsettimeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Int, ffi.Int)>>('strsettimeout');
  late final _strsettimeout = _strsettimeoutPtr
      .asFunction<void Function(ffi.Pointer<stream_t>, int, int)>();

  void strsetdir(
    ffi.Pointer<ffi.Char> dir,
  ) {
    return _strsetdir(
      dir,
    );
  }

  late final _strsetdirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'strsetdir');
  late final _strsetdir =
      _strsetdirPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void strsetproxy(
    ffi.Pointer<ffi.Char> addr,
  ) {
    return _strsetproxy(
      addr,
    );
  }

  late final _strsetproxyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'strsetproxy');
  late final _strsetproxy =
      _strsetproxyPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// integer ambiguity resolution
  int lambda(
    int n,
    int m,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> F,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _lambda(
      n,
      m,
      a,
      Q,
      F,
      s,
    );
  }

  late final _lambdaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lambda');
  late final _lambda = _lambdaPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int lambda_reduction(
    int n,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> Z,
  ) {
    return _lambda_reduction(
      n,
      Q,
      Z,
    );
  }

  late final _lambda_reductionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lambda_reduction');
  late final _lambda_reduction = _lambda_reductionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int lambda_search(
    int n,
    int m,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> F,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _lambda_search(
      n,
      m,
      a,
      Q,
      F,
      s,
    );
  }

  late final _lambda_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lambda_search');
  late final _lambda_search = _lambda_searchPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  /// standard positioning
  int pntpos(
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<prcopt_t> opt,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ssat_t> ssat,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _pntpos(
      obs,
      n,
      nav,
      opt,
      sol,
      azel,
      ssat,
      msg,
    );
  }

  late final _pntposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<obsd_t>,
              ffi.Int,
              ffi.Pointer<nav_t>,
              ffi.Pointer<prcopt_t>,
              ffi.Pointer<sol_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ssat_t>,
              ffi.Pointer<ffi.Char>)>>('pntpos');
  late final _pntpos = _pntposPtr.asFunction<
      int Function(
          ffi.Pointer<obsd_t>,
          int,
          ffi.Pointer<nav_t>,
          ffi.Pointer<prcopt_t>,
          ffi.Pointer<sol_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ssat_t>,
          ffi.Pointer<ffi.Char>)>();

  /// precise positioning
  void rtkinit(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _rtkinit(
      rtk,
      opt,
    );
  }

  late final _rtkinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<rtk_t>, ffi.Pointer<prcopt_t>)>>('rtkinit');
  late final _rtkinit = _rtkinitPtr
      .asFunction<void Function(ffi.Pointer<rtk_t>, ffi.Pointer<prcopt_t>)>();

  void rtkfree(
    ffi.Pointer<rtk_t> rtk,
  ) {
    return _rtkfree(
      rtk,
    );
  }

  late final _rtkfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtk_t>)>>(
          'rtkfree');
  late final _rtkfree =
      _rtkfreePtr.asFunction<void Function(ffi.Pointer<rtk_t>)>();

  int rtkpos(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<obsd_t> obs,
    int nobs,
    ffi.Pointer<nav_t> nav,
  ) {
    return _rtkpos(
      rtk,
      obs,
      nobs,
      nav,
    );
  }

  late final _rtkposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, ffi.Int,
              ffi.Pointer<nav_t>)>>('rtkpos');
  late final _rtkpos = _rtkposPtr.asFunction<
      int Function(
          ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, int, ffi.Pointer<nav_t>)>();

  int rtkopenstat(
    ffi.Pointer<ffi.Char> file,
    int level,
  ) {
    return _rtkopenstat(
      file,
      level,
    );
  }

  late final _rtkopenstatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'rtkopenstat');
  late final _rtkopenstat =
      _rtkopenstatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void rtkclosestat() {
    return _rtkclosestat();
  }

  late final _rtkclosestatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rtkclosestat');
  late final _rtkclosestat = _rtkclosestatPtr.asFunction<void Function()>();

  int rtkoutstat(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<ffi.Char> buff,
  ) {
    return _rtkoutstat(
      rtk,
      buff,
    );
  }

  late final _rtkoutstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Char>)>>('rtkoutstat');
  late final _rtkoutstat = _rtkoutstatPtr
      .asFunction<int Function(ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Char>)>();

  /// precise point positioning (PPP)
  void pppos(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<nav_t> nav,
  ) {
    return _pppos(
      rtk,
      obs,
      n,
      nav,
    );
  }

  late final _ppposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, ffi.Int,
              ffi.Pointer<nav_t>)>>('pppos');
  late final _pppos = _ppposPtr.asFunction<
      void Function(
          ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, int, ffi.Pointer<nav_t>)>();

  int pppnx(
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _pppnx(
      opt,
    );
  }

  late final _pppnxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<prcopt_t>)>>(
          'pppnx');
  late final _pppnx =
      _pppnxPtr.asFunction<int Function(ffi.Pointer<prcopt_t>)>();

  int pppoutstat(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<ffi.Char> buff,
  ) {
    return _pppoutstat(
      rtk,
      buff,
    );
  }

  late final _pppoutstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Char>)>>('pppoutstat');
  late final _pppoutstat = _pppoutstatPtr
      .asFunction<int Function(ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Char>)>();

  int ppp_ar(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<ffi.Int> exc,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _ppp_ar(
      rtk,
      obs,
      n,
      exc,
      nav,
      azel,
      x,
      P,
    );
  }

  late final _ppp_arPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtk_t>,
              ffi.Pointer<obsd_t>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ppp_ar');
  late final _ppp_ar = _ppp_arPtr.asFunction<
      int Function(
          ffi.Pointer<rtk_t>,
          ffi.Pointer<obsd_t>,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  /// post-processing positioning
  int postpos(
    gtime_t ts,
    gtime_t te,
    double ti,
    double tu,
    ffi.Pointer<prcopt_t> popt,
    ffi.Pointer<solopt_t> sopt,
    ffi.Pointer<filopt_t> fopt,
    ffi.Pointer<ffi.Pointer<ffi.Char>> infile,
    int n,
    ffi.Pointer<ffi.Char> outfile,
    ffi.Pointer<ffi.Char> rov,
    ffi.Pointer<ffi.Char> base,
  ) {
    return _postpos(
      ts,
      te,
      ti,
      tu,
      popt,
      sopt,
      fopt,
      infile,
      n,
      outfile,
      rov,
      base,
    );
  }

  late final _postposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<prcopt_t>,
              ffi.Pointer<solopt_t>,
              ffi.Pointer<filopt_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('postpos');
  late final _postpos = _postposPtr.asFunction<
      int Function(
          gtime_t,
          gtime_t,
          double,
          double,
          ffi.Pointer<prcopt_t>,
          ffi.Pointer<solopt_t>,
          ffi.Pointer<filopt_t>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// stream server functions
  void strsvrinit(
    ffi.Pointer<strsvr_t> svr,
    int nout,
  ) {
    return _strsvrinit(
      svr,
      nout,
    );
  }

  late final _strsvrinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<strsvr_t>, ffi.Int)>>('strsvrinit');
  late final _strsvrinit =
      _strsvrinitPtr.asFunction<void Function(ffi.Pointer<strsvr_t>, int)>();

  int strsvrstart(
    ffi.Pointer<strsvr_t> svr,
    ffi.Pointer<ffi.Int> opts,
    ffi.Pointer<ffi.Int> strs,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paths,
    ffi.Pointer<ffi.Pointer<ffi.Char>> logs,
    ffi.Pointer<ffi.Pointer<strconv_t>> conv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cmds,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cmds_priodic,
    ffi.Pointer<ffi.Double> nmeapos,
  ) {
    return _strsvrstart(
      svr,
      opts,
      strs,
      paths,
      logs,
      conv,
      cmds,
      cmds_priodic,
      nmeapos,
    );
  }

  late final _strsvrstartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<strsvr_t>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<strconv_t>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Double>)>>('strsvrstart');
  late final _strsvrstart = _strsvrstartPtr.asFunction<
      int Function(
          ffi.Pointer<strsvr_t>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<strconv_t>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Double>)>();

  void strsvrstop(
    ffi.Pointer<strsvr_t> svr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cmds,
  ) {
    return _strsvrstop(
      svr,
      cmds,
    );
  }

  late final _strsvrstopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<strsvr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strsvrstop');
  late final _strsvrstop = _strsvrstopPtr.asFunction<
      void Function(
          ffi.Pointer<strsvr_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void strsvrstat(
    ffi.Pointer<strsvr_t> svr,
    ffi.Pointer<ffi.Int> stat,
    ffi.Pointer<ffi.Int> log_stat,
    ffi.Pointer<ffi.Int> byte,
    ffi.Pointer<ffi.Int> bps,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _strsvrstat(
      svr,
      stat,
      log_stat,
      byte,
      bps,
      msg,
    );
  }

  late final _strsvrstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<strsvr_t>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('strsvrstat');
  late final _strsvrstat = _strsvrstatPtr.asFunction<
      void Function(
          ffi.Pointer<strsvr_t>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<strconv_t> strconvnew(
    int itype,
    int otype,
    ffi.Pointer<ffi.Char> msgs,
    int staid,
    int stasel,
    ffi.Pointer<ffi.Char> opt,
  ) {
    return _strconvnew(
      itype,
      otype,
      msgs,
      staid,
      stasel,
      opt,
    );
  }

  late final _strconvnewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<strconv_t> Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('strconvnew');
  late final _strconvnew = _strconvnewPtr.asFunction<
      ffi.Pointer<strconv_t> Function(
          int, int, ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>)>();

  void strconvfree(
    ffi.Pointer<strconv_t> conv,
  ) {
    return _strconvfree(
      conv,
    );
  }

  late final _strconvfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<strconv_t>)>>(
          'strconvfree');
  late final _strconvfree =
      _strconvfreePtr.asFunction<void Function(ffi.Pointer<strconv_t>)>();

  /// rtk server functions
  int rtksvrinit(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrinit(
      svr,
    );
  }

  late final _rtksvrinitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrinit');
  late final _rtksvrinit =
      _rtksvrinitPtr.asFunction<int Function(ffi.Pointer<rtksvr_t>)>();

  void rtksvrfree(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrfree(
      svr,
    );
  }

  late final _rtksvrfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrfree');
  late final _rtksvrfree =
      _rtksvrfreePtr.asFunction<void Function(ffi.Pointer<rtksvr_t>)>();

  int rtksvrstart(
    ffi.Pointer<rtksvr_t> svr,
    int cycle,
    int buffsize,
    ffi.Pointer<ffi.Int> strs,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paths,
    ffi.Pointer<ffi.Int> formats,
    int navsel,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cmds,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cmds_periodic,
    ffi.Pointer<ffi.Pointer<ffi.Char>> rcvopts,
    int nmeacycle,
    int nmeareq,
    ffi.Pointer<ffi.Double> nmeapos,
    ffi.Pointer<prcopt_t> prcopt,
    ffi.Pointer<solopt_t> solopt,
    ffi.Pointer<stream_t> moni,
    ffi.Pointer<ffi.Char> errmsg,
  ) {
    return _rtksvrstart(
      svr,
      cycle,
      buffsize,
      strs,
      paths,
      formats,
      navsel,
      cmds,
      cmds_periodic,
      rcvopts,
      nmeacycle,
      nmeareq,
      nmeapos,
      prcopt,
      solopt,
      moni,
      errmsg,
    );
  }

  late final _rtksvrstartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtksvr_t>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<prcopt_t>,
              ffi.Pointer<solopt_t>,
              ffi.Pointer<stream_t>,
              ffi.Pointer<ffi.Char>)>>('rtksvrstart');
  late final _rtksvrstart = _rtksvrstartPtr.asFunction<
      int Function(
          ffi.Pointer<rtksvr_t>,
          int,
          int,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<prcopt_t>,
          ffi.Pointer<solopt_t>,
          ffi.Pointer<stream_t>,
          ffi.Pointer<ffi.Char>)>();

  void rtksvrstop(
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> cmds,
  ) {
    return _rtksvrstop(
      svr,
      cmds,
    );
  }

  late final _rtksvrstopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtksvr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('rtksvrstop');
  late final _rtksvrstop = _rtksvrstopPtr.asFunction<
      void Function(
          ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int rtksvropenstr(
    ffi.Pointer<rtksvr_t> svr,
    int index,
    int str,
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<solopt_t> solopt,
  ) {
    return _rtksvropenstr(
      svr,
      index,
      str,
      path,
      solopt,
    );
  }

  late final _rtksvropenstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<rtksvr_t>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<solopt_t>)>>('rtksvropenstr');
  late final _rtksvropenstr = _rtksvropenstrPtr.asFunction<
      int Function(ffi.Pointer<rtksvr_t>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<solopt_t>)>();

  void rtksvrclosestr(
    ffi.Pointer<rtksvr_t> svr,
    int index,
  ) {
    return _rtksvrclosestr(
      svr,
      index,
    );
  }

  late final _rtksvrclosestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtksvr_t>, ffi.Int)>>('rtksvrclosestr');
  late final _rtksvrclosestr = _rtksvrclosestrPtr
      .asFunction<void Function(ffi.Pointer<rtksvr_t>, int)>();

  void rtksvrlock(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrlock(
      svr,
    );
  }

  late final _rtksvrlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrlock');
  late final _rtksvrlock =
      _rtksvrlockPtr.asFunction<void Function(ffi.Pointer<rtksvr_t>)>();

  void rtksvrunlock(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrunlock(
      svr,
    );
  }

  late final _rtksvrunlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrunlock');
  late final _rtksvrunlock =
      _rtksvrunlockPtr.asFunction<void Function(ffi.Pointer<rtksvr_t>)>();

  int rtksvrostat(
    ffi.Pointer<rtksvr_t> svr,
    int type,
    ffi.Pointer<gtime_t> time,
    ffi.Pointer<ffi.Int> sat,
    ffi.Pointer<ffi.Double> az,
    ffi.Pointer<ffi.Double> el,
    ffi.Pointer<ffi.Pointer<ffi.Int>> snr,
    ffi.Pointer<ffi.Int> vsat,
  ) {
    return _rtksvrostat(
      svr,
      type,
      time,
      sat,
      az,
      el,
      snr,
      vsat,
    );
  }

  late final _rtksvrostatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<rtksvr_t>,
              ffi.Int,
              ffi.Pointer<gtime_t>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>>('rtksvrostat');
  late final _rtksvrostat = _rtksvrostatPtr.asFunction<
      int Function(
          ffi.Pointer<rtksvr_t>,
          int,
          ffi.Pointer<gtime_t>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Pointer<ffi.Int>>,
          ffi.Pointer<ffi.Int>)>();

  void rtksvrsstat(
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<ffi.Int> sstat,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _rtksvrsstat(
      svr,
      sstat,
      msg,
    );
  }

  late final _rtksvrsstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('rtksvrsstat');
  late final _rtksvrsstat = _rtksvrsstatPtr.asFunction<
      void Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>)>();

  int rtksvrmark(
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> comment,
  ) {
    return _rtksvrmark(
      svr,
      name,
      comment,
    );
  }

  late final _rtksvrmarkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('rtksvrmark');
  late final _rtksvrmark = _rtksvrmarkPtr.asFunction<
      int Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// downloader functions
  int dl_readurls(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> types,
    int ntype,
    ffi.Pointer<url_t> urls,
    int nmax,
  ) {
    return _dl_readurls(
      file,
      types,
      ntype,
      urls,
      nmax,
    );
  }

  late final _dl_readurlsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<url_t>,
              ffi.Int)>>('dl_readurls');
  late final _dl_readurls = _dl_readurlsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, ffi.Pointer<url_t>, int)>();

  int dl_readstas(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stas,
    int nmax,
  ) {
    return _dl_readstas(
      file,
      stas,
      nmax,
    );
  }

  late final _dl_readstasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('dl_readstas');
  late final _dl_readstas = _dl_readstasPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int dl_exec(
    gtime_t ts,
    gtime_t te,
    double ti,
    int seqnos,
    int seqnoe,
    ffi.Pointer<url_t> urls,
    int nurl,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stas,
    int nsta,
    ffi.Pointer<ffi.Char> dir,
    ffi.Pointer<ffi.Char> usr,
    ffi.Pointer<ffi.Char> pwd,
    ffi.Pointer<ffi.Char> proxy,
    int opts,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<FILE> fp,
  ) {
    return _dl_exec(
      ts,
      te,
      ti,
      seqnos,
      seqnoe,
      urls,
      nurl,
      stas,
      nsta,
      dir,
      usr,
      pwd,
      proxy,
      opts,
      msg,
      fp,
    );
  }

  late final _dl_execPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<url_t>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>)>>('dl_exec');
  late final _dl_exec = _dl_execPtr.asFunction<
      int Function(
          gtime_t,
          gtime_t,
          double,
          int,
          int,
          ffi.Pointer<url_t>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<FILE>)>();

  void dl_test(
    gtime_t ts,
    gtime_t te,
    double ti,
    ffi.Pointer<url_t> urls,
    int nurl,
    ffi.Pointer<ffi.Pointer<ffi.Char>> stas,
    int nsta,
    ffi.Pointer<ffi.Char> dir,
    int ncol,
    int datefmt,
    ffi.Pointer<FILE> fp,
  ) {
    return _dl_test(
      ts,
      te,
      ti,
      urls,
      nurl,
      stas,
      nsta,
      dir,
      ncol,
      datefmt,
      fp,
    );
  }

  late final _dl_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Pointer<url_t>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<FILE>)>>('dl_test');
  late final _dl_test = _dl_testPtr.asFunction<
      void Function(
          gtime_t,
          gtime_t,
          double,
          ffi.Pointer<url_t>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<FILE>)>();

  /// GIS data functions
  int gis_read(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<gis_t> gis,
    int layer,
  ) {
    return _gis_read(
      file,
      gis,
      layer,
    );
  }

  late final _gis_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<gis_t>, ffi.Int)>>('gis_read');
  late final _gis_read = _gis_readPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<gis_t>, int)>();

  void gis_free(
    ffi.Pointer<gis_t> gis,
  ) {
    return _gis_free(
      gis,
    );
  }

  late final _gis_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gis_t>)>>(
          'gis_free');
  late final _gis_free =
      _gis_freePtr.asFunction<void Function(ffi.Pointer<gis_t>)>();

  /// application defined functions
  int showmsg(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _showmsg(
      format,
    );
  }

  late final _showmsgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'showmsg');
  late final _showmsg =
      _showmsgPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void settspan(
    gtime_t ts,
    gtime_t te,
  ) {
    return _settspan(
      ts,
      te,
    );
  }

  late final _settspanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gtime_t, gtime_t)>>(
          'settspan');
  late final _settspan =
      _settspanPtr.asFunction<void Function(gtime_t, gtime_t)>();

  void settime(
    gtime_t time,
  ) {
    return _settime(
      time,
    );
  }

  late final _settimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gtime_t)>>('settime');
  late final _settime = _settimePtr.asFunction<void Function(gtime_t)>();

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'InitDartApiDL');
  late final _InitDartApiDL =
      _InitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void RegisterPrintCallbackBlocking(
    int send_port,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.IntPtr Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>
        callback,
  ) {
    return _RegisterPrintCallbackBlocking(
      send_port,
      callback,
    );
  }

  late final _RegisterPrintCallbackBlockingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_Port,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.IntPtr Function(ffi.Pointer<ffi.Char>, ffi.Size,
                          ffi.Int)>>)>>('RegisterPrintCallbackBlocking');
  late final _RegisterPrintCallbackBlocking =
      _RegisterPrintCallbackBlockingPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.IntPtr Function(
                          ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>)>();

  void RegisterPrintCallbackNonBlocking(
    int send_port,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>
        callback,
  ) {
    return _RegisterPrintCallbackNonBlocking(
      send_port,
      callback,
    );
  }

  late final _RegisterPrintCallbackNonBlockingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_Port,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size,
                          ffi.Int)>>)>>('RegisterPrintCallbackNonBlocking');
  late final _RegisterPrintCallbackNonBlocking =
      _RegisterPrintCallbackNonBlockingPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>)>();

  /// @brief Convert obs to string
  /// @param[in] obs - [obsd_t *] observation
  /// @param[out] strLen - [size_t *] output string length
  /// @return [char*] result string
  ffi.Pointer<ffi.Char> obs2str(
    ffi.Pointer<obsd_t> obs,
    ffi.Pointer<ffi.Size> strLen,
  ) {
    return _obs2str(
      obs,
      strLen,
    );
  }

  late final _obs2strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<obsd_t>, ffi.Pointer<ffi.Size>)>>('obs2str');
  late final _obs2str = _obs2strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<obsd_t>, ffi.Pointer<ffi.Size>)>();

  int obs2str2(
    ffi.Pointer<obsd_t> obs,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outStr,
  ) {
    return _obs2str2(
      obs,
      outStr,
    );
  }

  late final _obs2str2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<obsd_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('obs2str2');
  late final _obs2str2 = _obs2str2Ptr.asFunction<
      int Function(ffi.Pointer<obsd_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// @brief Create new raw controller
  /// @param[in] format - [int] format raw data
  /// @param[in, out] status - [uint32_t *] status code (0: memory allocation error, 1: success)
  /// @return [raw_t *] pointer to raw_t instance
  ffi.Pointer<raw_t> create_raw(
    int format,
    ffi.Pointer<ffi.Uint32> status,
  ) {
    return _create_raw(
      format,
      status,
    );
  }

  late final _create_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<raw_t> Function(
              ffi.Int, ffi.Pointer<ffi.Uint32>)>>('create_raw');
  late final _create_raw = _create_rawPtr
      .asFunction<ffi.Pointer<raw_t> Function(int, ffi.Pointer<ffi.Uint32>)>();

  int init_raw_2(
    ffi.Pointer<ffi.Pointer<raw_t>> raw,
    int format,
  ) {
    return _init_raw_2(
      raw,
      format,
    );
  }

  late final _init_raw_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<raw_t>>, ffi.Int)>>('init_raw_2');
  late final _init_raw_2 = _init_raw_2Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<raw_t>>, int)>();

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>>
      _flutter_print = _lookup<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size,
                      ffi.Int)>>>('flutter_print');

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>
      get flutter_print => _flutter_print.value;

  set flutter_print(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>
              value) =>
      _flutter_print.value = value;

  int flutter_printf(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _flutter_printf(
      format,
    );
  }

  late final _flutter_printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'flutter_printf');
  late final _flutter_printf =
      _flutter_printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int flutter_vprintf(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<va_list_tag> args,
  ) {
    return _flutter_vprintf(
      format,
      args,
    );
  }

  late final _flutter_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<va_list_tag>)>>('flutter_vprintf');
  late final _flutter_vprintf = _flutter_vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<va_list_tag>)>();

  int flutter_trace(
    int level,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _flutter_trace(
      level,
      format,
    );
  }

  late final _flutter_tracePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'flutter_trace');
  late final _flutter_trace =
      _flutter_tracePtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int flutter_vtrace(
    int level,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<va_list_tag> args,
  ) {
    return _flutter_vtrace(
      level,
      format,
      args,
    );
  }

  late final _flutter_vtracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<va_list_tag>)>>('flutter_vtrace');
  late final _flutter_vtrace = _flutter_vtracePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<va_list_tag>)>();

  void flutter_initialize(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>
        printCallback,
  ) {
    return _flutter_initialize(
      printCallback,
    );
  }

  late final _flutter_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size,
                          ffi.Int)>>)>>('flutter_initialize');
  late final _flutter_initialize = _flutter_initializePtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>)>();

  void vtracet(
    int level,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<va_list_tag> args,
  ) {
    return _vtracet(
      level,
      format,
      args,
    );
  }

  late final _vtracetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<va_list_tag>)>>('vtracet');
  late final _vtracet = _vtracetPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<va_list_tag>)>();

  void set_level_trace(
    int level,
  ) {
    return _set_level_trace(
      level,
    );
  }

  late final _set_level_tracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'set_level_trace');
  late final _set_level_trace =
      _set_level_tracePtr.asFunction<void Function(int)>();

  /// @brief print matrix
  /// print matrix to stdout
  /// args   : double *A        I   matrix A (n x m)
  /// int    n,m       I   number of rows and columns of A
  /// int    p,q       I   total columns, columns under decimal point
  /// (char **buffer    O   output string)
  /// @return [int] string length
  /// notes  : matirix stored by column-major order (fortran convention)
  int matsprint(
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buffer,
  ) {
    return _matsprint(
      A,
      n,
      m,
      p,
      q,
      buffer,
    );
  }

  late final _matsprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('matsprint');
  late final _matsprint = _matsprintPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, int, int, int, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<struct_sizes_t> getStructSizes() {
    return _getStructSizes();
  }

  late final _getStructSizesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<struct_sizes_t> Function()>>(
          'getStructSizes');
  late final _getStructSizes =
      _getStructSizesPtr.asFunction<ffi.Pointer<struct_sizes_t> Function()>();

  ffi.Pointer<FILE> openReadFile(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _openReadFile(
      filename,
    );
  }

  late final _openReadFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>)>>('openReadFile');
  late final _openReadFile = _openReadFilePtr
      .asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> openWriteFile(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _openWriteFile(
      filename,
    );
  }

  late final _openWriteFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>)>>('openWriteFile');
  late final _openWriteFile = _openWriteFilePtr
      .asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> openFile(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _openFile(
      filename,
      mode,
    );
  }

  late final _openFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('openFile');
  late final _openFile = _openFilePtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void native_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _native_free(
      ptr,
    );
  }

  late final _native_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'native_free');
  late final _native_free =
      _native_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<rnxopt_t> convbin_parse_options_cmd(
    int arg_count,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg_vars,
  ) {
    return _convbin_parse_options_cmd(
      arg_count,
      arg_vars,
    );
  }

  late final _convbin_parse_options_cmdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<rnxopt_t> Function(
                  ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'convbin_parse_options_cmd');
  late final _convbin_parse_options_cmd =
      _convbin_parse_options_cmdPtr.asFunction<
          ffi.Pointer<rnxopt_t> Function(
              int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int convbin_convert_cmd(
    int arg_count,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg_vars,
    ffi.Pointer<rnxopt_t> options,
    int trace,
  ) {
    return _convbin_convert_cmd(
      arg_count,
      arg_vars,
      options,
      trace,
    );
  }

  late final _convbin_convert_cmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<rnxopt_t>, ffi.Int)>>('convbin_convert_cmd');
  late final _convbin_convert_cmd = _convbin_convert_cmdPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<rnxopt_t>, int)>();

  ffi.Pointer<opt_t> rtkrcv_getRcvOptions(
    ffi.Pointer<ffi.Int> count,
  ) {
    return _rtkrcv_getRcvOptions(
      count,
    );
  }

  late final _rtkrcv_getRcvOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<opt_t> Function(
              ffi.Pointer<ffi.Int>)>>('rtkrcv_getRcvOptions');
  late final _rtkrcv_getRcvOptions = _rtkrcv_getRcvOptionsPtr
      .asFunction<ffi.Pointer<opt_t> Function(ffi.Pointer<ffi.Int>)>();

  void rtkrcv_printCmdHelpInfo() {
    return _rtkrcv_printCmdHelpInfo();
  }

  late final _rtkrcv_printCmdHelpInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'rtkrcv_printCmdHelpInfo');
  late final _rtkrcv_printCmdHelpInfo =
      _rtkrcv_printCmdHelpInfoPtr.asFunction<void Function()>();

  int rtkrcv_readcmd(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> cmd,
    int type,
  ) {
    return _rtkrcv_readcmd(
      file,
      cmd,
      type,
    );
  }

  late final _rtkrcv_readcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('rtkrcv_readcmd');
  late final _rtkrcv_readcmd = _rtkrcv_readcmdPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int rtkrcv_startsvr() {
    return _rtkrcv_startsvr();
  }

  late final _rtkrcv_startsvrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rtkrcv_startsvr');
  late final _rtkrcv_startsvr =
      _rtkrcv_startsvrPtr.asFunction<int Function()>();

  int run_rtkrcv_cmd(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
  ) {
    return _run_rtkrcv_cmd(
      argc,
      argv,
    );
  }

  late final _run_rtkrcv_cmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('run_rtkrcv_cmd');
  late final _run_rtkrcv_cmd = _run_rtkrcv_cmdPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

/// time struct
class gtime_t extends ffi.Struct {
  /// time (s) expressed by standard time_t
  @time_t()
  external int time;

  /// fraction of second under 1 s
  @ffi.Double()
  external double sec;
}

typedef time_t = ffi.Long;

/// observation data record
class obsd_t extends ffi.Struct {
  /// receiver sampling time (GPST)
  external gtime_t time;

  /// satellite/receiver number
  @ffi.Uint8()
  external int sat;

  @ffi.Uint8()
  external int rcv;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> SNR;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> LLI;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> code;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> L;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> P;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Float> D;

  /// time is valid (Valid GNSS fix) for time mark
  @ffi.Int()
  external int timevalid;

  /// time of event (GPST)
  external gtime_t eventime;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Lstd;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> Pstd;

  /// GLONASS frequency channel (0-13)
  @ffi.Uint8()
  external int freq;
}

/// observation data
class obs_t extends ffi.Struct {
  /// number of obervation data/allocated
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// epoch flag (0:ok,1:power failure,>1:event flag)
  @ffi.Int()
  external int flag;

  /// count of rcv event
  @ffi.Int()
  external int rcvcount;

  /// time mark count
  @ffi.Int()
  external int tmcount;

  /// observation data records
  external ffi.Pointer<obsd_t> data;
}

/// earth rotation parameter data type
class erpd_t extends ffi.Struct {
  /// mjd (days)
  @ffi.Double()
  external double mjd;

  /// pole offset (rad)
  @ffi.Double()
  external double xp;

  @ffi.Double()
  external double yp;

  /// pole offset rate (rad/day)
  @ffi.Double()
  external double xpr;

  @ffi.Double()
  external double ypr;

  /// ut1-utc (s)
  @ffi.Double()
  external double ut1_utc;

  /// length of day (s/day)
  @ffi.Double()
  external double lod;
}

/// earth rotation parameter type
class erp_t extends ffi.Struct {
  /// number and max number of data
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// earth rotation parameter data
  external ffi.Pointer<erpd_t> data;
}

/// antenna parameter type
class pcv_t extends ffi.Struct {
  /// satellite number (0:receiver)
  @ffi.Int()
  external int sat;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> type;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> code;

  /// valid time start and end
  external gtime_t ts;

  external gtime_t te;

  @ffi.Array.multi([5, 3])
  external ffi.Array<ffi.Array<ffi.Double>> off;

  @ffi.Array.multi([5, 19])
  external ffi.Array<ffi.Array<ffi.Double>> var1;
}

/// antenna parameters type
class pcvs_t extends ffi.Struct {
  /// number of data/allocated
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// antenna parameters data
  external ffi.Pointer<pcv_t> pcv;
}

/// almanac type
class alm_t extends ffi.Struct {
  /// satellite number
  @ffi.Int()
  external int sat;

  /// sv health (0:ok)
  @ffi.Int()
  external int svh;

  /// as and sv config
  @ffi.Int()
  external int svconf;

  /// GPS/QZS: gps week, GAL: galileo week
  @ffi.Int()
  external int week;

  /// Toa
  external gtime_t toa;

  /// SV orbit parameters
  @ffi.Double()
  external double A;

  @ffi.Double()
  external double e;

  @ffi.Double()
  external double i0;

  @ffi.Double()
  external double OMG0;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M0;

  @ffi.Double()
  external double OMGd;

  /// Toa (s) in week
  @ffi.Double()
  external double toas;

  /// SV clock parameters (af0,af1)
  @ffi.Double()
  external double f0;

  @ffi.Double()
  external double f1;
}

/// GPS/QZS/GAL broadcast ephemeris type
class eph_t extends ffi.Struct {
  /// satellite number
  @ffi.Int()
  external int sat;

  /// IODE,IODC
  @ffi.Int()
  external int iode;

  @ffi.Int()
  external int iodc;

  /// SV accuracy (URA index)
  @ffi.Int()
  external int sva;

  /// SV health (0:ok)
  @ffi.Int()
  external int svh;

  /// GPS/QZS: gps week, GAL: galileo week
  @ffi.Int()
  external int week;

  /// GPS/QZS: code on L2
  @ffi.Int()
  external int code;

  /// GPS/QZS: L2 P data flag
  @ffi.Int()
  external int flag;

  /// Toe,Toc,T_trans
  external gtime_t toe;

  external gtime_t toc;

  external gtime_t ttr;

  /// SV orbit parameters
  @ffi.Double()
  external double A;

  @ffi.Double()
  external double e;

  @ffi.Double()
  external double i0;

  @ffi.Double()
  external double OMG0;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M0;

  @ffi.Double()
  external double deln;

  @ffi.Double()
  external double OMGd;

  @ffi.Double()
  external double idot;

  @ffi.Double()
  external double crc;

  @ffi.Double()
  external double crs;

  @ffi.Double()
  external double cuc;

  @ffi.Double()
  external double cus;

  @ffi.Double()
  external double cic;

  @ffi.Double()
  external double cis;

  /// Toe (s) in week
  @ffi.Double()
  external double toes;

  /// fit interval (h)
  @ffi.Double()
  external double fit;

  /// SV clock parameters (af0,af1,af2)
  @ffi.Double()
  external double f0;

  @ffi.Double()
  external double f1;

  @ffi.Double()
  external double f2;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> tgd;

  /// Adot,ndot for CNAV
  @ffi.Double()
  external double Adot;

  @ffi.Double()
  external double ndot;
}

/// GLONASS broadcast ephemeris type
class geph_t extends ffi.Struct {
  /// satellite number
  @ffi.Int()
  external int sat;

  /// IODE (0-6 bit of tb field)
  @ffi.Int()
  external int iode;

  /// satellite frequency number
  @ffi.Int()
  external int frq;

  /// satellite health, accuracy, age of operation
  @ffi.Int()
  external int svh;

  @ffi.Int()
  external int sva;

  @ffi.Int()
  external int age;

  /// epoch of epherides (gpst)
  external gtime_t toe;

  /// message frame time (gpst)
  external gtime_t tof;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> vel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> acc;

  /// SV clock bias (s)/relative freq bias
  @ffi.Double()
  external double taun;

  @ffi.Double()
  external double gamn;

  /// delay between L1 and L2 (s)
  @ffi.Double()
  external double dtaun;
}

/// precise ephemeris type
class peph_t extends ffi.Struct {
  /// time (GPST)
  external gtime_t time;

  /// ephemeris index for multiple files
  @ffi.Int()
  external int index;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Double>> pos;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Float>> std;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Double>> vel;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Float>> vst;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Float>> cov;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Float>> vco;
}

/// precise clock type
class pclk_t extends ffi.Struct {
  /// time (GPST)
  external gtime_t time;

  /// clock index for multiple files
  @ffi.Int()
  external int index;

  @ffi.Array.multi([204, 1])
  external ffi.Array<ffi.Array<ffi.Double>> clk;

  @ffi.Array.multi([204, 1])
  external ffi.Array<ffi.Array<ffi.Float>> std;
}

/// SBAS ephemeris type
class seph_t extends ffi.Struct {
  /// satellite number
  @ffi.Int()
  external int sat;

  /// reference epoch time (GPST)
  external gtime_t t0;

  /// time of message frame (GPST)
  external gtime_t tof;

  /// SV accuracy (URA index)
  @ffi.Int()
  external int sva;

  /// SV health (0:ok)
  @ffi.Int()
  external int svh;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> vel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> acc;

  /// satellite clock-offset/drift (s,s/s)
  @ffi.Double()
  external double af0;

  @ffi.Double()
  external double af1;
}

/// NORAL TLE data type
class tled_t extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> alias;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> satno;

  /// classification
  @ffi.Char()
  external int satclass;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> desig;

  /// element set epoch (UTC)
  external gtime_t epoch;

  /// 1st derivative of mean motion
  @ffi.Double()
  external double ndot;

  /// 2st derivative of mean motion
  @ffi.Double()
  external double nddot;

  /// B* drag term
  @ffi.Double()
  external double bstar;

  /// element set type
  @ffi.Int()
  external int etype;

  /// element number
  @ffi.Int()
  external int eleno;

  /// orbit inclination (deg)
  @ffi.Double()
  external double inc;

  /// right ascension of ascending node (deg)
  @ffi.Double()
  external double OMG;

  /// eccentricity
  @ffi.Double()
  external double ecc;

  /// argument of perigee (deg)
  @ffi.Double()
  external double omg;

  /// mean anomaly (deg)
  @ffi.Double()
  external double M;

  /// mean motion (rev/day)
  @ffi.Double()
  external double n;

  /// revolution number at epoch
  @ffi.Int()
  external int rev;
}

/// NORAD TLE (two line element) type
class tle_t extends ffi.Struct {
  /// number/max number of two line element data
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// NORAD TLE data
  external ffi.Pointer<tled_t> data;
}

/// TEC grid type
class tec_t extends ffi.Struct {
  /// epoch time (GPST)
  external gtime_t time;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> ndata;

  /// earth radius (km)
  @ffi.Double()
  external double rb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> lats;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> lons;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> hgts;

  /// TEC grid data (tecu)
  external ffi.Pointer<ffi.Double> data;

  /// RMS values (tecu)
  external ffi.Pointer<ffi.Float> rms;
}

/// SBAS message type
class sbsmsg_t extends ffi.Struct {
  /// receiption time
  @ffi.Int()
  external int week;

  @ffi.Int()
  external int tow;

  /// SBAS satellite PRN,receiver number
  @ffi.Uint8()
  external int prn;

  @ffi.Uint8()
  external int rcv;

  @ffi.Array.multi([29])
  external ffi.Array<ffi.Uint8> msg;
}

/// SBAS messages type
class sbs_t extends ffi.Struct {
  /// number of SBAS messages/allocated
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// SBAS messages
  external ffi.Pointer<sbsmsg_t> msgs;
}

/// SBAS fast correction type
class sbsfcorr_t extends ffi.Struct {
  /// time of applicability (TOF)
  external gtime_t t0;

  /// pseudorange correction (PRC) (m)
  @ffi.Double()
  external double prc;

  /// range-rate correction (RRC) (m/s)
  @ffi.Double()
  external double rrc;

  /// range-rate correction delta-time (s)
  @ffi.Double()
  external double dt;

  /// IODF (issue of date fast corr)
  @ffi.Int()
  external int iodf;

  /// UDRE+1
  @ffi.Int16()
  external int udre;

  /// degradation factor indicator
  @ffi.Int16()
  external int ai;
}

/// SBAS long term satellite error correction type
class sbslcorr_t extends ffi.Struct {
  /// correction time
  external gtime_t t0;

  /// IODE (issue of date ephemeris)
  @ffi.Int()
  external int iode;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dpos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dvel;

  /// delta clock-offset/drift (s,s/s)
  @ffi.Double()
  external double daf0;

  @ffi.Double()
  external double daf1;
}

/// SBAS satellite correction type
class sbssatp_t extends ffi.Struct {
  /// satellite number
  @ffi.Int()
  external int sat;

  /// fast correction
  external sbsfcorr_t fcorr;

  /// long term correction
  external sbslcorr_t lcorr;
}

/// SBAS satellite corrections type
class sbssat_t extends ffi.Struct {
  /// IODP (issue of date mask)
  @ffi.Int()
  external int iodp;

  /// number of satellites
  @ffi.Int()
  external int nsat;

  /// system latency (s)
  @ffi.Int()
  external int tlat;

  @ffi.Array.multi([204])
  external ffi.Array<sbssatp_t> sat;
}

/// SBAS ionospheric correction type
class sbsigp_t extends ffi.Struct {
  /// correction time
  external gtime_t t0;

  /// latitude/longitude (deg)
  @ffi.Int16()
  external int lat;

  @ffi.Int16()
  external int lon;

  /// GIVI+1
  @ffi.Int16()
  external int give;

  /// vertical delay estimate (m)
  @ffi.Float()
  external double delay;
}

/// IGP band type
class sbsigpband_t extends ffi.Struct {
  /// longitude/latitude (deg)
  @ffi.Int16()
  external int x;

  /// latitudes/longitudes (deg)
  external ffi.Pointer<ffi.Int16> y;

  /// IGP mask start bit
  @ffi.Uint8()
  external int bits;

  /// IGP mask end bit
  @ffi.Uint8()
  external int bite;
}

/// SBAS ionospheric corrections type
class sbsion_t extends ffi.Struct {
  /// IODI (issue of date ionos corr)
  @ffi.Int()
  external int iodi;

  /// number of igps
  @ffi.Int()
  external int nigp;

  @ffi.Array.multi([201])
  external ffi.Array<sbsigp_t> igp;
}

/// DGPS/GNSS correction type
class dgps_t extends ffi.Struct {
  /// correction time
  external gtime_t t0;

  /// pseudorange correction (PRC) (m)
  @ffi.Double()
  external double prc;

  /// range rate correction (RRC) (m/s)
  @ffi.Double()
  external double rrc;

  /// issue of data (IOD)
  @ffi.Int()
  external int iod;

  /// UDRE
  @ffi.Double()
  external double udre;
}

/// SSR correction type
class ssr_t extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<gtime_t> t0;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> udi;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> iod;

  /// issue of data
  @ffi.Int()
  external int iode;

  /// issue of data crc for beidou/sbas
  @ffi.Int()
  external int iodcrc;

  /// URA indicator
  @ffi.Int()
  external int ura;

  /// sat ref datum (0:ITRF,1:regional)
  @ffi.Int()
  external int refd;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> deph;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> ddeph;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dclk;

  /// high-rate clock corection (m)
  @ffi.Double()
  external double hrclk;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Float> cbias;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Double> pbias;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Float> stdpb;

  /// yaw angle and yaw rate (deg,deg/s)
  @ffi.Double()
  external double yaw_ang;

  @ffi.Double()
  external double yaw_rate;

  /// update flag (0:no update,1:update)
  @ffi.Uint8()
  external int update;
}

/// navigation data type
class nav_t extends ffi.Struct {
  /// number of broadcast ephemeris
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// number of glonass ephemeris
  @ffi.Int()
  external int ng;

  @ffi.Int()
  external int ngmax;

  /// number of sbas ephemeris
  @ffi.Int()
  external int ns;

  @ffi.Int()
  external int nsmax;

  /// number of precise ephemeris
  @ffi.Int()
  external int ne;

  @ffi.Int()
  external int nemax;

  /// number of precise clock
  @ffi.Int()
  external int nc;

  @ffi.Int()
  external int ncmax;

  /// number of almanac data
  @ffi.Int()
  external int na;

  @ffi.Int()
  external int namax;

  /// number of tec grid data
  @ffi.Int()
  external int nt;

  @ffi.Int()
  external int ntmax;

  /// GPS/QZS/GAL/BDS/IRN ephemeris
  external ffi.Pointer<eph_t> eph;

  /// GLONASS ephemeris
  external ffi.Pointer<geph_t> geph;

  /// SBAS ephemeris
  external ffi.Pointer<seph_t> seph;

  /// precise ephemeris
  external ffi.Pointer<peph_t> peph;

  /// precise clock
  external ffi.Pointer<pclk_t> pclk;

  /// almanac data
  external ffi.Pointer<alm_t> alm;

  /// tec grid data
  external ffi.Pointer<tec_t> tec;

  /// earth rotation parameters
  external erp_t erp;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_gps;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_glo;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_gal;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_qzs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_cmp;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> utc_irn;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> utc_sbs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_gps;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> ion_gal;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_qzs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_cmp;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_irn;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int> glo_fcn;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Double>> cbias;

  @ffi.Array.multi([64, 2, 3])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Double>>> rbias;

  @ffi.Array.multi([204])
  external ffi.Array<pcv_t> pcvs;

  /// SBAS satellite corrections
  external sbssat_t sbssat;

  @ffi.Array.multi([11])
  external ffi.Array<sbsion_t> sbsion;

  @ffi.Array.multi([204])
  external ffi.Array<dgps_t> dgps;

  @ffi.Array.multi([204])
  external ffi.Array<ssr_t> ssr;
}

/// station parameter type
class sta_t extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> marker;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> antdes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> antsno;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> rectype;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> recver;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> recsno;

  /// antenna setup id
  @ffi.Int()
  external int antsetup;

  /// ITRF realization year
  @ffi.Int()
  external int itrf;

  /// antenna delta type (0:enu,1:xyz)
  @ffi.Int()
  external int deltype;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> del;

  /// antenna height (m)
  @ffi.Double()
  external double hgt;

  /// GLONASS code-phase alignment (0:no,1:yes)
  @ffi.Int()
  external int glo_cp_align;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> glo_cp_bias;
}

/// solution type
class sol_t extends ffi.Struct {
  /// time (GPST)
  external gtime_t time;

  /// time of event (GPST)
  external gtime_t eventime;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> rr;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Float> qr;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Float> qv;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> dtr;

  /// type (0:xyz-ecef,1:enu-baseline)
  @ffi.Uint8()
  external int type;

  /// solution status (SOLQ_???)
  @ffi.Uint8()
  external int stat;

  /// number of valid satellites
  @ffi.Uint8()
  external int ns;

  /// age of differential (s)
  @ffi.Float()
  external double age;

  /// AR ratio factor for valiation
  @ffi.Float()
  external double ratio;

  /// previous initial AR ratio factor for validation
  @ffi.Float()
  external double prev_ratio1;

  /// previous final AR ratio factor for validation
  @ffi.Float()
  external double prev_ratio2;

  /// AR ratio threshold for valiation
  @ffi.Float()
  external double thres;
}

/// solution buffer type
class solbuf_t extends ffi.Struct {
  /// number of solution/max number of buffer
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// cyclic buffer flag
  @ffi.Int()
  external int cyclic;

  /// start/end index
  @ffi.Int()
  external int start;

  @ffi.Int()
  external int end;

  /// current solution time
  external gtime_t time;

  /// solution data
  external ffi.Pointer<sol_t> data;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> rb;

  @ffi.Array.multi([8192])
  external ffi.Array<ffi.Uint8> buff;

  /// number of byte in message buffer
  @ffi.Int()
  external int nb;
}

/// solution status type
class solstat_t extends ffi.Struct {
  /// time (GPST)
  external gtime_t time;

  /// satellite number
  @ffi.Uint8()
  external int sat;

  /// frequency (1:L1,2:L2,...)
  @ffi.Uint8()
  external int frq;

  /// azimuth/elevation angle (rad)
  @ffi.Float()
  external double az;

  @ffi.Float()
  external double el;

  /// pseudorange residual (m)
  @ffi.Float()
  external double resp;

  /// carrier-phase residual (m)
  @ffi.Float()
  external double resc;

  /// flags: (vsat<<5)+(slip<<3)+fix
  @ffi.Uint8()
  external int flag;

  /// signal strength (*SNR_UNIT dBHz)
  @ffi.Uint16()
  external int snr;

  /// lock counter
  @ffi.Uint16()
  external int lock;

  /// outage counter
  @ffi.Uint16()
  external int outc;

  /// slip counter
  @ffi.Uint16()
  external int slipc;

  /// reject counter
  @ffi.Uint16()
  external int rejc;
}

/// solution status buffer type
class solstatbuf_t extends ffi.Struct {
  /// number of solution/max number of buffer
  @ffi.Int()
  external int n;

  @ffi.Int()
  external int nmax;

  /// solution status data
  external ffi.Pointer<solstat_t> data;
}

/// RTCM control struct type
class rtcm_t extends ffi.Struct {
  /// station id
  @ffi.Int()
  external int staid;

  /// station health
  @ffi.Int()
  external int stah;

  /// sequence number for rtcm 2 or iods msm
  @ffi.Int()
  external int seqno;

  /// output message type
  @ffi.Int()
  external int outtype;

  /// message time
  external gtime_t time;

  /// message start time
  external gtime_t time_s;

  /// observation data (uncorrected)
  external obs_t obs;

  /// satellite ephemerides
  external nav_t nav;

  /// station parameters
  external sta_t sta;

  /// output of dgps corrections
  external ffi.Pointer<dgps_t> dgps;

  @ffi.Array.multi([204])
  external ffi.Array<ssr_t> ssr;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> msg;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> msgtype;

  @ffi.Array.multi([7, 128])
  external ffi.Array<ffi.Array<ffi.Char>> msmtype;

  /// obs data complete flag (1:ok,0:not complete)
  @ffi.Int()
  external int obsflag;

  /// input ephemeris satellite number
  @ffi.Int()
  external int ephsat;

  /// input ephemeris set (0-1)
  @ffi.Int()
  external int ephset;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<ffi.Double>> cp;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<ffi.Uint16>> lock;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<ffi.Uint16>> loss;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<gtime_t>> lltime;

  /// number of bytes in message buffer
  @ffi.Int()
  external int nbyte;

  /// number of bits in word buffer
  @ffi.Int()
  external int nbit;

  /// message length (bytes)
  @ffi.Int()
  external int len;

  @ffi.Array.multi([1200])
  external ffi.Array<ffi.Uint8> buff;

  /// word buffer for rtcm 2
  @ffi.Uint32()
  external int word;

  @ffi.Array.multi([100])
  external ffi.Array<ffi.Uint32> nmsg2;

  @ffi.Array.multi([400])
  external ffi.Array<ffi.Uint32> nmsg3;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> opt;
}

/// RINEX control struct type
class rnxctr_t extends ffi.Struct {
  /// message time
  external gtime_t time;

  /// RINEX version
  @ffi.Double()
  external double ver;

  /// RINEX file type ('O','N',...)
  @ffi.Char()
  external int type;

  /// navigation system
  @ffi.Int()
  external int sys;

  /// time system
  @ffi.Int()
  external int tsys;

  @ffi.Array.multi([8, 64, 4])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Char>>> tobs;

  /// observation data
  external obs_t obs;

  /// navigation data
  external nav_t nav;

  /// station info
  external sta_t sta;

  /// input ephemeris satellite number
  @ffi.Int()
  external int ephsat;

  /// input ephemeris set (0-1)
  @ffi.Int()
  external int ephset;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> opt;
}

/// download URL type
class url_t extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> type;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> path;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> dir;

  /// time interval (s)
  @ffi.Double()
  external double tint;
}

/// option type
class opt_t extends ffi.Struct {
  /// option name
  external ffi.Pointer<ffi.Char> name;

  /// option format (0:int,1:double,2:string,3:enum)
  @ffi.Int()
  external int format;

  /// pointer to option variable
  external ffi.Pointer<ffi.Void> var1;

  /// option comment/enum labels/unit
  external ffi.Pointer<ffi.Char> comment;
}

/// SNR mask type
class snrmask_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> ena;

  @ffi.Array.multi([5, 9])
  external ffi.Array<ffi.Array<ffi.Double>> mask;
}

/// processing options type
class prcopt_t extends ffi.Struct {
  /// positioning mode (PMODE_???)
  @ffi.Int()
  external int mode;

  /// solution type (0:forward,1:backward,2:combined)
  @ffi.Int()
  external int soltype;

  /// number of frequencies (1:L1,2:L1+L2,3:L1+L2+L5)
  @ffi.Int()
  external int nf;

  /// navigation system
  @ffi.Int()
  external int navsys;

  /// elevation mask angle (rad)
  @ffi.Double()
  external double elmin;

  /// SNR mask
  external snrmask_t snrmask;

  /// satellite ephemeris/clock (EPHOPT_???)
  @ffi.Int()
  external int sateph;

  /// AR mode (0:off,1:continuous,2:instantaneous,3:fix and hold,4:ppp-ar)
  @ffi.Int()
  external int modear;

  /// GLONASS AR mode (0:off,1:on,2:auto cal,3:ext cal)
  @ffi.Int()
  external int glomodear;

  /// GPS AR mode, debug/learning only (0:off,1:on)
  @ffi.Int()
  external int gpsmodear;

  /// BeiDou AR mode (0:off,1:on)
  @ffi.Int()
  external int bdsmodear;

  /// AR filtering to reject bad sats (0:off,1:on)
  @ffi.Int()
  external int arfilter;

  /// obs outage count to reset bias
  @ffi.Int()
  external int maxout;

  /// min lock count to fix ambiguity
  @ffi.Int()
  external int minlock;

  /// min sats to fix integer ambiguities
  @ffi.Int()
  external int minfixsats;

  /// min sats to hold integer ambiguities
  @ffi.Int()
  external int minholdsats;

  /// min sats to drop sats in AR
  @ffi.Int()
  external int mindropsats;

  /// min fix count to hold ambiguity
  @ffi.Int()
  external int minfix;

  /// max iteration to resolve ambiguity
  @ffi.Int()
  external int armaxiter;

  /// ionosphere option (IONOOPT_???)
  @ffi.Int()
  external int ionoopt;

  /// troposphere option (TROPOPT_???)
  @ffi.Int()
  external int tropopt;

  /// dynamics model (0:none,1:velociy,2:accel)
  @ffi.Int()
  external int dynamics;

  /// earth tide correction (0:off,1:solid,2:solid+otl+pole)
  @ffi.Int()
  external int tidecorr;

  /// number of filter iteration
  @ffi.Int()
  external int niter;

  /// code smoothing window size (0:none)
  @ffi.Int()
  external int codesmooth;

  /// interpolate reference obs (for post mission)
  @ffi.Int()
  external int intpref;

  /// SBAS correction options
  @ffi.Int()
  external int sbascorr;

  /// SBAS satellite selection (0:all)
  @ffi.Int()
  external int sbassatsel;

  /// rover position for fixed mode
  @ffi.Int()
  external int rovpos;

  /// base position for relative mode (0:pos in prcopt,  1:average of single pos, 2:read from file, 3:rinex header, 4:rtcm pos)
  @ffi.Int()
  external int refpos;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> eratio;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> err;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> std;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> prn;

  /// satellite clock stability (sec/sec)
  @ffi.Double()
  external double sclkstab;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> thresar;

  /// elevation mask of AR for rising satellite (deg)
  @ffi.Double()
  external double elmaskar;

  /// elevation mask to hold ambiguity (deg)
  @ffi.Double()
  external double elmaskhold;

  /// slip threshold of geometry-free phase (m)
  @ffi.Double()
  external double thresslip;

  /// slip threshold of doppler (m)
  @ffi.Double()
  external double thresdop;

  /// variance for fix-and-hold psuedo measurements (cycle^2)
  @ffi.Double()
  external double varholdamb;

  /// gain used for GLO and SBAS sats to adjust ambiguity
  @ffi.Double()
  external double gainholdamb;

  /// max difference of time (sec)
  @ffi.Double()
  external double maxtdiff;

  /// reject threshold of innovation (m)
  @ffi.Double()
  external double maxinno;

  /// reject threshold of gdop
  @ffi.Double()
  external double maxgdop;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> baseline;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> ru;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> rb;

  @ffi.Array.multi([2, 64])
  external ffi.Array<ffi.Array<ffi.Char>> anttype;

  @ffi.Array.multi([2, 3])
  external ffi.Array<ffi.Array<ffi.Double>> antdel;

  @ffi.Array.multi([2])
  external ffi.Array<pcv_t> pcvr;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Uint8> exsats;

  /// max averaging epoches
  @ffi.Int()
  external int maxaveep;

  /// initialize by restart
  @ffi.Int()
  external int initrst;

  /// output single by dgps/float/fix/ppp outage
  @ffi.Int()
  external int outsingle;

  @ffi.Array.multi([2, 256])
  external ffi.Array<ffi.Array<ffi.Char>> rnxopt;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int> posopt;

  /// solution sync mode (0:off,1:on)
  @ffi.Int()
  external int syncsol;

  @ffi.Array.multi([2, 66])
  external ffi.Array<ffi.Array<ffi.Double>> odisp;

  /// disable L2-AR
  @ffi.Int()
  external int freqopt;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> pppopt;
}

/// solution options type
class solopt_t extends ffi.Struct {
  /// solution format (SOLF_???)
  @ffi.Int()
  external int posf;

  /// time system (TIMES_???)
  @ffi.Int()
  external int times;

  /// time format (0:sssss.s,1:yyyy/mm/dd hh:mm:ss.s)
  @ffi.Int()
  external int timef;

  /// time digits under decimal point
  @ffi.Int()
  external int timeu;

  /// latitude/longitude format (0:ddd.ddd,1:ddd mm ss)
  @ffi.Int()
  external int degf;

  /// output header (0:no,1:yes)
  @ffi.Int()
  external int outhead;

  /// output processing options (0:no,1:yes)
  @ffi.Int()
  external int outopt;

  /// output velocity options (0:no,1:yes)
  @ffi.Int()
  external int outvel;

  /// datum (0:WGS84,1:Tokyo)
  @ffi.Int()
  external int datum;

  /// height (0:ellipsoidal,1:geodetic)
  @ffi.Int()
  external int height;

  /// geoid model (0:EGM96,1:JGD2000)
  @ffi.Int()
  external int geoid;

  /// solution of static mode (0:all,1:single)
  @ffi.Int()
  external int solstatic;

  /// solution statistics level (0:off,1:states,2:residuals)
  @ffi.Int()
  external int sstat;

  /// debug trace level (0:off,1-5:debug)
  @ffi.Int()
  external int trace;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> nmeaintv;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> sep;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> prog;

  /// max std-dev for solution output (m) (0:all)
  @ffi.Double()
  external double maxsolstd;
}

/// file options type
class filopt_t extends ffi.Struct {
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> satantp;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> rcvantp;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> stapos;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> geoid;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> iono;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> dcb;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> eop;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> blq;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> tempdir;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> geexe;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> solstat;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> trace;
}

/// RINEX options type
class rnxopt_t extends ffi.Struct {
  /// time start/end
  external gtime_t ts;

  external gtime_t te;

  /// time interval (s)
  @ffi.Double()
  external double tint;

  /// time tolerance (s)
  @ffi.Double()
  external double ttol;

  /// time unit for multiple-session (s)
  @ffi.Double()
  external double tunit;

  /// RINEX version (x100)
  @ffi.Int()
  external int rnxver;

  /// navigation system
  @ffi.Int()
  external int navsys;

  /// observation type
  @ffi.Int()
  external int obstype;

  /// frequency type
  @ffi.Int()
  external int freqtype;

  @ffi.Array.multi([7, 64])
  external ffi.Array<ffi.Array<ffi.Char>> mask;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> staid;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> prog;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> runby;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> marker;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> markerno;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> markertype;

  @ffi.Array.multi([2, 32])
  external ffi.Array<ffi.Array<ffi.Char>> name;

  @ffi.Array.multi([3, 32])
  external ffi.Array<ffi.Array<ffi.Char>> rec;

  @ffi.Array.multi([3, 32])
  external ffi.Array<ffi.Array<ffi.Char>> ant;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> apppos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> antdel;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> glo_cp_bias;

  @ffi.Array.multi([100, 64])
  external ffi.Array<ffi.Array<ffi.Char>> comment;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> rcvopt;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Uint8> exsats;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int> glofcn;

  /// output iono correction
  @ffi.Int()
  external int outiono;

  /// output time system correction
  @ffi.Int()
  external int outtime;

  /// output leap seconds
  @ffi.Int()
  external int outleaps;

  /// auto approx position
  @ffi.Int()
  external int autopos;

  /// phase shift correction
  @ffi.Int()
  external int phshift;

  /// half cycle correction
  @ffi.Int()
  external int halfcyc;

  /// separated nav files
  @ffi.Int()
  external int sep_nav;

  /// first obs time
  external gtime_t tstart;

  /// last obs time
  external gtime_t tend;

  /// approx log start time for rtcm
  external gtime_t trtcm;

  @ffi.Array.multi([7, 64, 4])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Char>>> tobs;

  @ffi.Array.multi([7, 64])
  external ffi.Array<ffi.Array<ffi.Double>> shift;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Int> nobs;
}

/// satellite status type
class ssat_t extends ffi.Struct {
  /// navigation system
  @ffi.Uint8()
  external int sys;

  /// valid satellite flag single
  @ffi.Uint8()
  external int vs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> azel;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> resp;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> resc;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> icbias;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> vsat;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint16> snr_rover;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint16> snr_base;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> fix;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> slip;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint8> half;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Int> lock;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> outc;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> slipc;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Uint32> rejc;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> gf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> mw;

  /// phase windup (cycle)
  @ffi.Double()
  external double phw;

  @ffi.Array.multi([2, 5])
  external ffi.Array<ffi.Array<gtime_t>> pt;

  @ffi.Array.multi([2, 5])
  external ffi.Array<ffi.Array<ffi.Double>> ph;
}

/// ambiguity control type
class ambc_t extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<gtime_t> epoch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> n;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> LC;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> LCv;

  /// fix count
  @ffi.Int()
  external int fixcnt;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Char> flags;
}

/// RTK control/result type
class rtk_t extends ffi.Struct {
  /// RTK solution
  external sol_t sol;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> rb;

  /// number of float states/fixed states
  @ffi.Int()
  external int nx;

  @ffi.Int()
  external int na;

  /// time difference between current and previous (s)
  @ffi.Double()
  external double tt;

  /// float states and their covariance
  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Double> P;

  /// fixed states and their covariance
  external ffi.Pointer<ffi.Double> xa;

  external ffi.Pointer<ffi.Double> Pa;

  /// number of continuous fixes of ambiguity
  @ffi.Int()
  external int nfix;

  /// index of next satellite to be excluded for partial ambiguity resolution
  @ffi.Int()
  external int excsat;

  /// number of ambiguities used for AR last epoch
  @ffi.Int()
  external int nb_ar;

  /// set if fix-and-hold has occurred at least once
  @ffi.Char()
  external int holdamb;

  @ffi.Array.multi([204])
  external ffi.Array<ambc_t> ambc;

  @ffi.Array.multi([204])
  external ffi.Array<ssat_t> ssat;

  /// bytes in error message buffer
  @ffi.Int()
  external int neb;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> errbuf;

  /// processing options
  external prcopt_t opt;

  /// initial positioning mode
  @ffi.Int()
  external int initial_mode;
}

/// receiver raw data control type
class raw_t extends ffi.Struct {
  /// message time
  external gtime_t time;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<gtime_t>> tobs;

  /// observation data
  external obs_t obs;

  /// observation data buffer
  external obs_t obuf;

  /// satellite ephemerides
  external nav_t nav;

  /// station parameters
  external sta_t sta;

  /// update satelle of ephemeris (0:no satellite)
  @ffi.Int()
  external int ephsat;

  /// update set of ephemeris (0-1)
  @ffi.Int()
  external int ephset;

  /// SBAS message
  external sbsmsg_t sbsmsg;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> msgtype;

  @ffi.Array.multi([204, 380])
  external ffi.Array<ffi.Array<ffi.Uint8>> subfrm;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<ffi.Double>> lockt;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<ffi.UnsignedChar>> lockflag;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> icpp;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> off;

  @ffi.Double()
  external double icpc;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> prCA;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> dpCA;

  @ffi.Array.multi([204, 8])
  external ffi.Array<ffi.Array<ffi.Uint8>> halfc;

  @ffi.Array.multi([96])
  external ffi.Array<ffi.Char> freqn;

  /// number of bytes in message buffer
  @ffi.Int32()
  external int nbyte;

  /// message length (bytes)
  @ffi.Int32()
  external int len;

  /// issue of data
  @ffi.Int32()
  external int iod;

  /// time of day (ms)
  @ffi.Int32()
  external int tod;

  /// time base (0:gpst,1:utc(usno),2:glonass,3:utc(su)
  @ffi.Int32()
  external int tbase;

  /// general purpose flag
  @ffi.Int32()
  external int flag;

  /// output message type
  @ffi.Int32()
  external int outtype;

  @ffi.Array.multi([16384])
  external ffi.Array<ffi.Uint8> buff;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> opt;

  /// receiver stream format
  @ffi.Int32()
  external int format;

  /// receiver type within format
  @ffi.Int32()
  external int rcvtype;

  /// receiver dependent data
  external ffi.Pointer<ffi.Void> rcv_data;
}

/// stream type
class stream_t extends ffi.Struct {
  /// type (STR_???)
  @ffi.Int()
  external int type;

  /// mode (STR_MODE_?)
  @ffi.Int()
  external int mode;

  /// state (-1:error,0:close,1:open)
  @ffi.Int()
  external int state;

  /// input bytes/rate
  @ffi.Uint32()
  external int inb;

  @ffi.Uint32()
  external int inr;

  /// output bytes/rate
  @ffi.Uint32()
  external int outb;

  @ffi.Uint32()
  external int outr;

  /// input tick tick
  @ffi.Uint32()
  external int tick_i;

  /// output tick
  @ffi.Uint32()
  external int tick_o;

  /// active tick
  @ffi.Uint32()
  external int tact;

  /// input/output bytes at tick
  @ffi.Uint32()
  external int inbt;

  @ffi.Uint32()
  external int outbt;

  /// lock flag
  external pthread_mutex_t lock;

  /// type dependent port control struct
  external ffi.Pointer<ffi.Void> port;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> path;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> msg;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_internal_list __list;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

/// stream converter type
class strconv_t extends ffi.Struct {
  /// input and output stream type
  @ffi.Int()
  external int itype;

  @ffi.Int()
  external int otype;

  /// number of output messages
  @ffi.Int()
  external int nmsg;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int> msgs;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Double> tint;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint32> tick;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int> ephsat;

  /// station info selection (0:remote,1:local)
  @ffi.Int()
  external int stasel;

  /// rtcm input data buffer
  external rtcm_t rtcm;

  /// raw  input data buffer
  external raw_t raw;

  /// rtcm output data buffer
  external rtcm_t out;
}

/// stream server type
class strsvr_t extends ffi.Struct {
  /// server state (0:stop,1:running)
  @ffi.Int()
  external int state;

  /// server cycle (ms)
  @ffi.Int()
  external int cycle;

  /// input/monitor buffer size (bytes)
  @ffi.Int()
  external int buffsize;

  /// NMEA request cycle (ms) (0:no)
  @ffi.Int()
  external int nmeacycle;

  /// relay back of output streams (0:no)
  @ffi.Int()
  external int relayback;

  /// number of streams (1 input + (nstr-1) outputs
  @ffi.Int()
  external int nstr;

  /// data length in peek buffer (bytes)
  @ffi.Int()
  external int npb;

  @ffi.Array.multi([16, 4096])
  external ffi.Array<ffi.Array<ffi.Char>> cmds_periodic;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> nmeapos;

  /// input buffers
  external ffi.Pointer<ffi.Uint8> buff;

  /// peek buffer
  external ffi.Pointer<ffi.Uint8> pbuf;

  /// start tick
  @ffi.Uint32()
  external int tick;

  @ffi.Array.multi([16])
  external ffi.Array<stream_t> stream;

  @ffi.Array.multi([16])
  external ffi.Array<stream_t> strlog;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<strconv_t>> conv;

  /// server thread
  @pthread_t()
  external int thread;

  /// lock flag
  external pthread_mutex_t lock;
}

typedef pthread_t = ffi.UnsignedLong;

/// RTK server type
class rtksvr_t extends ffi.Struct {
  /// server state (0:stop,1:running)
  @ffi.Int()
  external int state;

  /// processing cycle (ms)
  @ffi.Int()
  external int cycle;

  /// NMEA request cycle (ms) (0:no req)
  @ffi.Int()
  external int nmeacycle;

  /// NMEA request (0:no,1:nmeapos,2:single sol)
  @ffi.Int()
  external int nmeareq;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> nmeapos;

  /// input buffer size (bytes)
  @ffi.Int()
  external int buffsize;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> format;

  @ffi.Array.multi([2])
  external ffi.Array<solopt_t> solopt;

  /// ephemeris select (0:all,1:rover,2:base,3:corr)
  @ffi.Int()
  external int navsel;

  /// number of sbas message
  @ffi.Int()
  external int nsbs;

  /// number of solution buffer
  @ffi.Int()
  external int nsol;

  /// RTK control/result struct
  external rtk_t rtk;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> nb;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> nsb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int> npb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> buff;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> sbuf;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> pbuf;

  @ffi.Array.multi([256])
  external ffi.Array<sol_t> solbuf;

  @ffi.Array.multi([3, 10])
  external ffi.Array<ffi.Array<ffi.Uint32>> nmsg;

  @ffi.Array.multi([3])
  external ffi.Array<raw_t> raw;

  @ffi.Array.multi([3])
  external ffi.Array<rtcm_t> rtcm;

  @ffi.Array.multi([3])
  external ffi.Array<gtime_t> ftime;

  @ffi.Array.multi([3, 1024])
  external ffi.Array<ffi.Array<ffi.Char>> files;

  @ffi.Array.multi([3, 128])
  external ffi.Array<ffi.Array<obs_t>> obs;

  /// navigation data
  external nav_t nav;

  @ffi.Array.multi([32])
  external ffi.Array<sbsmsg_t> sbsmsg;

  @ffi.Array.multi([8])
  external ffi.Array<stream_t> stream;

  /// monitor stream
  external ffi.Pointer<stream_t> moni;

  /// start tick
  @ffi.Uint32()
  external int tick;

  /// server thread
  @pthread_t()
  external int thread;

  /// CPU time (ms) for a processing cycle
  @ffi.Int()
  external int cputime;

  /// missing observation data count
  @ffi.Int()
  external int prcout;

  /// number of averaging base pos
  @ffi.Int()
  external int nave;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> rb_ave;

  @ffi.Array.multi([3, 4096])
  external ffi.Array<ffi.Array<ffi.Char>> cmds_periodic;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> cmd_reset;

  /// baseline length to reset (km)
  @ffi.Double()
  external double bl_reset;

  /// lock flag
  external pthread_mutex_t lock;
}

/// GIS data point type
class gis_pnt_t extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;
}

/// GIS data polyline type
class gis_poly_t extends ffi.Struct {
  /// number of points
  @ffi.Int()
  external int npnt;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> bound;

  /// position data (3 x npnt)
  external ffi.Pointer<ffi.Double> pos;
}

/// GIS data polygon type
class gis_polygon_t extends ffi.Struct {
  /// number of points
  @ffi.Int()
  external int npnt;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> bound;

  /// position data (3 x npnt)
  external ffi.Pointer<ffi.Double> pos;
}

/// GIS data list type
class gisd_tag extends ffi.Struct {
  /// data type (1:point,2:polyline,3:polygon)
  @ffi.Int()
  external int type;

  /// data body
  external ffi.Pointer<ffi.Void> data;

  /// pointer to next
  external ffi.Pointer<gisd_tag> next;
}

/// GIS type
class gis_t extends ffi.Struct {
  @ffi.Array.multi([32, 256])
  external ffi.Array<ffi.Array<ffi.Char>> name;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int> flag;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Pointer<gisd_t>> data;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> bound;
}

/// GIS data list type
typedef gisd_t = gisd_tag;
typedef FILE = _IO_FILE;

class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @ffi.Long()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Long()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

class _IO_marker extends ffi.Opaque {}

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

typedef fatalfunc_t
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>;

class struct_sizes_t extends ffi.Struct {
  @ffi.Size()
  external int gtime_t;

  @ffi.Size()
  external int obsd_t;

  @ffi.Size()
  external int obs_t;

  @ffi.Size()
  external int erpd_t;

  @ffi.Size()
  external int erp_t;

  @ffi.Size()
  external int pcv_t;

  @ffi.Size()
  external int pcvs_t;

  @ffi.Size()
  external int alm_t;

  @ffi.Size()
  external int eph_t;

  @ffi.Size()
  external int geph_t;

  @ffi.Size()
  external int peph_t;

  @ffi.Size()
  external int pclk_t;

  @ffi.Size()
  external int seph_t;

  @ffi.Size()
  external int tled_t;

  @ffi.Size()
  external int tle_t;

  @ffi.Size()
  external int tec_t;

  @ffi.Size()
  external int sbsmsg_t;

  @ffi.Size()
  external int sbs_t;

  @ffi.Size()
  external int sbsfcorr_t;

  @ffi.Size()
  external int sbslcorr_t;

  @ffi.Size()
  external int sbssatp_t;

  @ffi.Size()
  external int sbssat_t;

  @ffi.Size()
  external int sbsigp_t;

  @ffi.Size()
  external int sbsigpband_t;

  @ffi.Size()
  external int sbsion_t;

  @ffi.Size()
  external int dgps_t;

  @ffi.Size()
  external int ssr_t;

  @ffi.Size()
  external int nav_t;

  @ffi.Size()
  external int sta_t;

  @ffi.Size()
  external int sol_t;

  @ffi.Size()
  external int solbuf_t;

  @ffi.Size()
  external int solstat_t;

  @ffi.Size()
  external int solstatbuf_t;

  @ffi.Size()
  external int rtcm_t;

  @ffi.Size()
  external int rnxctr_t;

  @ffi.Size()
  external int url_t;

  @ffi.Size()
  external int opt_t;

  @ffi.Size()
  external int snrmask_t;

  @ffi.Size()
  external int prcopt_t;

  @ffi.Size()
  external int solopt_t;

  @ffi.Size()
  external int filopt_t;

  @ffi.Size()
  external int rnxopt_t;

  @ffi.Size()
  external int ssat_t;

  @ffi.Size()
  external int ambc_t;

  @ffi.Size()
  external int rtk_t;

  @ffi.Size()
  external int raw_t;

  @ffi.Size()
  external int stream_t;

  @ffi.Size()
  external int strconv_t;

  @ffi.Size()
  external int strsvr_t;

  @ffi.Size()
  external int rtksvr_t;

  @ffi.Size()
  external int gis_pnt_t;

  @ffi.Size()
  external int gis_poly_t;

  @ffi.Size()
  external int gis_polygon_t;

  @ffi.Size()
  external int gisd_t;

  @ffi.Size()
  external int gis_t;
}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;

class va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

const String VER_RTKLIB = 'demo5';

const String PATCH_LEVEL = 'b34f.1';

const String COPYRIGHT_RTKLIB =
    'Copyright (C) 2007-2020 T.Takasu\nAll rights reserved.';

const double PI = 3.141592653589793;

const double D2R = 0.017453292519943295;

const double R2D = 57.29577951308232;

const double CLIGHT = 299792458.0;

const double SC2RAD = 3.1415926535898;

const double AU = 149597870691.0;

const double AS2R = 0.00000484813681109536;

const double OMGE = 0.000072921151467;

const double RE_WGS84 = 6378137.0;

const double FE_WGS84 = 0.0033528106647474805;

const double HION = 350000.0;

const int MAXFREQ = 6;

const double FREQL1 = 1575420000.0;

const double FREQL2 = 1227600000.0;

const double FREQE5b = 1207140000.0;

const double FREQL5 = 1176450000.0;

const double FREQL6 = 1278750000.0;

const double FREQE5ab = 1191795000.0;

const double FREQs = 2492028000.0;

const double FREQ1_GLO = 1602000000.0;

const double DFRQ1_GLO = 562500.0;

const double FREQ2_GLO = 1246000000.0;

const double DFRQ2_GLO = 437500.0;

const double FREQ3_GLO = 1202025000.0;

const double FREQ1a_GLO = 1600995000.0;

const double FREQ2a_GLO = 1248060000.0;

const double FREQ1_CMP = 1561098000.0;

const double FREQ2_CMP = 1207140000.0;

const double FREQ3_CMP = 1268520000.0;

const double EFACT_GPS = 1.0;

const double EFACT_GLO = 1.5;

const double EFACT_GAL = 1.0;

const double EFACT_QZS = 1.0;

const double EFACT_CMP = 1.0;

const double EFACT_IRN = 1.5;

const double EFACT_SBS = 3.0;

const int SYS_NONE = 0;

const int SYS_GPS = 1;

const int SYS_SBS = 2;

const int SYS_GLO = 4;

const int SYS_GAL = 8;

const int SYS_QZS = 16;

const int SYS_CMP = 32;

const int SYS_IRN = 64;

const int SYS_LEO = 128;

const int SYS_ALL = 255;

const int TSYS_GPS = 0;

const int TSYS_UTC = 1;

const int TSYS_GLO = 2;

const int TSYS_GAL = 3;

const int TSYS_QZS = 4;

const int TSYS_CMP = 5;

const int TSYS_IRN = 6;

const int NFREQGLO = 2;

const double SNR_UNIT = 0.001;

const int MINPRNGPS = 1;

const int MAXPRNGPS = 32;

const int NSATGPS = 32;

const int NSYSGPS = 1;

const int MINPRNGLO = 1;

const int MAXPRNGLO = 27;

const int NSATGLO = 27;

const int NSYSGLO = 1;

const int MINPRNGAL = 1;

const int MAXPRNGAL = 36;

const int NSATGAL = 36;

const int NSYSGAL = 1;

const int MINPRNQZS = 193;

const int MAXPRNQZS = 202;

const int MINPRNQZS_S = 183;

const int MAXPRNQZS_S = 191;

const int NSATQZS = 10;

const int NSYSQZS = 1;

const int MINPRNCMP = 1;

const int MAXPRNCMP = 46;

const int NSATCMP = 46;

const int NSYSCMP = 1;

const int MINPRNIRN = 1;

const int MAXPRNIRN = 14;

const int NSATIRN = 14;

const int NSYSIRN = 1;

const int MINPRNLEO = 0;

const int MAXPRNLEO = 0;

const int NSATLEO = 0;

const int NSYSLEO = 0;

const int NSYS = 6;

const int MINPRNSBS = 120;

const int MAXPRNSBS = 158;

const int NSATSBS = 39;

const int MAXSAT = 204;

const int MAXSTA = 255;

const int MAXOBS = 96;

const int MAXRCV = 64;

const int MAXOBSTYPE = 64;

const double DTTOL = 0.025;

const double MAXDTOE = 7200.0;

const double MAXDTOE_QZS = 7200.0;

const double MAXDTOE_GAL = 14400.0;

const double MAXDTOE_CMP = 21600.0;

const double MAXDTOE_GLO = 1800.0;

const double MAXDTOE_IRN = 7200.0;

const double MAXDTOE_SBS = 360.0;

const double MAXDTOE_S = 86400.0;

const double MAXGDOP = 300.0;

const double INT_SWAP_TRAC = 86400.0;

const double INT_SWAP_STAT = 86400.0;

const int MAXEXFILE = 1024;

const double MAXSBSAGEF = 30.0;

const double MAXSBSAGEL = 1800.0;

const int MAXSBSURA = 8;

const int MAXBAND = 10;

const int MAXNIGP = 201;

const int MAXNGEO = 4;

const int MAXCOMMENT = 100;

const int MAXSTRPATH = 1024;

const int MAXSTRMSG = 1024;

const int MAXSTRRTK = 8;

const int MAXSBSMSG = 32;

const int MAXSOLMSG = 8191;

const int MAXRAWLEN = 16384;

const int MAXERRMSG = 4096;

const int MAXANT = 64;

const int MAXSOLBUF = 256;

const int MAXOBSBUF = 128;

const int MAXNRPOS = 16;

const int MAXLEAPS = 64;

const int MAXGISLAYER = 32;

const int MAXRCVCMD = 4096;

const double RNX2VER = 2.1;

const double RNX3VER = 3.0;

const int OBSTYPE_PR = 1;

const int OBSTYPE_CP = 2;

const int OBSTYPE_DOP = 4;

const int OBSTYPE_SNR = 8;

const int OBSTYPE_ALL = 255;

const int FREQTYPE_L1 = 1;

const int FREQTYPE_L2 = 2;

const int FREQTYPE_L3 = 4;

const int FREQTYPE_L4 = 8;

const int FREQTYPE_L5 = 16;

const int FREQTYPE_ALL = 255;

const int CODE_NONE = 0;

const int CODE_L1C = 1;

const int CODE_L1P = 2;

const int CODE_L1W = 3;

const int CODE_L1Y = 4;

const int CODE_L1M = 5;

const int CODE_L1N = 6;

const int CODE_L1S = 7;

const int CODE_L1L = 8;

const int CODE_L1E = 9;

const int CODE_L1A = 10;

const int CODE_L1B = 11;

const int CODE_L1X = 12;

const int CODE_L1Z = 13;

const int CODE_L2C = 14;

const int CODE_L2D = 15;

const int CODE_L2S = 16;

const int CODE_L2L = 17;

const int CODE_L2X = 18;

const int CODE_L2P = 19;

const int CODE_L2W = 20;

const int CODE_L2Y = 21;

const int CODE_L2M = 22;

const int CODE_L2N = 23;

const int CODE_L5I = 24;

const int CODE_L5Q = 25;

const int CODE_L5X = 26;

const int CODE_L7I = 27;

const int CODE_L7Q = 28;

const int CODE_L7X = 29;

const int CODE_L6A = 30;

const int CODE_L6B = 31;

const int CODE_L6C = 32;

const int CODE_L6X = 33;

const int CODE_L6Z = 34;

const int CODE_L6S = 35;

const int CODE_L6L = 36;

const int CODE_L8I = 37;

const int CODE_L8Q = 38;

const int CODE_L8X = 39;

const int CODE_L2I = 40;

const int CODE_L2Q = 41;

const int CODE_L6I = 42;

const int CODE_L6Q = 43;

const int CODE_L3I = 44;

const int CODE_L3Q = 45;

const int CODE_L3X = 46;

const int CODE_L1I = 47;

const int CODE_L1Q = 48;

const int CODE_L5A = 49;

const int CODE_L5B = 50;

const int CODE_L5C = 51;

const int CODE_L9A = 52;

const int CODE_L9B = 53;

const int CODE_L9C = 54;

const int CODE_L9X = 55;

const int CODE_L1D = 56;

const int CODE_L5D = 57;

const int CODE_L5P = 58;

const int CODE_L5Z = 59;

const int CODE_L6E = 60;

const int CODE_L7D = 61;

const int CODE_L7P = 62;

const int CODE_L7Z = 63;

const int CODE_L8D = 64;

const int CODE_L8P = 65;

const int CODE_L4A = 66;

const int CODE_L4B = 67;

const int CODE_L4X = 68;

const int MAXCODE = 68;

const int PMODE_SINGLE = 0;

const int PMODE_DGPS = 1;

const int PMODE_KINEMA = 2;

const int PMODE_STATIC = 3;

const int PMODE_STATIC_START = 4;

const int PMODE_MOVEB = 5;

const int PMODE_FIXED = 6;

const int PMODE_PPP_KINEMA = 7;

const int PMODE_PPP_STATIC = 8;

const int PMODE_PPP_FIXED = 9;

const int SOLF_LLH = 0;

const int SOLF_XYZ = 1;

const int SOLF_ENU = 2;

const int SOLF_NMEA = 3;

const int SOLF_STAT = 4;

const int SOLF_GSIF = 5;

const int SOLQ_NONE = 0;

const int SOLQ_FIX = 1;

const int SOLQ_FLOAT = 2;

const int SOLQ_SBAS = 3;

const int SOLQ_DGPS = 4;

const int SOLQ_SINGLE = 5;

const int SOLQ_PPP = 6;

const int SOLQ_DR = 7;

const int MAXSOLQ = 7;

const int TIMES_GPST = 0;

const int TIMES_UTC = 1;

const int TIMES_JST = 2;

const int IONOOPT_OFF = 0;

const int IONOOPT_BRDC = 1;

const int IONOOPT_SBAS = 2;

const int IONOOPT_IFLC = 3;

const int IONOOPT_EST = 4;

const int IONOOPT_TEC = 5;

const int IONOOPT_QZS = 6;

const int IONOOPT_STEC = 8;

const int TROPOPT_OFF = 0;

const int TROPOPT_SAAS = 1;

const int TROPOPT_SBAS = 2;

const int TROPOPT_EST = 3;

const int TROPOPT_ESTG = 4;

const int TROPOPT_ZTD = 5;

const int EPHOPT_BRDC = 0;

const int EPHOPT_PREC = 1;

const int EPHOPT_SBAS = 2;

const int EPHOPT_SSRAPC = 3;

const int EPHOPT_SSRCOM = 4;

const int ARMODE_OFF = 0;

const int ARMODE_CONT = 1;

const int ARMODE_INST = 2;

const int ARMODE_FIXHOLD = 3;

const int ARMODE_WLNL = 4;

const int ARMODE_TCAR = 5;

const int GLO_ARMODE_OFF = 0;

const int GLO_ARMODE_ON = 1;

const int GLO_ARMODE_AUTOCAL = 2;

const int GLO_ARMODE_FIXHOLD = 3;

const int SBSOPT_LCORR = 1;

const int SBSOPT_FCORR = 2;

const int SBSOPT_ICORR = 4;

const int SBSOPT_RANGE = 8;

const int POSOPT_POS = 0;

const int POSOPT_SINGLE = 1;

const int POSOPT_FILE = 2;

const int POSOPT_RINEX = 3;

const int POSOPT_RTCM = 4;

const int STR_NONE = 0;

const int STR_SERIAL = 1;

const int STR_FILE = 2;

const int STR_TCPSVR = 3;

const int STR_TCPCLI = 4;

const int STR_NTRIPSVR = 5;

const int STR_NTRIPCLI = 6;

const int STR_FTP = 7;

const int STR_HTTP = 8;

const int STR_NTRIPCAS = 9;

const int STR_UDPSVR = 10;

const int STR_UDPCLI = 11;

const int STR_MEMBUF = 12;

const int STRFMT_RTCM2 = 0;

const int STRFMT_RTCM3 = 1;

const int STRFMT_OEM4 = 2;

const int STRFMT_CNAV = 3;

const int STRFMT_UBX = 4;

const int STRFMT_SBP = 5;

const int STRFMT_CRES = 6;

const int STRFMT_STQ = 7;

const int STRFMT_JAVAD = 8;

const int STRFMT_NVS = 9;

const int STRFMT_BINEX = 10;

const int STRFMT_RT17 = 11;

const int STRFMT_SEPT = 12;

const int STRFMT_TERSUS = 13;

const int STRFMT_RINEX = 14;

const int STRFMT_SP3 = 15;

const int STRFMT_RNXCLK = 16;

const int STRFMT_SBAS = 17;

const int STRFMT_NMEA = 18;

const int MAXRCVFMT = 13;

const int STR_MODE_R = 1;

const int STR_MODE_W = 2;

const int STR_MODE_RW = 3;

const int GEOID_EMBEDDED = 0;

const int GEOID_EGM96_M150 = 1;

const int GEOID_EGM2008_M25 = 2;

const int GEOID_EGM2008_M10 = 3;

const int GEOID_GSI2000_M15 = 4;

const int GEOID_RAF09 = 5;

const String COMMENTH = '%';

const String MSG_DISCONN = '\$_DISCONNECT\r\n';

const int DLOPT_FORCE = 1;

const int DLOPT_KEEPCMP = 2;

const int DLOPT_HOLDERR = 4;

const int DLOPT_HOLDLST = 8;

const int LLI_SLIP = 1;

const int LLI_HALFC = 2;

const int LLI_BOCTRK = 4;

const int LLI_HALFA = 64;

const int LLI_HALFS = 128;

const double P2_5 = 0.03125;

const double P2_6 = 0.015625;

const double P2_11 = 0.00048828125;

const double P2_15 = 0.000030517578125;

const double P2_17 = 0.00000762939453125;

const double P2_19 = 0.0000019073486328125;

const double P2_20 = 9.5367431640625e-7;

const double P2_21 = 4.76837158203125e-7;

const double P2_23 = 1.19209289550781e-7;

const double P2_24 = 5.960464477539063e-8;

const double P2_27 = 7.450580596923828e-9;

const double P2_29 = 1.862645149230957e-9;

const double P2_30 = 9.313225746154785e-10;

const double P2_31 = 4.656612873077393e-10;

const double P2_32 = 2.328306436538696e-10;

const double P2_33 = 1.164153218269348e-10;

const double P2_35 = 2.91038304567337e-11;

const double P2_38 = 3.63797880709171e-12;

const double P2_39 = 1.818989403545856e-12;

const double P2_40 = 9.09494701772928e-13;

const double P2_43 = 1.13686837721616e-13;

const double P2_48 = 3.552713678800501e-15;

const double P2_50 = 8.881784197001252e-16;

const double P2_55 = 2.775557561562891e-17;

const int FILEPATHSEP = 47;
