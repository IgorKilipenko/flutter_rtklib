// Part of the LLVM Project, under the Apache License v2.0 with LLVM
// Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// ignore_for_file: camel_case_types, non_constant_identifier_names, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Rtklib (ublox)
class Ublox {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Ublox(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Ublox.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int U2(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _U2(
      p,
    );
  }

  late final _U2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<ffi.Uint8>)>>(
          'U2');
  late final _U2 = _U2Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  int U4(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _U4(
      p,
    );
  }

  late final _U4Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Uint8>)>>(
          'U4');
  late final _U4 = _U4Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  int I4(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _I4(
      p,
    );
  }

  late final _I4Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint8>)>>(
          'I4');
  late final _I4 = _I4Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  double R4(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _R4(
      p,
    );
  }

  late final _R4Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Uint8>)>>(
          'R4');
  late final _R4 = _R4Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint8>)>();

  double R8(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _R8(
      p,
    );
  }

  late final _R8Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint8>)>>(
          'R8');
  late final _R8 = _R8Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint8>)>();

  double I8(
    ffi.Pointer<ffi.Uint8> p,
  ) {
    return _I8(
      p,
    );
  }

  late final _I8Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint8>)>>(
          'I8');
  late final _I8 = _I8Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint8>)>();

  /// set fields (little-endian)
  void setU1(
    ffi.Pointer<ffi.Uint8> p,
    int u,
  ) {
    return _setU1(
      p,
      u,
    );
  }

  late final _setU1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint8)>>('setU1');
  late final _setU1 =
      _setU1Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setU2(
    ffi.Pointer<ffi.Uint8> p,
    int u,
  ) {
    return _setU2(
      p,
      u,
    );
  }

  late final _setU2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint16)>>('setU2');
  late final _setU2 =
      _setU2Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setU4(
    ffi.Pointer<ffi.Uint8> p,
    int u,
  ) {
    return _setU4(
      p,
      u,
    );
  }

  late final _setU4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('setU4');
  late final _setU4 =
      _setU4Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setI1(
    ffi.Pointer<ffi.Uint8> p,
    int i,
  ) {
    return _setI1(
      p,
      i,
    );
  }

  late final _setI1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int8)>>('setI1');
  late final _setI1 =
      _setI1Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setI2(
    ffi.Pointer<ffi.Uint8> p,
    int i,
  ) {
    return _setI2(
      p,
      i,
    );
  }

  late final _setI2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int16)>>('setI2');
  late final _setI2 =
      _setI2Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setI4(
    ffi.Pointer<ffi.Uint8> p,
    int i,
  ) {
    return _setI4(
      p,
      i,
    );
  }

  late final _setI4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('setI4');
  late final _setI4 =
      _setI4Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setR4(
    ffi.Pointer<ffi.Uint8> p,
    double r,
  ) {
    return _setR4(
      p,
      r,
    );
  }

  late final _setR4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Float)>>('setR4');
  late final _setR4 =
      _setR4Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, double)>();

  void setR8(
    ffi.Pointer<ffi.Uint8> p,
    double r,
  ) {
    return _setR8(
      p,
      r,
    );
  }

  late final _setR8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Double)>>('setR8');
  late final _setR8 =
      _setR8Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, double)>();

  /// checksum
  int checksum(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _checksum(
      buff,
      len,
    );
  }

  late final _checksumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('checksum');
  late final _checksum =
      _checksumPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  void setcs(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _setcs(
      buff,
      len,
    );
  }

  late final _setcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('setcs');
  late final _setcs =
      _setcsPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// UBX GNSSId to system (ref [2] 25)
  int ubx_sys(
    int gnssid,
  ) {
    return _ubx_sys(
      gnssid,
    );
  }

  late final _ubx_sysPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('ubx_sys');
  late final _ubx_sys = _ubx_sysPtr.asFunction<int Function(int)>();

  /// UBX SigId to signal (ref [5] 1.5.4)
  int ubx_sig(
    int sys,
    int sigid,
  ) {
    return _ubx_sig(
      sys,
      sigid,
    );
  }

  late final _ubx_sigPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'ubx_sig');
  late final _ubx_sig = _ubx_sigPtr.asFunction<int Function(int, int)>();

  /// UBX SigId to signal - combine codes
  int ubx_sig_combined(
    int sys,
    int sigid,
  ) {
    return _ubx_sig_combined(
      sys,
      sigid,
    );
  }

  late final _ubx_sig_combinedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'ubx_sig_combined');
  late final _ubx_sig_combined =
      _ubx_sig_combinedPtr.asFunction<int Function(int, int)>();

  /// signal index in obs data
  int sig_idx(
    int sys,
    int code,
  ) {
    return _sig_idx(
      sys,
      code,
    );
  }

  late final _sig_idxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Uint8)>>(
          'sig_idx');
  late final _sig_idx = _sig_idxPtr.asFunction<int Function(int, int)>();

  /// decode UBX-RXM-RAW: raw measurement data
  int decode_rxmraw(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_rxmraw(
      raw,
    );
  }

  late final _decode_rxmrawPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_rxmraw');
  late final _decode_rxmraw =
      _decode_rxmrawPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-RXM-RAWX: multi-GNSS raw measurement data (ref [3][4][5])
  int decode_rxmrawx(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_rxmrawx(
      raw,
    );
  }

  late final _decode_rxmrawxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_rxmrawx');
  late final _decode_rxmrawx =
      _decode_rxmrawxPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-NAV-SOL: navigation solution
  int decode_navsol(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_navsol(
      raw,
    );
  }

  late final _decode_navsolPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_navsol');
  late final _decode_navsol =
      _decode_navsolPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-NAV-TIMEGPS: GPS time solution
  int decode_navtime(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_navtime(
      raw,
    );
  }

  late final _decode_navtimePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_navtime');
  late final _decode_navtime =
      _decode_navtimePtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-TRK-MEAS: trace measurement data (unofficial)
  int decode_trkmeas(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_trkmeas(
      raw,
    );
  }

  late final _decode_trkmeasPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_trkmeas');
  late final _decode_trkmeas =
      _decode_trkmeasPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-TRKD5: trace measurement data (unofficial)
  int decode_trkd5(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_trkd5(
      raw,
    );
  }

  late final _decode_trkd5Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_trkd5');
  late final _decode_trkd5 =
      _decode_trkd5Ptr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// UTC 8-bit week -> full week
  void adj_utcweek(
    gtime_t time,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _adj_utcweek(
      time,
      utc,
    );
  }

  late final _adj_utcweekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>)>>('adj_utcweek');
  late final _adj_utcweek = _adj_utcweekPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Double>)>();

  /// decode GPS/QZSS ephemeris
  int decode_eph(
    ffi.Pointer<raw_t> raw,
    int sat,
  ) {
    return _decode_eph(
      raw,
      sat,
    );
  }

  late final _decode_ephPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Int32)>>('decode_eph');
  late final _decode_eph =
      _decode_ephPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  /// decode GPS/QZSS ION/UTC parameters
  int decode_ionutc(
    ffi.Pointer<raw_t> raw,
    int sat,
  ) {
    return _decode_ionutc(
      raw,
      sat,
    );
  }

  late final _decode_ionutcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Int32)>>('decode_ionutc');
  late final _decode_ionutc =
      _decode_ionutcPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  /// decode GPS/QZSS navigation data
  int decode_nav(
    ffi.Pointer<raw_t> raw,
    int sat,
    int off,
  ) {
    return _decode_nav(
      raw,
      sat,
      off,
    );
  }

  late final _decode_navPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Int32, ffi.Int32)>>('decode_nav');
  late final _decode_nav =
      _decode_navPtr.asFunction<int Function(ffi.Pointer<raw_t>, int, int)>();

  /// decode Galileo I/NAV navigation data
  int decode_enav(
    ffi.Pointer<raw_t> raw,
    int sat,
    int off,
  ) {
    return _decode_enav(
      raw,
      sat,
      off,
    );
  }

  late final _decode_enavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Int32, ffi.Int32)>>('decode_enav');
  late final _decode_enav =
      _decode_enavPtr.asFunction<int Function(ffi.Pointer<raw_t>, int, int)>();

  /// decode BDS navigation data
  int decode_cnav(
    ffi.Pointer<raw_t> raw,
    int sat,
    int off,
  ) {
    return _decode_cnav(
      raw,
      sat,
      off,
    );
  }

  late final _decode_cnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Int32, ffi.Int32)>>('decode_cnav');
  late final _decode_cnav =
      _decode_cnavPtr.asFunction<int Function(ffi.Pointer<raw_t>, int, int)>();

  /// decode GLONASS navigation data
  int decode_gnav(
    ffi.Pointer<raw_t> raw,
    int sat,
    int off,
    int frq,
  ) {
    return _decode_gnav(
      raw,
      sat,
      off,
      frq,
    );
  }

  late final _decode_gnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('decode_gnav');
  late final _decode_gnav = _decode_gnavPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, int, int, int)>();

  /// decode SBAS navigation data
  int decode_snav(
    ffi.Pointer<raw_t> raw,
    int prn,
    int off,
  ) {
    return _decode_snav(
      raw,
      prn,
      off,
    );
  }

  late final _decode_snavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Int32, ffi.Int32)>>('decode_snav');
  late final _decode_snav =
      _decode_snavPtr.asFunction<int Function(ffi.Pointer<raw_t>, int, int)>();

  /// decode UBX-RXM-SFRBX: raw subframe data (ref [3][4][5])
  int decode_rxmsfrbx(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_rxmsfrbx(
      raw,
    );
  }

  late final _decode_rxmsfrbxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_rxmsfrbx');
  late final _decode_rxmsfrbx =
      _decode_rxmsfrbxPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-TRK-SFRBX: subframe buffer extension (unofficial)
  int decode_trksfrbx(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_trksfrbx(
      raw,
    );
  }

  late final _decode_trksfrbxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_trksfrbx');
  late final _decode_trksfrbx =
      _decode_trksfrbxPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode UBX-RXM-SFRB: subframe buffer (GPS/SBAS)
  int decode_rxmsfrb(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_rxmsfrb(
      raw,
    );
  }

  late final _decode_rxmsfrbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_rxmsfrb');
  late final _decode_rxmsfrb =
      _decode_rxmsfrbPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode ubx-tim-tm2: time mark data
  int decode_timtm2(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_timtm2(
      raw,
    );
  }

  late final _decode_timtm2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_timtm2');
  late final _decode_timtm2 =
      _decode_timtm2Ptr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// decode ublox raw message
  int decode_ubx(
    ffi.Pointer<raw_t> raw,
  ) {
    return _decode_ubx(
      raw,
    );
  }

  late final _decode_ubxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'decode_ubx');
  late final _decode_ubx =
      _decode_ubxPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  /// sync code
  int sync_ubx(
    ffi.Pointer<ffi.Uint8> buff,
    int data,
  ) {
    return _sync_ubx(
      buff,
      data,
    );
  }

  late final _sync_ubxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Uint8)>>('sync_ubx');
  late final _sync_ubx =
      _sync_ubxPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int input_ubx(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_ubx(
      raw,
      data,
    );
  }

  late final _input_ubxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_ubx');
  late final _input_ubx =
      _input_ubxPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_ubxf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_ubxf(
      raw,
      fp,
    );
  }

  late final _input_ubxfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_ubxf');
  late final _input_ubxf = _input_ubxfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  /// convert string to integer
  int stoi(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _stoi(
      s,
    );
  }

  late final _stoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'stoi');
  late final _stoi = _stoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int gen_ubx(
    ffi.Pointer<ffi.Int8> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_ubx(
      msg,
      buff,
    );
  }

  late final _gen_ubxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>>('gen_ubx');
  late final _gen_ubx = _gen_ubxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>();
}

abstract class bool {
  static const int false1 = 0;
  static const int true1 = 1;
}

class raw_t extends ffi.Struct {
  /// receiver raw data control type
  external gtime_t time;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<gtime_t>> tobs;

  /// observation data time
  external obs_t obs;

  /// observation data
  external obs_t obuf;

  /// observation data buffer
  external nav_t nav;

  /// satellite ephemerides
  external sta_t sta;

  /// station parameters
  @ffi.Int32()
  external int ephsat;

  /// update satelle of ephemeris (0:no satellite)
  @ffi.Int32()
  external int ephset;

  /// update set of ephemeris (0-1)
  external sbsmsg_t sbsmsg;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> msgtype;

  @ffi.Array.multi([204, 380])
  external ffi.Array<ffi.Array<ffi.Uint8>> subfrm;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Double>> lockt;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Uint8>> lockflag;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> icpp;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> off;

  @ffi.Double()
  external double icpc;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> prCA;

  @ffi.Array.multi([204])
  external ffi.Array<ffi.Double> dpCA;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Uint8>> halfc;

  @ffi.Array.multi([96])
  external ffi.Array<ffi.Int8> freqn;

  /// frequency number for javad
  @ffi.Int32()
  external int nbyte;

  /// number of bytes in message buffer
  @ffi.Int32()
  external int len;

  /// message length (bytes)
  @ffi.Int32()
  external int iod;

  /// issue of data
  @ffi.Int32()
  external int tod;

  /// time of day (ms)
  @ffi.Int32()
  external int tbase;

  /// time base (0:gpst,1:utc(usno),2:glonass,3:utc(su)
  @ffi.Int32()
  external int flag;

  /// general purpose flag
  @ffi.Int32()
  external int outtype;

  @ffi.Array.multi([16384])
  external ffi.Array<ffi.Uint8> buff;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> opt;

  /// receiver dependent options
  @ffi.Int32()
  external int format;

  /// receiver stream format
  @ffi.Int32()
  external int rcvtype;

  /// receiver type within format
  external ffi.Pointer<ffi.Void> rcv_data;
}

/// type definitions
class gtime_t extends ffi.Struct {
  /// time struct
  @time_t()
  external int time;

  /// time (s) expressed by standard time_t
  @ffi.Double()
  external double sec;
}

typedef time_t = ffi.Int64;

class obs_t extends ffi.Struct {
  /// observation data
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  /// number of obervation data/allocated
  @ffi.Int32()
  external int flag;

  /// epoch flag (0:ok,1:power failure,>1:event flag)
  @ffi.Int32()
  external int rcvcount;

  /// count of rcv event
  @ffi.Int32()
  external int tmcount;

  /// time mark count
  external ffi.Pointer<obsd_t> data;
}

class obsd_t extends ffi.Struct {
  /// observation data record
  external gtime_t time;

  /// receiver sampling time (GPST)
  @ffi.Uint8()
  external int sat;

  @ffi.Uint8()
  external int rcv;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> SNR;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> LLI;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> code;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> L;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> P;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> D;

  /// observation data doppler frequency (Hz)
  @ffi.Int32()
  external int timevalid;

  /// time is valid (Valid GNSS fix) for time mark
  external gtime_t eventime;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> Lstd;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> Pstd;

  /// stdev of pseudorange (0.01*2^(n+5) meters)
  @ffi.Uint8()
  external int freq;
}

class nav_t extends ffi.Struct {
  /// navigation data type
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  /// number of broadcast ephemeris
  @ffi.Int32()
  external int ng;

  @ffi.Int32()
  external int ngmax;

  /// number of glonass ephemeris
  @ffi.Int32()
  external int ns;

  @ffi.Int32()
  external int nsmax;

  /// number of sbas ephemeris
  @ffi.Int32()
  external int ne;

  @ffi.Int32()
  external int nemax;

  /// number of precise ephemeris
  @ffi.Int32()
  external int nc;

  @ffi.Int32()
  external int ncmax;

  /// number of precise clock
  @ffi.Int32()
  external int na;

  @ffi.Int32()
  external int namax;

  /// number of almanac data
  @ffi.Int32()
  external int nt;

  @ffi.Int32()
  external int ntmax;

  /// number of tec grid data
  external ffi.Pointer<eph_t> eph;

  /// GPS/QZS/GAL/BDS/IRN ephemeris
  external ffi.Pointer<geph_t> geph;

  /// GLONASS ephemeris
  external ffi.Pointer<seph_t> seph;

  /// SBAS ephemeris
  external ffi.Pointer<peph_t> peph;

  /// precise ephemeris
  external ffi.Pointer<pclk_t> pclk;

  /// precise clock
  external ffi.Pointer<alm_t> alm;

  /// almanac data
  external ffi.Pointer<tec_t> tec;

  /// tec grid data
  external erp_t erp;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_gps;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_glo;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_gal;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_qzs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_cmp;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> utc_irn;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> utc_sbs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_gps;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> ion_gal;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_qzs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_cmp;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_irn;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> glo_fcn;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Double>> cbias;

  @ffi.Array.multi([64, 2, 3])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Double>>> rbias;

  @ffi.Array.multi([204])
  external ffi.Array<pcv_t> pcvs;

  /// satellite antenna pcv
  external sbssat_t sbssat;

  @ffi.Array.multi([11])
  external ffi.Array<sbsion_t> sbsion;

  @ffi.Array.multi([204])
  external ffi.Array<dgps_t> dgps;

  @ffi.Array.multi([204])
  external ffi.Array<ssr_t> ssr;
}

class eph_t extends ffi.Struct {
  /// GPS/QZS/GAL broadcast ephemeris type
  @ffi.Int32()
  external int sat;

  /// satellite number
  @ffi.Int32()
  external int iode;

  @ffi.Int32()
  external int iodc;

  /// IODE,IODC
  @ffi.Int32()
  external int sva;

  /// SV accuracy (URA index)
  @ffi.Int32()
  external int svh;

  /// SV health (0:ok)
  @ffi.Int32()
  external int week;

  /// GPS/QZS: gps week, GAL: galileo week
  @ffi.Int32()
  external int code;

  /// GPS/QZS: code on L2
  /// GAL: data source defined as rinex 3.03
  /// BDS: data source (0:unknown,1:B1I,2:B1Q,3:B2I,4:B2Q,5:B3I,6:B3Q)
  @ffi.Int32()
  external int flag;

  /// GPS/QZS: L2 P data flag
  /// BDS: nav type (0:unknown,1:IGSO/MEO,2:GEO)
  external gtime_t toe;

  external gtime_t toc;

  external gtime_t ttr;

  /// Toe,Toc,T_trans
  /// SV orbit parameters
  @ffi.Double()
  external double A;

  @ffi.Double()
  external double e;

  @ffi.Double()
  external double i0;

  @ffi.Double()
  external double OMG0;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M0;

  @ffi.Double()
  external double deln;

  @ffi.Double()
  external double OMGd;

  @ffi.Double()
  external double idot;

  @ffi.Double()
  external double crc;

  @ffi.Double()
  external double crs;

  @ffi.Double()
  external double cuc;

  @ffi.Double()
  external double cus;

  @ffi.Double()
  external double cic;

  @ffi.Double()
  external double cis;

  @ffi.Double()
  external double toes;

  /// Toe (s) in week
  @ffi.Double()
  external double fit;

  /// fit interval (h)
  @ffi.Double()
  external double f0;

  @ffi.Double()
  external double f1;

  @ffi.Double()
  external double f2;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> tgd;

  /// group delay parameters
  /// GPS/QZS:tgd[0]=TGD
  /// GAL:tgd[0]=BGD_E1E5a,tgd[1]=BGD_E1E5b
  /// CMP:tgd[0]=TGD_B1I ,tgd[1]=TGD_B2I/B2b,tgd[2]=TGD_B1Cp
  /// tgd[3]=TGD_B2ap,tgd[4]=ISC_B1Cd   ,tgd[5]=ISC_B2ad
  @ffi.Double()
  external double Adot;

  @ffi.Double()
  external double ndot;
}

class geph_t extends ffi.Struct {
  /// GLONASS broadcast ephemeris type
  @ffi.Int32()
  external int sat;

  /// satellite number
  @ffi.Int32()
  external int iode;

  /// IODE (0-6 bit of tb field)
  @ffi.Int32()
  external int frq;

  /// satellite frequency number
  @ffi.Int32()
  external int svh;

  @ffi.Int32()
  external int sva;

  @ffi.Int32()
  external int age;

  /// satellite health, accuracy, age of operation
  external gtime_t toe;

  /// epoch of epherides (gpst)
  external gtime_t tof;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> vel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> acc;

  /// satellite acceleration (ecef) (m/s^2)
  @ffi.Double()
  external double taun;

  @ffi.Double()
  external double gamn;

  /// SV clock bias (s)/relative freq bias
  @ffi.Double()
  external double dtaun;
}

class seph_t extends ffi.Struct {
  /// SBAS ephemeris type
  @ffi.Int32()
  external int sat;

  /// satellite number
  external gtime_t t0;

  /// reference epoch time (GPST)
  external gtime_t tof;

  /// time of message frame (GPST)
  @ffi.Int32()
  external int sva;

  /// SV accuracy (URA index)
  @ffi.Int32()
  external int svh;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> vel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> acc;

  /// satellite acceleration (m/s^2) (ecef)
  @ffi.Double()
  external double af0;

  @ffi.Double()
  external double af1;
}

class peph_t extends ffi.Struct {
  /// precise ephemeris type
  external gtime_t time;

  /// time (GPST)
  @ffi.Int32()
  external int index;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Double>> pos;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Float>> std;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Double>> vel;

  @ffi.Array.multi([204, 4])
  external ffi.Array<ffi.Array<ffi.Float>> vst;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Float>> cov;

  @ffi.Array.multi([204, 3])
  external ffi.Array<ffi.Array<ffi.Float>> vco;
}

class pclk_t extends ffi.Struct {
  /// precise clock type
  external gtime_t time;

  /// time (GPST)
  @ffi.Int32()
  external int index;

  @ffi.Array.multi([204, 1])
  external ffi.Array<ffi.Array<ffi.Double>> clk;

  @ffi.Array.multi([204, 1])
  external ffi.Array<ffi.Array<ffi.Float>> std;
}

class alm_t extends ffi.Struct {
  /// almanac type
  @ffi.Int32()
  external int sat;

  /// satellite number
  @ffi.Int32()
  external int svh;

  /// sv health (0:ok)
  @ffi.Int32()
  external int svconf;

  /// as and sv config
  @ffi.Int32()
  external int week;

  /// GPS/QZS: gps week, GAL: galileo week
  external gtime_t toa;

  /// Toa
  /// SV orbit parameters
  @ffi.Double()
  external double A;

  @ffi.Double()
  external double e;

  @ffi.Double()
  external double i0;

  @ffi.Double()
  external double OMG0;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M0;

  @ffi.Double()
  external double OMGd;

  @ffi.Double()
  external double toas;

  /// Toa (s) in week
  @ffi.Double()
  external double f0;

  @ffi.Double()
  external double f1;
}

class tec_t extends ffi.Struct {
  /// TEC grid type
  external gtime_t time;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> ndata;

  /// TEC grid data size {nlat,nlon,nhgt}
  @ffi.Double()
  external double rb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> lats;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> lons;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> hgts;

  /// heights start/interval (km)
  external ffi.Pointer<ffi.Double> data;

  /// TEC grid data (tecu)
  external ffi.Pointer<ffi.Float> rms;
}

class erp_t extends ffi.Struct {
  /// earth rotation parameter type
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  /// number and max number of data
  external ffi.Pointer<erpd_t> data;
}

class erpd_t extends ffi.Struct {
  /// earth rotation parameter data type
  @ffi.Double()
  external double mjd;

  /// mjd (days)
  @ffi.Double()
  external double xp;

  @ffi.Double()
  external double yp;

  /// pole offset (rad)
  @ffi.Double()
  external double xpr;

  @ffi.Double()
  external double ypr;

  /// pole offset rate (rad/day)
  @ffi.Double()
  external double ut1_utc;

  /// ut1-utc (s)
  @ffi.Double()
  external double lod;
}

class pcv_t extends ffi.Struct {
  /// antenna parameter type
  @ffi.Int32()
  external int sat;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> type;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> code;

  /// serial number or satellite code
  external gtime_t ts;

  external gtime_t te;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Double>> off;

  @ffi.Array.multi([3, 19])
  external ffi.Array<ffi.Array<ffi.Double>> var1;
}

class sbssat_t extends ffi.Struct {
  /// SBAS satellite corrections type
  @ffi.Int32()
  external int iodp;

  /// IODP (issue of date mask)
  @ffi.Int32()
  external int nsat;

  /// number of satellites
  @ffi.Int32()
  external int tlat;

  @ffi.Array.multi([204])
  external ffi.Array<sbssatp_t> sat;
}

class sbssatp_t extends ffi.Struct {
  /// SBAS satellite correction type
  @ffi.Int32()
  external int sat;

  /// satellite number
  external sbsfcorr_t fcorr;

  /// fast correction
  external sbslcorr_t lcorr;
}

class sbsfcorr_t extends ffi.Struct {
  /// SBAS fast correction type
  external gtime_t t0;

  /// time of applicability (TOF)
  @ffi.Double()
  external double prc;

  /// pseudorange correction (PRC) (m)
  @ffi.Double()
  external double rrc;

  /// range-rate correction (RRC) (m/s)
  @ffi.Double()
  external double dt;

  /// range-rate correction delta-time (s)
  @ffi.Int32()
  external int iodf;

  /// IODF (issue of date fast corr)
  @ffi.Int16()
  external int udre;

  /// UDRE+1
  @ffi.Int16()
  external int ai;
}

class sbslcorr_t extends ffi.Struct {
  /// SBAS long term satellite error correction type
  external gtime_t t0;

  /// correction time
  @ffi.Int32()
  external int iode;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dpos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dvel;

  /// delta velocity (m/s) (ecef)
  @ffi.Double()
  external double daf0;

  @ffi.Double()
  external double daf1;
}

class sbsion_t extends ffi.Struct {
  /// SBAS ionospheric corrections type
  @ffi.Int32()
  external int iodi;

  /// IODI (issue of date ionos corr)
  @ffi.Int32()
  external int nigp;

  @ffi.Array.multi([201])
  external ffi.Array<sbsigp_t> igp;
}

class sbsigp_t extends ffi.Struct {
  /// SBAS ionospheric correction type
  external gtime_t t0;

  /// correction time
  @ffi.Int16()
  external int lat;

  @ffi.Int16()
  external int lon;

  /// latitude/longitude (deg)
  @ffi.Int16()
  external int give;

  /// GIVI+1
  @ffi.Float()
  external double delay;
}

class dgps_t extends ffi.Struct {
  /// DGPS/GNSS correction type
  external gtime_t t0;

  /// correction time
  @ffi.Double()
  external double prc;

  /// pseudorange correction (PRC) (m)
  @ffi.Double()
  external double rrc;

  /// range rate correction (RRC) (m/s)
  @ffi.Int32()
  external int iod;

  /// issue of data (IOD)
  @ffi.Double()
  external double udre;
}

class ssr_t extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<gtime_t> t0;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> udi;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int32> iod;

  /// iod ssr {eph,clk,hrclk,ura,bias,pbias}
  @ffi.Int32()
  external int iode;

  /// issue of data
  @ffi.Int32()
  external int iodcrc;

  /// issue of data crc for beidou/sbas
  @ffi.Int32()
  external int ura;

  /// URA indicator
  @ffi.Int32()
  external int refd;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> deph;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> ddeph;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dclk;

  /// delta clock {c0,c1,c2} (m,m/s,m/s^2)
  @ffi.Double()
  external double hrclk;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Float> cbias;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Double> pbias;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Float> stdpb;

  /// std-dev of phase biases (m)
  @ffi.Double()
  external double yaw_ang;

  @ffi.Double()
  external double yaw_rate;

  /// yaw angle and yaw rate (deg,deg/s)
  @ffi.Uint8()
  external int update;
}

class sta_t extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> marker;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> antdes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> antsno;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> rectype;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> recver;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> recsno;

  /// receiver serial number
  @ffi.Int32()
  external int antsetup;

  /// antenna setup id
  @ffi.Int32()
  external int itrf;

  /// ITRF realization year
  @ffi.Int32()
  external int deltype;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> del;

  /// antenna position delta (e/n/u or x/y/z) (m)
  @ffi.Double()
  external double hgt;

  /// antenna height (m)
  @ffi.Int32()
  external int glo_cp_align;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> glo_cp_bias;
}

class sbsmsg_t extends ffi.Struct {
  /// SBAS message type
  @ffi.Int32()
  external int week;

  @ffi.Int32()
  external int tow;

  /// receiption time
  @ffi.Uint8()
  external int prn;

  @ffi.Uint8()
  external int rcv;

  @ffi.Array.multi([29])
  external ffi.Array<ffi.Uint8> msg;
}

typedef FILE = _iobuf;

class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

const int UBXSYNC1 = 181;

const int UBXSYNC2 = 98;

const int UBXCFG = 6;

const int PREAMB_CNAV = 139;

const int ID_NAVSOL = 262;

const int ID_NAVTIME = 288;

const int ID_RXMRAW = 528;

const int ID_RXMSFRB = 529;

const int ID_RXMSFRBX = 531;

const int ID_RXMRAWX = 533;

const int ID_TRKD5 = 778;

const int ID_TRKMEAS = 784;

const int ID_TRKSFRBX = 783;

const int ID_TIMTM2 = 3331;

const int FU1 = 1;

const int FU2 = 2;

const int FU4 = 3;

const int FU8 = 4;

const int FI1 = 5;

const int FI2 = 6;

const int FI4 = 7;

const int FR4 = 8;

const int FR8 = 9;

const int FS32 = 10;

const double P2_10 = 0.0009765625;

const int MAX_CPSTD_VALID_GEN8 = 5;

const int MAX_CPSTD_VALID_GEN9 = 8;

const int CPSTD_SLIP = 15;
