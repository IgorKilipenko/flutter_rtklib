// Part of the LLVM Project, under the Apache License v2.0 with LLVM
// Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// ignore_for_file: camel_case_types, non_constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to Rtklib
class RtkLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RtkLib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RtkLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void va_start___ffilocal(
    ffi.Pointer<va_list> arg0,
  ) {
    return _va_start___ffilocal(
      arg0,
    );
  }

  late final _va_start___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final _va_start___ffilocal =
      _va_start___ffilocalPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void security_init_cookie___ffilocal() {
    return _security_init_cookie___ffilocal();
  }

  late final _security_init_cookie___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final _security_init_cookie___ffilocal =
      _security_init_cookie___ffilocalPtr.asFunction<void Function()>();

  void security_check_cookie___ffilocal(
    int _StackCookie,
  ) {
    return _security_check_cookie___ffilocal(
      _StackCookie,
    );
  }

  late final _security_check_cookie___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final _security_check_cookie___ffilocal =
      _security_check_cookie___ffilocalPtr.asFunction<void Function(int)>();

  void report_gsfailure___ffilocal(
    int _StackCookie,
  ) {
    return _report_gsfailure___ffilocal(
      _StackCookie,
    );
  }

  late final _report_gsfailure___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final _report_gsfailure___ffilocal =
      _report_gsfailure___ffilocalPtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> _security_cookie___ffilocal =
      _lookup<uintptr_t>('__security_cookie');

  int get security_cookie___ffilocal => _security_cookie___ffilocal.value;

  set security_cookie___ffilocal(int value) =>
      _security_cookie___ffilocal.value = value;

  void invalid_parameter_noinfo__ffilocal() {
    return _invalid_parameter_noinfo__ffilocal();
  }

  late final _invalid_parameter_noinfo__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final _invalid_parameter_noinfo__ffilocal =
      _invalid_parameter_noinfo__ffilocalPtr.asFunction<void Function()>();

  void invalid_parameter_noinfo_noreturn__ffilocal() {
    return _invalid_parameter_noinfo_noreturn__ffilocal();
  }

  late final _invalid_parameter_noinfo_noreturn__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final _invalid_parameter_noinfo_noreturn__ffilocal =
      _invalid_parameter_noinfo_noreturn__ffilocalPtr
          .asFunction<void Function()>();

  void invoke_watson__ffilocal(
    ffi.Pointer<wchar_t> _Expression,
    ffi.Pointer<wchar_t> _FunctionName,
    ffi.Pointer<wchar_t> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return _invoke_watson__ffilocal(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final _invoke_watson__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Uint32, uintptr_t)>>('_invoke_watson');
  late final _invoke_watson__ffilocal = _invoke_watson__ffilocalPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<FILE> acrt_iob_func___ffilocal(
    int _Ix,
  ) {
    return _acrt_iob_func___ffilocal(
      _Ix,
    );
  }

  late final _acrt_iob_func___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Uint32)>>(
          '__acrt_iob_func');
  late final _acrt_iob_func___ffilocal = _acrt_iob_func___ffilocalPtr
      .asFunction<ffi.Pointer<FILE> Function(int)>();

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetwchar__ffilocal() {
    return _fgetwchar__ffilocal();
  }

  late final _fgetwchar__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_fgetwchar');
  late final _fgetwchar__ffilocal =
      _fgetwchar__ffilocalPtr.asFunction<int Function()>();

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          'fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputwchar__ffilocal(
    int _Character,
  ) {
    return _fputwchar__ffilocal(
      _Character,
    );
  }

  late final _fputwchar__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('_fputwchar');
  late final _fputwchar__ffilocal =
      _fputwchar__ffilocalPtr.asFunction<int Function(int)>();

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  ffi.Pointer<wchar_t> fgetws(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Int32, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<FILE>)>();

  int fputws(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<wchar_t> getws_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return _getws_s__ffilocal(
      _Buffer,
      _BufferCount,
    );
  }

  late final _getws_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, size_t)>>('_getws_s');
  late final _getws_s__ffilocal = _getws_s__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          'putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  int putws__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return _putws__ffilocal(
      _Buffer,
    );
  }

  late final _putws__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_putws');
  late final _putws__ffilocal =
      _putws__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> wfdopen__ffilocal(
    int _FileHandle,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return _wfdopen__ffilocal(
      _FileHandle,
      _Mode,
    );
  }

  late final _wfdopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<wchar_t>)>>('_wfdopen');
  late final _wfdopen__ffilocal = _wfdopen__ffilocalPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> wfopen__ffilocal(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return _wfopen__ffilocal(
      _FileName,
      _Mode,
    );
  }

  late final _wfopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wfopen');
  late final _wfopen__ffilocal = _wfopen__ffilocalPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wfopen_s__ffilocal(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return _wfopen_s__ffilocal(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _wfopen_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wfopen_s');
  late final _wfopen_s__ffilocal = _wfopen_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> wfreopen__ffilocal(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _wfreopen__ffilocal(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _wfreopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<FILE>)>>('_wfreopen');
  late final _wfreopen__ffilocal = _wfreopen__ffilocalPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  int wfreopen_s__ffilocal(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _wfreopen_s__ffilocal(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _wfreopen_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>>('_wfreopen_s');
  late final _wfreopen_s__ffilocal = _wfreopen_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> wfsopen__ffilocal(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    int _ShFlag,
  ) {
    return _wfsopen__ffilocal(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final _wfsopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Int32)>>('_wfsopen');
  late final _wfsopen__ffilocal = _wfsopen__ffilocalPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  void wperror__ffilocal(
    ffi.Pointer<wchar_t> _ErrorMessage,
  ) {
    return _wperror__ffilocal(
      _ErrorMessage,
    );
  }

  late final _wperror__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wchar_t>)>>(
          '_wperror');
  late final _wperror__ffilocal =
      _wperror__ffilocalPtr.asFunction<void Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> wpopen__ffilocal(
    ffi.Pointer<wchar_t> _Command,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return _wpopen__ffilocal(
      _Command,
      _Mode,
    );
  }

  late final _wpopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wpopen');
  late final _wpopen__ffilocal = _wpopen__ffilocalPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wremove__ffilocal(
    ffi.Pointer<wchar_t> _FileName,
  ) {
    return _wremove__ffilocal(
      _FileName,
    );
  }

  late final _wremove__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wremove');
  late final _wremove__ffilocal =
      _wremove__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wtempnam__ffilocal(
    ffi.Pointer<wchar_t> _Directory,
    ffi.Pointer<wchar_t> _FilePrefix,
  ) {
    return _wtempnam__ffilocal(
      _Directory,
      _FilePrefix,
    );
  }

  late final _wtempnam__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wtempnam');
  late final _wtempnam__ffilocal = _wtempnam__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wtmpnam_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return _wtmpnam_s__ffilocal(
      _Buffer,
      _BufferCount,
    );
  }

  late final _wtmpnam_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wtmpnam_s');
  late final _wtmpnam_s__ffilocal = _wtmpnam_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wtmpnam__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return _wtmpnam__ffilocal(
      _Buffer,
    );
  }

  late final _wtmpnam__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wtmpnam');
  late final _wtmpnam__ffilocal = _wtmpnam__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int fgetwc_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc_nolock__ffilocal(
      _Stream,
    );
  }

  late final _fgetwc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_fgetwc_nolock');
  late final _fgetwc_nolock__ffilocal =
      _fgetwc_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputwc_nolock__ffilocal(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc_nolock__ffilocal(
      _Character,
      _Stream,
    );
  }

  late final _fputwc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          '_fputwc_nolock');
  late final _fputwc_nolock__ffilocal = _fputwc_nolock__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int getwc_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc_nolock__ffilocal(
      _Stream,
    );
  }

  late final _getwc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_getwc_nolock');
  late final _getwc_nolock__ffilocal =
      _getwc_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putwc_nolock__ffilocal(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc_nolock__ffilocal(
      _Character,
      _Stream,
    );
  }

  late final _putwc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          '_putwc_nolock');
  late final _putwc_nolock__ffilocal = _putwc_nolock__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int ungetwc_nolock__ffilocal(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc_nolock__ffilocal(
      _Character,
      _Stream,
    );
  }

  late final _ungetwc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          '_ungetwc_nolock');
  late final _ungetwc_nolock__ffilocal = _ungetwc_nolock__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int stdio_common_vfwprintf___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfwprintf___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfwprintf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfwprintf');
  late final _stdio_common_vfwprintf___ffilocal =
      _stdio_common_vfwprintf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vfwprintf_s___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfwprintf_s___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfwprintf_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfwprintf_s');
  late final _stdio_common_vfwprintf_s___ffilocal =
      _stdio_common_vfwprintf_s___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vfwprintf_p___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfwprintf_p___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfwprintf_p___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfwprintf_p');
  late final _stdio_common_vfwprintf_p___ffilocal =
      _stdio_common_vfwprintf_p___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vfwscanf___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfwscanf___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfwscanf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfwscanf');
  late final _stdio_common_vfwscanf___ffilocal =
      _stdio_common_vfwscanf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vswprintf___ffilocal(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vswprintf___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vswprintf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vswprintf');
  late final _stdio_common_vswprintf___ffilocal =
      _stdio_common_vswprintf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vswprintf_s___ffilocal(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vswprintf_s___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vswprintf_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vswprintf_s');
  late final _stdio_common_vswprintf_s___ffilocal =
      _stdio_common_vswprintf_s___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vsnwprintf_s___ffilocal(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vsnwprintf_s___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vsnwprintf_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              size_t,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vsnwprintf_s');
  late final _stdio_common_vsnwprintf_s___ffilocal =
      _stdio_common_vsnwprintf_s___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, int,
              ffi.Pointer<wchar_t>, locale_t__ffilocal, va_list)>();

  int stdio_common_vswprintf_p___ffilocal(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vswprintf_p___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vswprintf_p___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vswprintf_p');
  late final _stdio_common_vswprintf_p___ffilocal =
      _stdio_common_vswprintf_p___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vswscanf___ffilocal(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vswscanf___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vswscanf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vswscanf');
  late final _stdio_common_vswscanf___ffilocal =
      _stdio_common_vswscanf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              locale_t__ffilocal, va_list)>();

  int get_stream_buffer_pointers__ffilocal(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Count,
  ) {
    return _get_stream_buffer_pointers__ffilocal(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final _get_stream_buffer_pointers__ffilocalPtr = _lookup<
          ffi.NativeFunction<
              errno_t Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      '_get_stream_buffer_pointers');
  late final _get_stream_buffer_pointers__ffilocal =
      _get_stream_buffer_pointers__ffilocalPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  int clearerr_s(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_sPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<FILE>)>>(
          'clearerr_s');
  late final _clearerr_s =
      _clearerr_sPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen_s');
  late final _fopen_s = _fopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_sPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread_s');
  late final _fread_s = _fread_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int freopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<FILE>)>>('freopen_s');
  late final _freopen_s = _freopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> gets_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, rsize_t)>>('gets_s');
  late final _gets_s = _gets_sPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>)>>(
      'tmpfile_s');
  late final _tmpfile_s =
      _tmpfile_sPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<FILE>>)>();

  int tmpnam_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int8>, rsize_t)>>(
      'tmpnam_s');
  late final _tmpnam_s =
      _tmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  void clearerr(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fcloseall__ffilocal() {
    return _fcloseall__ffilocal();
  }

  late final _fcloseall__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_fcloseall');
  late final _fcloseall__ffilocal =
      _fcloseall__ffilocalPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fdopen__ffilocal(
    int _FileHandle,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fdopen__ffilocal(
      _FileHandle,
      _Mode,
    );
  }

  late final _fdopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('_fdopen');
  late final _fdopen__ffilocal = _fdopen__ffilocalPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  int feof(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetchar__ffilocal() {
    return _fgetchar__ffilocal();
  }

  late final _fgetchar__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_fgetchar');
  late final _fgetchar__ffilocal =
      _fgetchar__ffilocalPtr.asFunction<int Function()>();

  int fgetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _MaxCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int fileno__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno__ffilocal(
      _Stream,
    );
  }

  late final _fileno__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fileno');
  late final _fileno__ffilocal =
      _fileno__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int flushall__ffilocal() {
    return _flushall__ffilocal();
  }

  late final _flushall__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_flushall');
  late final _flushall__ffilocal =
      _flushall__ffilocalPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fputc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputchar__ffilocal(
    int _Character,
  ) {
    return _fputchar__ffilocal(
      _Character,
    );
  }

  late final _fputchar__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('_fputchar');
  late final _fputchar__ffilocal =
      _fputchar__ffilocalPtr.asFunction<int Function(int)>();

  int fputs(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fsopen__ffilocal(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    int _ShFlag,
  ) {
    return _fsopen__ffilocal(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final _fsopen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_fsopen');
  late final _fsopen__ffilocal = _fsopen__ffilocalPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int fsetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fseek(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fseeki64__ffilocal(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseeki64__ffilocal(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseeki64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('_fseeki64');
  late final _fseeki64__ffilocal = _fseeki64__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ftelli64__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftelli64__ffilocal(
      _Stream,
    );
  }

  late final _ftelli64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          '_ftelli64');
  late final _ftelli64__ffilocal =
      _ftelli64__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getmaxstdio__ffilocal() {
    return _getmaxstdio__ffilocal();
  }

  late final _getmaxstdio__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_getmaxstdio');
  late final _getmaxstdio__ffilocal =
      _getmaxstdio__ffilocalPtr.asFunction<int Function()>();

  int getw__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw__ffilocal(
      _Stream,
    );
  }

  late final _getw__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_getw');
  late final _getw__ffilocal =
      _getw__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return _perror(
      _ErrorMessage,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int pclose__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _pclose__ffilocal(
      _Stream,
    );
  }

  late final _pclose__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_pclose');
  late final _pclose__ffilocal =
      _pclose__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen__ffilocal(
    ffi.Pointer<ffi.Int8> _Command,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _popen__ffilocal(
      _Command,
      _Mode,
    );
  }

  late final _popen__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_popen');
  late final _popen__ffilocal = _popen__ffilocalPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int putc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int putw__ffilocal(
    int _Word,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw__ffilocal(
      _Word,
      _Stream,
    );
  }

  late final _putw__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_putw');
  late final _putw__ffilocal =
      _putw__ffilocalPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int remove(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> _OldFileName,
    ffi.Pointer<ffi.Int8> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int unlink__ffilocal(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _unlink__ffilocal(
      _FileName,
    );
  }

  late final _unlink__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          '_unlink');
  late final _unlink__ffilocal =
      _unlink__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int unlink(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _unlink(
      _FileName,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void rewind(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int rmtmp__ffilocal() {
    return _rmtmp__ffilocal();
  }

  late final _rmtmp__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_rmtmp');
  late final _rmtmp__ffilocal =
      _rmtmp__ffilocalPtr.asFunction<int Function()>();

  void setbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int setmaxstdio__ffilocal(
    int _Maximum,
  ) {
    return _setmaxstdio__ffilocal(
      _Maximum,
    );
  }

  late final _setmaxstdio__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          '_setmaxstdio');
  late final _setmaxstdio__ffilocal =
      _setmaxstdio__ffilocalPtr.asFunction<int Function(int)>();

  int setvbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> tempnam__ffilocal(
    ffi.Pointer<ffi.Int8> _DirectoryName,
    ffi.Pointer<ffi.Int8> _FilePrefix,
  ) {
    return _tempnam__ffilocal(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final _tempnam__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_tempnam');
  late final _tempnam__ffilocal = _tempnam__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void lock_file__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _lock_file__ffilocal(
      _Stream,
    );
  }

  late final _lock_file__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_lock_file');
  late final _lock_file__ffilocal =
      _lock_file__ffilocalPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void unlock_file__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _unlock_file__ffilocal(
      _Stream,
    );
  }

  late final _unlock_file__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_unlock_file');
  late final _unlock_file__ffilocal =
      _unlock_file__ffilocalPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose_nolock__ffilocal(
      _Stream,
    );
  }

  late final _fclose_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fclose_nolock');
  late final _fclose_nolock__ffilocal =
      _fclose_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush_nolock__ffilocal(
      _Stream,
    );
  }

  late final _fflush_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fflush_nolock');
  late final _fflush_nolock__ffilocal =
      _fflush_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc_nolock__ffilocal(
      _Stream,
    );
  }

  late final _fgetc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fgetc_nolock');
  late final _fgetc_nolock__ffilocal =
      _fgetc_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc_nolock__ffilocal(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc_nolock__ffilocal(
      _Character,
      _Stream,
    );
  }

  late final _fputc_nolock__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_fputc_nolock');
  late final _fputc_nolock__ffilocal = _fputc_nolock__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread_nolock__ffilocal(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_nolock__ffilocal(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_nolock__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('_fread_nolock');
  late final _fread_nolock__ffilocal = _fread_nolock__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_nolock_s__ffilocal(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_nolock_s__ffilocal(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_nolock_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t, size_t,
              ffi.Pointer<FILE>)>>('_fread_nolock_s');
  late final _fread_nolock_s__ffilocal =
      _fread_nolock_s__ffilocalPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int fseek_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek_nolock__ffilocal(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseek_nolock__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('_fseek_nolock');
  late final _fseek_nolock__ffilocal = _fseek_nolock__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fseeki64_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseeki64_nolock__ffilocal(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseeki64_nolock__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('_fseeki64_nolock');
  late final _fseeki64_nolock__ffilocal = _fseeki64_nolock__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell_nolock__ffilocal(
      _Stream,
    );
  }

  late final _ftell_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          '_ftell_nolock');
  late final _ftell_nolock__ffilocal =
      _ftell_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ftelli64_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftelli64_nolock__ffilocal(
      _Stream,
    );
  }

  late final _ftelli64_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          '_ftelli64_nolock');
  late final _ftelli64_nolock__ffilocal = _ftelli64_nolock__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite_nolock__ffilocal(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite_nolock__ffilocal(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwrite_nolock__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('_fwrite_nolock');
  late final _fwrite_nolock__ffilocal = _fwrite_nolock__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc_nolock__ffilocal(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc_nolock__ffilocal(
      _Stream,
    );
  }

  late final _getc_nolock__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_getc_nolock');
  late final _getc_nolock__ffilocal =
      _getc_nolock__ffilocalPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putc_nolock__ffilocal(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc_nolock__ffilocal(
      _Character,
      _Stream,
    );
  }

  late final _putc_nolock__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_putc_nolock');
  late final _putc_nolock__ffilocal = _putc_nolock__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int ungetc_nolock__ffilocal(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc_nolock__ffilocal(
      _Character,
      _Stream,
    );
  }

  late final _ungetc_nolock__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_ungetc_nolock');
  late final _ungetc_nolock__ffilocal = _ungetc_nolock__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int32> p__commode___ffilocal() {
    return _p__commode___ffilocal();
  }

  late final _p__commode___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__p__commode');
  late final _p__commode___ffilocal =
      _p__commode___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int stdio_common_vfprintf___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfprintf___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfprintf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfprintf');
  late final _stdio_common_vfprintf___ffilocal =
      _stdio_common_vfprintf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vfprintf_s___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfprintf_s___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfprintf_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfprintf_s');
  late final _stdio_common_vfprintf_s___ffilocal =
      _stdio_common_vfprintf_s___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vfprintf_p___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vfprintf_p___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vfprintf_p___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfprintf_p');
  late final _stdio_common_vfprintf_p___ffilocal =
      _stdio_common_vfprintf_p___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int set_printf_count_output__ffilocal(
    int _Value,
  ) {
    return _set_printf_count_output__ffilocal(
      _Value,
    );
  }

  late final _set_printf_count_output__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          '_set_printf_count_output');
  late final _set_printf_count_output__ffilocal =
      _set_printf_count_output__ffilocalPtr.asFunction<int Function(int)>();

  int get_printf_count_output__ffilocal() {
    return _get_printf_count_output__ffilocal();
  }

  late final _get_printf_count_output__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '_get_printf_count_output');
  late final _get_printf_count_output__ffilocal =
      _get_printf_count_output__ffilocalPtr.asFunction<int Function()>();

  int stdio_common_vfscanf___ffilocal(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _Arglist,
  ) {
    return _stdio_common_vfscanf___ffilocal(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final _stdio_common_vfscanf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vfscanf');
  late final _stdio_common_vfscanf___ffilocal =
      _stdio_common_vfscanf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vsprintf___ffilocal(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vsprintf___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vsprintf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vsprintf');
  late final _stdio_common_vsprintf___ffilocal =
      _stdio_common_vsprintf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vsprintf_s___ffilocal(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vsprintf_s___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vsprintf_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vsprintf_s');
  late final _stdio_common_vsprintf_s___ffilocal =
      _stdio_common_vsprintf_s___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vsnprintf_s___ffilocal(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vsnprintf_s___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vsnprintf_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vsnprintf_s');
  late final _stdio_common_vsnprintf_s___ffilocal =
      _stdio_common_vsnprintf_s___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, int,
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal, va_list)>();

  int stdio_common_vsprintf_p___ffilocal(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vsprintf_p___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vsprintf_p___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vsprintf_p');
  late final _stdio_common_vsprintf_p___ffilocal =
      _stdio_common_vsprintf_p___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  int stdio_common_vsscanf___ffilocal(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    locale_t__ffilocal _Locale,
    va_list _ArgList,
  ) {
    return _stdio_common_vsscanf___ffilocal(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final _stdio_common_vsscanf___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal,
              va_list)>>('__stdio_common_vsscanf');
  late final _stdio_common_vsscanf___ffilocal =
      _stdio_common_vsscanf___ffilocalPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal, va_list)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> _Directory,
    ffi.Pointer<ffi.Int8> _FilePrefix,
  ) {
    return _tempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fcloseall() {
    return _fcloseall();
  }

  late final _fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('fcloseall');
  late final _fcloseall = _fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Int8> _Format,
  ) {
    return _fdopen(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  int fgetchar() {
    return _fgetchar();
  }

  late final _fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('fgetchar');
  late final _fgetchar = _fgetcharPtr.asFunction<int Function()>();

  int fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno(
      _Stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int flushall() {
    return _flushall();
  }

  late final _flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('flushall');
  late final _flushall = _flushallPtr.asFunction<int Function()>();

  int fputchar(
    int _Ch,
  ) {
    return _fputchar(
      _Ch,
    );
  }

  late final _fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('fputchar');
  late final _fputchar = _fputcharPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw(
      _Stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int _Ch,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw(
      _Ch,
      _Stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int rmtmp() {
    return _rmtmp();
  }

  late final _rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rmtmp');
  late final _rmtmp = _rmtmpPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> calloc_base__ffilocal(
    int _Count,
    int _Size,
  ) {
    return _calloc_base__ffilocal(
      _Count,
      _Size,
    );
  }

  late final _calloc_base__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      '_calloc_base');
  late final _calloc_base__ffilocal = _calloc_base__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return _calloc(
      _Count,
      _Size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int callnewh__ffilocal(
    int _Size,
  ) {
    return _callnewh__ffilocal(
      _Size,
    );
  }

  late final _callnewh__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(size_t)>>('_callnewh');
  late final _callnewh__ffilocal =
      _callnewh__ffilocalPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> expand__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _expand__ffilocal(
      _Block,
      _Size,
    );
  }

  late final _expand__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('_expand');
  late final _expand__ffilocal = _expand__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free_base__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free_base__ffilocal(
      _Block,
    );
  }

  late final _free_base__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_free_base');
  late final _free_base__ffilocal = _free_base__ffilocalPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free(
      _Block,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> malloc_base__ffilocal(
    int _Size,
  ) {
    return _malloc_base__ffilocal(
      _Size,
    );
  }

  late final _malloc_base__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          '_malloc_base');
  late final _malloc_base__ffilocal = _malloc_base__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return _malloc(
      _Size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int msize_base__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _msize_base__ffilocal(
      _Block,
    );
  }

  late final _msize_base__ffilocalPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Void>)>>(
          '_msize_base');
  late final _msize_base__ffilocal = _msize_base__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int msize__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _msize__ffilocal(
      _Block,
    );
  }

  late final _msize__ffilocalPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Void>)>>(
          '_msize');
  late final _msize__ffilocal =
      _msize__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc_base__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc_base__ffilocal(
      _Block,
      _Size,
    );
  }

  late final _realloc_base__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('_realloc_base');
  late final _realloc_base__ffilocal = _realloc_base__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc(
      _Block,
      _Size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> recalloc_base__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return _recalloc_base__ffilocal(
      _Block,
      _Count,
      _Size,
    );
  }

  late final _recalloc_base__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('_recalloc_base');
  late final _recalloc_base__ffilocal = _recalloc_base__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> recalloc__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return _recalloc__ffilocal(
      _Block,
      _Count,
      _Size,
    );
  }

  late final _recalloc__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('_recalloc');
  late final _recalloc__ffilocal = _recalloc__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void aligned_free__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _aligned_free__ffilocal(
      _Block,
    );
  }

  late final _aligned_free__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_aligned_free');
  late final _aligned_free__ffilocal = _aligned_free__ffilocalPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> aligned_malloc__ffilocal(
    int _Size,
    int _Alignment,
  ) {
    return _aligned_malloc__ffilocal(
      _Size,
      _Alignment,
    );
  }

  late final _aligned_malloc__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      '_aligned_malloc');
  late final _aligned_malloc__ffilocal = _aligned_malloc__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> aligned_offset_malloc__ffilocal(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return _aligned_offset_malloc__ffilocal(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final _aligned_offset_malloc__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              size_t, size_t, size_t)>>('_aligned_offset_malloc');
  late final _aligned_offset_malloc__ffilocal =
      _aligned_offset_malloc__ffilocalPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int aligned_msize__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return _aligned_msize__ffilocal(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  late final _aligned_msize__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('_aligned_msize');
  late final _aligned_msize__ffilocal = _aligned_msize__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_offset_realloc__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return _aligned_offset_realloc__ffilocal(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final _aligned_offset_realloc__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              size_t)>>('_aligned_offset_realloc');
  late final _aligned_offset_realloc__ffilocal =
      _aligned_offset_realloc__ffilocalPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> aligned_offset_recalloc__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return _aligned_offset_recalloc__ffilocal(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final _aligned_offset_recalloc__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              size_t, size_t)>>('_aligned_offset_recalloc');
  late final _aligned_offset_recalloc__ffilocal =
      _aligned_offset_recalloc__ffilocalPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ffi.Void> aligned_realloc__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return _aligned_realloc__ffilocal(
      _Block,
      _Size,
      _Alignment,
    );
  }

  late final _aligned_realloc__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('_aligned_realloc');
  late final _aligned_realloc__ffilocal =
      _aligned_realloc__ffilocalPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_recalloc__ffilocal(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return _aligned_recalloc__ffilocal(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  late final _aligned_recalloc__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              size_t)>>('_aligned_recalloc');
  late final _aligned_recalloc__ffilocal =
      _aligned_recalloc__ffilocalPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Int32> errno__ffilocal() {
    return _errno__ffilocal();
  }

  late final _errno__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>('_errno');
  late final _errno__ffilocal =
      _errno__ffilocalPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int set_errno__ffilocal(
    int _Value,
  ) {
    return _set_errno__ffilocal(
      _Value,
    );
  }

  late final _set_errno__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int32)>>('_set_errno');
  late final _set_errno__ffilocal =
      _set_errno__ffilocalPtr.asFunction<int Function(int)>();

  int get_errno__ffilocal(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return _get_errno__ffilocal(
      _Value,
    );
  }

  late final _get_errno__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int32>)>>(
          '_get_errno');
  late final _get_errno__ffilocal = _get_errno__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  int threadid___ffilocal() {
    return _threadid___ffilocal();
  }

  late final _threadid___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('__threadid');
  late final _threadid___ffilocal =
      _threadid___ffilocalPtr.asFunction<int Function()>();

  int threadhandle___ffilocal() {
    return _threadhandle___ffilocal();
  }

  late final _threadhandle___ffilocalPtr =
      _lookup<ffi.NativeFunction<uintptr_t Function()>>('__threadhandle');
  late final _threadhandle___ffilocal =
      _threadhandle___ffilocalPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    CoreCrtSecureSearchSortCompareFunction__ffilocal _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _bsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _bsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              CoreCrtSecureSearchSortCompareFunction__ffilocal,
              ffi.Pointer<ffi.Void>)>>('bsearch_s');
  late final _bsearch_s = _bsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          CoreCrtSecureSearchSortCompareFunction__ffilocal,
          ffi.Pointer<ffi.Void>)>();

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    CoreCrtSecureSearchSortCompareFunction__ffilocal _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _qsort_s(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _qsort_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              CoreCrtSecureSearchSortCompareFunction__ffilocal,
              ffi.Pointer<ffi.Void>)>>('qsort_s');
  late final _qsort_s = _qsort_sPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          CoreCrtSecureSearchSortCompareFunction__ffilocal,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    CoreCrtNonSecureSearchSortCompareFunction__ffilocal _CompareFunction,
  ) {
    return _bsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>();

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    CoreCrtNonSecureSearchSortCompareFunction__ffilocal _CompareFunction,
  ) {
    return _qsort(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>();

  ffi.Pointer<ffi.Void> lfind_s__ffilocal(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    CoreCrtSecureSearchSortCompareFunction__ffilocal _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _lfind_s__ffilocal(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _lfind_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              CoreCrtSecureSearchSortCompareFunction__ffilocal,
              ffi.Pointer<ffi.Void>)>>('_lfind_s');
  late final _lfind_s__ffilocal = _lfind_s__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Uint32>,
          int,
          CoreCrtSecureSearchSortCompareFunction__ffilocal,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> lfind__ffilocal(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    CoreCrtNonSecureSearchSortCompareFunction__ffilocal _CompareFunction,
  ) {
    return _lfind__ffilocal(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfind__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32,
              CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>>('_lfind');
  late final _lfind__ffilocal = _lfind__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Uint32>,
          int,
          CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>();

  ffi.Pointer<ffi.Void> lsearch_s__ffilocal(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    CoreCrtSecureSearchSortCompareFunction__ffilocal _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _lsearch_s__ffilocal(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _lsearch_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              CoreCrtSecureSearchSortCompareFunction__ffilocal,
              ffi.Pointer<ffi.Void>)>>('_lsearch_s');
  late final _lsearch_s__ffilocal = _lsearch_s__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Uint32>,
          int,
          CoreCrtSecureSearchSortCompareFunction__ffilocal,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> lsearch__ffilocal(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    CoreCrtNonSecureSearchSortCompareFunction__ffilocal _CompareFunction,
  ) {
    return _lsearch__ffilocal(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearch__ffilocalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Uint32,
                  CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>>(
      '_lsearch');
  late final _lsearch__ffilocal = _lsearch__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Uint32>,
          int,
          CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>();

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    CoreCrtNonSecureSearchSortCompareFunction__ffilocal _CompareFunction,
  ) {
    return _lfind(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32,
              CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>>('lfind');
  late final _lfind = _lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Uint32>,
          int,
          CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>();

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.Uint32> _NumOfElements,
    int _SizeOfElements,
    CoreCrtNonSecureSearchSortCompareFunction__ffilocal _CompareFunction,
  ) {
    return _lsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32,
              CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>>('lsearch');
  late final _lsearch = _lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Uint32>,
          int,
          CoreCrtNonSecureSearchSortCompareFunction__ffilocal)>();

  int itow_s__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _itow_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _itow_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int32, ffi.Pointer<wchar_t>, size_t, ffi.Int32)>>('_itow_s');
  late final _itow_s__ffilocal = _itow_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> itow__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return _itow__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itow__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int32, ffi.Pointer<wchar_t>, ffi.Int32)>>('_itow');
  late final _itow__ffilocal = _itow__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int ltow_s__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _ltow_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _ltow_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int64, ffi.Pointer<wchar_t>, size_t, ffi.Int32)>>('_ltow_s');
  late final _ltow_s__ffilocal = _ltow_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> ltow__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return _ltow__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltow__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_ltow');
  late final _ltow__ffilocal = _ltow__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int ultow_s__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _ultow_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _ultow_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Uint64, ffi.Pointer<wchar_t>, size_t,
              ffi.Int32)>>('_ultow_s');
  late final _ultow_s__ffilocal = _ultow_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> ultow__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return _ultow__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultow__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Uint64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_ultow');
  late final _ultow__ffilocal = _ultow__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  double wcstod(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  double wcstod_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstod_l__ffilocal(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final _wcstod_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              locale_t__ffilocal)>>('_wcstod_l');
  late final _wcstod_l__ffilocal = _wcstod_l__ffilocalPtr.asFunction<
      double Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          locale_t__ffilocal)>();

  int wcstol(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int wcstol_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstol_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _wcstol_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_wcstol_l');
  late final _wcstol_l__ffilocal = _wcstol_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          locale_t__ffilocal)>();

  int wcstoll(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int wcstoll_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstoll_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _wcstoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_wcstoll_l');
  late final _wcstoll_l__ffilocal = _wcstoll_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          locale_t__ffilocal)>();

  int wcstoul(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int wcstoul_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstoul_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _wcstoul_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_wcstoul_l');
  late final _wcstoul_l__ffilocal = _wcstoul_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          locale_t__ffilocal)>();

  int wcstoull(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int wcstoull_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstoull_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _wcstoull_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_wcstoull_l');
  late final _wcstoull_l__ffilocal = _wcstoull_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          locale_t__ffilocal)>();

  double wcstof(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  double wcstof_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstof_l__ffilocal(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final _wcstof_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              locale_t__ffilocal)>>('_wcstof_l');
  late final _wcstof_l__ffilocal = _wcstof_l__ffilocalPtr.asFunction<
      double Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>,
          locale_t__ffilocal)>();

  double wtof__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wtof__ffilocal(
      _String,
    );
  }

  late final _wtof__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<wchar_t>)>>(
          '_wtof');
  late final _wtof__ffilocal =
      _wtof__ffilocalPtr.asFunction<double Function(ffi.Pointer<wchar_t>)>();

  double wtof_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wtof_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wtof_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wtof_l');
  late final _wtof_l__ffilocal = _wtof_l__ffilocalPtr
      .asFunction<double Function(ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wtoi__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wtoi__ffilocal(
      _String,
    );
  }

  late final _wtoi__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wtoi');
  late final _wtoi__ffilocal =
      _wtoi__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wtoi_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wtoi_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wtoi_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wtoi_l');
  late final _wtoi_l__ffilocal = _wtoi_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wtol__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wtol__ffilocal(
      _String,
    );
  }

  late final _wtol__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<wchar_t>)>>(
          '_wtol');
  late final _wtol__ffilocal =
      _wtol__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wtol_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wtol_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wtol_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wtol_l');
  late final _wtol_l__ffilocal = _wtol_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wtoll__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wtoll__ffilocal(
      _String,
    );
  }

  late final _wtoll__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<wchar_t>)>>(
          '_wtoll');
  late final _wtoll__ffilocal =
      _wtoll__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wtoll_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wtoll_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wtoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wtoll_l');
  late final _wtoll_l__ffilocal = _wtoll_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int i64tow_s__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _i64tow_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _i64tow_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Int64, ffi.Pointer<wchar_t>, size_t,
              ffi.Int32)>>('_i64tow_s');
  late final _i64tow_s__ffilocal = _i64tow_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> i64tow__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return _i64tow__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _i64tow__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Int64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_i64tow');
  late final _i64tow__ffilocal = _i64tow__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int ui64tow_s__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _ui64tow_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _ui64tow_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Uint64, ffi.Pointer<wchar_t>, size_t,
              ffi.Int32)>>('_ui64tow_s');
  late final _ui64tow_s__ffilocal = _ui64tow_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> ui64tow__ffilocal(
    int _Value,
    ffi.Pointer<wchar_t> _Buffer,
    int _Radix,
  ) {
    return _ui64tow__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ui64tow__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Uint64, ffi.Pointer<wchar_t>, ffi.Int32)>>('_ui64tow');
  late final _ui64tow__ffilocal = _ui64tow__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(int, ffi.Pointer<wchar_t>, int)>();

  int wtoi64__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wtoi64__ffilocal(
      _String,
    );
  }

  late final _wtoi64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<wchar_t>)>>(
          '_wtoi64');
  late final _wtoi64__ffilocal =
      _wtoi64__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wtoi64_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wtoi64_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wtoi64_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wtoi64_l');
  late final _wtoi64_l__ffilocal = _wtoi64_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wcstoi64__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoi64__ffilocal(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoi64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('_wcstoi64');
  late final _wcstoi64__ffilocal = _wcstoi64__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int wcstoi64_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstoi64_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _wcstoi64_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_wcstoi64_l');
  late final _wcstoi64_l__ffilocal = _wcstoi64_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          locale_t__ffilocal)>();

  int wcstoui64__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoui64__ffilocal(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoui64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Int32)>>('_wcstoui64');
  late final _wcstoui64__ffilocal = _wcstoui64__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int)>();

  int wcstoui64_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<ffi.Pointer<wchar_t>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstoui64_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _wcstoui64_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_wcstoui64_l');
  late final _wcstoui64_l__ffilocal = _wcstoui64_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Pointer<wchar_t>>, int,
          locale_t__ffilocal)>();

  ffi.Pointer<wchar_t> wfullpath__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<wchar_t> _Path,
    int _BufferCount,
  ) {
    return _wfullpath__ffilocal(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final _wfullpath__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, size_t)>>('_wfullpath');
  late final _wfullpath__ffilocal = _wfullpath__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wmakepath_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Drive,
    ffi.Pointer<wchar_t> _Dir,
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _Ext,
  ) {
    return _wmakepath_s__ffilocal(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final _wmakepath_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wmakepath_s');
  late final _wmakepath_s__ffilocal = _wmakepath_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  void wmakepath__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<wchar_t> _Drive,
    ffi.Pointer<wchar_t> _Dir,
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _Ext,
  ) {
    return _wmakepath__ffilocal(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final _wmakepath__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wmakepath');
  late final _wmakepath__ffilocal = _wmakepath__ffilocalPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  void wsplitpath__ffilocal(
    ffi.Pointer<wchar_t> _FullPath,
    ffi.Pointer<wchar_t> _Drive,
    ffi.Pointer<wchar_t> _Dir,
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _Ext,
  ) {
    return _wsplitpath__ffilocal(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final _wsplitpath__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wsplitpath');
  late final _wsplitpath__ffilocal = _wsplitpath__ffilocalPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wsplitpath_s__ffilocal(
    ffi.Pointer<wchar_t> _FullPath,
    ffi.Pointer<wchar_t> _Drive,
    int _DriveCount,
    ffi.Pointer<wchar_t> _Dir,
    int _DirCount,
    ffi.Pointer<wchar_t> _Filename,
    int _FilenameCount,
    ffi.Pointer<wchar_t> _Ext,
    int _ExtCount,
  ) {
    return _wsplitpath_s__ffilocal(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final _wsplitpath_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t)>>('_wsplitpath_s');
  late final _wsplitpath_s__ffilocal = _wsplitpath_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>,
          int,
          ffi.Pointer<wchar_t>,
          int,
          ffi.Pointer<wchar_t>,
          int,
          ffi.Pointer<wchar_t>,
          int)>();

  int wdupenv_s__ffilocal(
    ffi.Pointer<ffi.Pointer<wchar_t>> _Buffer,
    ffi.Pointer<size_t> _BufferCount,
    ffi.Pointer<wchar_t> _VarName,
  ) {
    return _wdupenv_s__ffilocal(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _wdupenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<wchar_t>>,
              ffi.Pointer<size_t>, ffi.Pointer<wchar_t>)>>('_wdupenv_s');
  late final _wdupenv_s__ffilocal = _wdupenv_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<wchar_t>>, ffi.Pointer<size_t>,
          ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wgetenv__ffilocal(
    ffi.Pointer<wchar_t> _VarName,
  ) {
    return _wgetenv__ffilocal(
      _VarName,
    );
  }

  late final _wgetenv__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wgetenv');
  late final _wgetenv__ffilocal = _wgetenv__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wgetenv_s__ffilocal(
    ffi.Pointer<size_t> _RequiredCount,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _VarName,
  ) {
    return _wgetenv_s__ffilocal(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _wgetenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<wchar_t>)>>('_wgetenv_s');
  late final _wgetenv_s__ffilocal = _wgetenv_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, int,
          ffi.Pointer<wchar_t>)>();

  int wputenv__ffilocal(
    ffi.Pointer<wchar_t> _EnvString,
  ) {
    return _wputenv__ffilocal(
      _EnvString,
    );
  }

  late final _wputenv__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wputenv');
  late final _wputenv__ffilocal =
      _wputenv__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wputenv_s__ffilocal(
    ffi.Pointer<wchar_t> _Name,
    ffi.Pointer<wchar_t> _Value,
  ) {
    return _wputenv_s__ffilocal(
      _Name,
      _Value,
    );
  }

  late final _wputenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wputenv_s');
  late final _wputenv_s__ffilocal = _wputenv_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wsearchenv_s__ffilocal(
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _VarName,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return _wsearchenv_s__ffilocal(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final _wsearchenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, size_t)>>('_wsearchenv_s');
  late final _wsearchenv_s__ffilocal = _wsearchenv_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, int)>();

  void wsearchenv__ffilocal(
    ffi.Pointer<wchar_t> _Filename,
    ffi.Pointer<wchar_t> _VarName,
    ffi.Pointer<wchar_t> _ResultPath,
  ) {
    return _wsearchenv__ffilocal(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final _wsearchenv__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wsearchenv');
  late final _wsearchenv__ffilocal = _wsearchenv__ffilocalPtr.asFunction<
      void Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wsystem__ffilocal(
    ffi.Pointer<wchar_t> _Command,
  ) {
    return _wsystem__ffilocal(
      _Command,
    );
  }

  late final _wsystem__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wsystem');
  late final _wsystem__ffilocal =
      _wsystem__ffilocalPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  void swab__ffilocal(
    ffi.Pointer<ffi.Int8> _Buf1,
    ffi.Pointer<ffi.Int8> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab__ffilocal(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swab__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('_swab');
  late final _swab__ffilocal = _swab__ffilocalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  void exit(
    int _Code,
  ) {
    return _exit(
      _Code,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void exit__ffilocal(
    int _Code,
  ) {
    return _exit__ffilocal(
      _Code,
    );
  }

  late final _exit__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_exit');
  late final _exit__ffilocal =
      _exit__ffilocalPtr.asFunction<void Function(int)>();

  void Exit__ffilocal(
    int _Code,
  ) {
    return _Exit__ffilocal(
      _Code,
    );
  }

  late final _Exit__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final _Exit__ffilocal =
      _Exit__ffilocalPtr.asFunction<void Function(int)>();

  void quick_exit(
    int _Code,
  ) {
    return _quick_exit(
      _Code,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int set_abort_behavior__ffilocal(
    int _Flags,
    int _Mask,
  ) {
    return _set_abort_behavior__ffilocal(
      _Flags,
      _Mask,
    );
  }

  late final _set_abort_behavior__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32, ffi.Uint32)>>(
          '_set_abort_behavior');
  late final _set_abort_behavior__ffilocal =
      _set_abort_behavior__ffilocalPtr.asFunction<int Function(int, int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  onexit_t__ffilocal onexit__ffilocal(
    onexit_t__ffilocal _Func,
  ) {
    return _onexit__ffilocal(
      _Func,
    );
  }

  late final _onexit__ffilocalPtr = _lookup<
          ffi.NativeFunction<onexit_t__ffilocal Function(onexit_t__ffilocal)>>(
      '_onexit');
  late final _onexit__ffilocal = _onexit__ffilocalPtr
      .asFunction<onexit_t__ffilocal Function(onexit_t__ffilocal)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  purecall_handler__ffilocal set_purecall_handler__ffilocal(
    purecall_handler__ffilocal _Handler,
  ) {
    return _set_purecall_handler__ffilocal(
      _Handler,
    );
  }

  late final _set_purecall_handler__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          purecall_handler__ffilocal Function(
              purecall_handler__ffilocal)>>('_set_purecall_handler');
  late final _set_purecall_handler__ffilocal =
      _set_purecall_handler__ffilocalPtr.asFunction<
          purecall_handler__ffilocal Function(purecall_handler__ffilocal)>();

  purecall_handler__ffilocal get_purecall_handler__ffilocal() {
    return _get_purecall_handler__ffilocal();
  }

  late final _get_purecall_handler__ffilocalPtr =
      _lookup<ffi.NativeFunction<purecall_handler__ffilocal Function()>>(
          '_get_purecall_handler');
  late final _get_purecall_handler__ffilocal =
      _get_purecall_handler__ffilocalPtr
          .asFunction<purecall_handler__ffilocal Function()>();

  invalid_parameter_handler__ffilocal set_invalid_parameter_handler__ffilocal(
    invalid_parameter_handler__ffilocal _Handler,
  ) {
    return _set_invalid_parameter_handler__ffilocal(
      _Handler,
    );
  }

  late final _set_invalid_parameter_handler__ffilocalPtr = _lookup<
          ffi.NativeFunction<
              invalid_parameter_handler__ffilocal Function(
                  invalid_parameter_handler__ffilocal)>>(
      '_set_invalid_parameter_handler');
  late final _set_invalid_parameter_handler__ffilocal =
      _set_invalid_parameter_handler__ffilocalPtr.asFunction<
          invalid_parameter_handler__ffilocal Function(
              invalid_parameter_handler__ffilocal)>();

  invalid_parameter_handler__ffilocal
      get_invalid_parameter_handler__ffilocal() {
    return _get_invalid_parameter_handler__ffilocal();
  }

  late final _get_invalid_parameter_handler__ffilocalPtr = _lookup<
          ffi.NativeFunction<invalid_parameter_handler__ffilocal Function()>>(
      '_get_invalid_parameter_handler');
  late final _get_invalid_parameter_handler__ffilocal =
      _get_invalid_parameter_handler__ffilocalPtr
          .asFunction<invalid_parameter_handler__ffilocal Function()>();

  invalid_parameter_handler__ffilocal
      set_thread_local_invalid_parameter_handler__ffilocal(
    invalid_parameter_handler__ffilocal _Handler,
  ) {
    return _set_thread_local_invalid_parameter_handler__ffilocal(
      _Handler,
    );
  }

  late final _set_thread_local_invalid_parameter_handler__ffilocalPtr = _lookup<
          ffi.NativeFunction<
              invalid_parameter_handler__ffilocal Function(
                  invalid_parameter_handler__ffilocal)>>(
      '_set_thread_local_invalid_parameter_handler');
  late final _set_thread_local_invalid_parameter_handler__ffilocal =
      _set_thread_local_invalid_parameter_handler__ffilocalPtr.asFunction<
          invalid_parameter_handler__ffilocal Function(
              invalid_parameter_handler__ffilocal)>();

  invalid_parameter_handler__ffilocal
      get_thread_local_invalid_parameter_handler__ffilocal() {
    return _get_thread_local_invalid_parameter_handler__ffilocal();
  }

  late final _get_thread_local_invalid_parameter_handler__ffilocalPtr = _lookup<
          ffi.NativeFunction<invalid_parameter_handler__ffilocal Function()>>(
      '_get_thread_local_invalid_parameter_handler');
  late final _get_thread_local_invalid_parameter_handler__ffilocal =
      _get_thread_local_invalid_parameter_handler__ffilocalPtr
          .asFunction<invalid_parameter_handler__ffilocal Function()>();

  int set_error_mode__ffilocal(
    int _Mode,
  ) {
    return _set_error_mode__ffilocal(
      _Mode,
    );
  }

  late final _set_error_mode__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          '_set_error_mode');
  late final _set_error_mode__ffilocal =
      _set_error_mode__ffilocalPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Uint64> doserrno___ffilocal() {
    return _doserrno___ffilocal();
  }

  late final _doserrno___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function()>>(
          '__doserrno');
  late final _doserrno___ffilocal =
      _doserrno___ffilocalPtr.asFunction<ffi.Pointer<ffi.Uint64> Function()>();

  int set_doserrno__ffilocal(
    int _Value,
  ) {
    return _set_doserrno__ffilocal(
      _Value,
    );
  }

  late final _set_doserrno__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Uint64)>>(
          '_set_doserrno');
  late final _set_doserrno__ffilocal =
      _set_doserrno__ffilocalPtr.asFunction<int Function(int)>();

  int get_doserrno__ffilocal(
    ffi.Pointer<ffi.Uint64> _Value,
  ) {
    return _get_doserrno__ffilocal(
      _Value,
    );
  }

  late final _get_doserrno__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Uint64>)>>(
          '_get_doserrno');
  late final _get_doserrno__ffilocal = _get_doserrno__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>)>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> sys_errlist___ffilocal() {
    return _sys_errlist___ffilocal();
  }

  late final _sys_errlist___ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Int8>> Function()>>(
      '__sys_errlist');
  late final _sys_errlist___ffilocal = _sys_errlist___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Int8>> Function()>();

  ffi.Pointer<ffi.Int32> sys_nerr___ffilocal() {
    return _sys_nerr___ffilocal();
  }

  late final _sys_nerr___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__sys_nerr');
  late final _sys_nerr___ffilocal =
      _sys_nerr___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> p__pgmptr___ffilocal() {
    return _p__pgmptr___ffilocal();
  }

  late final _p__pgmptr___ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Int8>> Function()>>(
      '__p__pgmptr');
  late final _p__pgmptr___ffilocal = _p__pgmptr___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Int8>> Function()>();

  ffi.Pointer<ffi.Pointer<wchar_t>> p__wpgmptr___ffilocal() {
    return _p__wpgmptr___ffilocal();
  }

  late final _p__wpgmptr___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Pointer<wchar_t>> Function()>>(
          '__p__wpgmptr');
  late final _p__wpgmptr___ffilocal = _p__wpgmptr___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<wchar_t>> Function()>();

  ffi.Pointer<ffi.Int32> p__fmode___ffilocal() {
    return _p__fmode___ffilocal();
  }

  late final _p__fmode___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__p__fmode');
  late final _p__fmode___ffilocal =
      _p__fmode___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int get_pgmptr__ffilocal(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Value,
  ) {
    return _get_pgmptr__ffilocal(
      _Value,
    );
  }

  late final _get_pgmptr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('_get_pgmptr');
  late final _get_pgmptr__ffilocal = _get_pgmptr__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int get_wpgmptr__ffilocal(
    ffi.Pointer<ffi.Pointer<wchar_t>> _Value,
  ) {
    return _get_wpgmptr__ffilocal(
      _Value,
    );
  }

  late final _get_wpgmptr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<wchar_t>>)>>('_get_wpgmptr');
  late final _get_wpgmptr__ffilocal = _get_wpgmptr__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  int set_fmode__ffilocal(
    int _Mode,
  ) {
    return _set_fmode__ffilocal(
      _Mode,
    );
  }

  late final _set_fmode__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int32)>>('_set_fmode');
  late final _set_fmode__ffilocal =
      _set_fmode__ffilocalPtr.asFunction<int Function(int)>();

  int get_fmode__ffilocal(
    ffi.Pointer<ffi.Int32> _PMode,
  ) {
    return _get_fmode__ffilocal(
      _PMode,
    );
  }

  late final _get_fmode__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int32>)>>(
          '_get_fmode');
  late final _get_fmode__ffilocal = _get_fmode__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  int abs(
    int _Number,
  ) {
    return _abs(
      _Number,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _Number,
  ) {
    return _labs(
      _Number,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _Number,
  ) {
    return _llabs(
      _Number,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  int abs64__ffilocal(
    int _Number,
  ) {
    return _abs64__ffilocal(
      _Number,
    );
  }

  late final _abs64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('_abs64');
  late final _abs64__ffilocal =
      _abs64__ffilocalPtr.asFunction<int Function(int)>();

  int byteswap_ushort__ffilocal(
    int _Number,
  ) {
    return _byteswap_ushort__ffilocal(
      _Number,
    );
  }

  late final _byteswap_ushort__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Uint16)>>(
          '_byteswap_ushort');
  late final _byteswap_ushort__ffilocal =
      _byteswap_ushort__ffilocalPtr.asFunction<int Function(int)>();

  int byteswap_ulong__ffilocal(
    int _Number,
  ) {
    return _byteswap_ulong__ffilocal(
      _Number,
    );
  }

  late final _byteswap_ulong__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          '_byteswap_ulong');
  late final _byteswap_ulong__ffilocal =
      _byteswap_ulong__ffilocalPtr.asFunction<int Function(int)>();

  int byteswap_uint64__ffilocal(
    int _Number,
  ) {
    return _byteswap_uint64__ffilocal(
      _Number,
    );
  }

  late final _byteswap_uint64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64)>>(
          '_byteswap_uint64');
  late final _byteswap_uint64__ffilocal =
      _byteswap_uint64__ffilocalPtr.asFunction<int Function(int)>();

  div_t div(
    int _Numerator,
    int _Denominator,
  ) {
    return _div(
      _Numerator,
      _Denominator,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int32, ffi.Int32)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _ldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _lldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int rotl__ffilocal(
    int _Value,
    int _Shift,
  ) {
    return _rotl__ffilocal(
      _Value,
      _Shift,
    );
  }

  late final _rotl__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32, ffi.Int32)>>(
          '_rotl');
  late final _rotl__ffilocal =
      _rotl__ffilocalPtr.asFunction<int Function(int, int)>();

  int lrotl__ffilocal(
    int _Value,
    int _Shift,
  ) {
    return _lrotl__ffilocal(
      _Value,
      _Shift,
    );
  }

  late final _lrotl__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Int32)>>(
          '_lrotl');
  late final _lrotl__ffilocal =
      _lrotl__ffilocalPtr.asFunction<int Function(int, int)>();

  int rotl64__ffilocal(
    int _Value,
    int _Shift,
  ) {
    return _rotl64__ffilocal(
      _Value,
      _Shift,
    );
  }

  late final _rotl64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Int32)>>(
          '_rotl64');
  late final _rotl64__ffilocal =
      _rotl64__ffilocalPtr.asFunction<int Function(int, int)>();

  int rotr__ffilocal(
    int _Value,
    int _Shift,
  ) {
    return _rotr__ffilocal(
      _Value,
      _Shift,
    );
  }

  late final _rotr__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32, ffi.Int32)>>(
          '_rotr');
  late final _rotr__ffilocal =
      _rotr__ffilocalPtr.asFunction<int Function(int, int)>();

  int lrotr__ffilocal(
    int _Value,
    int _Shift,
  ) {
    return _lrotr__ffilocal(
      _Value,
      _Shift,
    );
  }

  late final _lrotr__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Int32)>>(
          '_lrotr');
  late final _lrotr__ffilocal =
      _lrotr__ffilocalPtr.asFunction<int Function(int, int)>();

  int rotr64__ffilocal(
    int _Value,
    int _Shift,
  ) {
    return _rotr64__ffilocal(
      _Value,
      _Shift,
    );
  }

  late final _rotr64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Int32)>>(
          '_rotr64');
  late final _rotr64__ffilocal =
      _rotr64__ffilocalPtr.asFunction<int Function(int, int)>();

  void srand(
    int _Seed,
  ) {
    return _srand(
      _Seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoi(
      _String,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atol(
      _String,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoll(
      _String,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoi64__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoi64__ffilocal(
      _String,
    );
  }

  late final _atoi64__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          '_atoi64');
  late final _atoi64__ffilocal =
      _atoi64__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double atof_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atof_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _atof_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atof_l');
  late final _atof_l__ffilocal = _atof_l__ffilocalPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int atoi_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atoi_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _atoi_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atoi_l');
  late final _atoi_l__ffilocal = _atoi_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int atol_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atol_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _atol_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atol_l');
  late final _atol_l__ffilocal = _atol_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int atoll_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atoll_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _atoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atoll_l');
  late final _atoll_l__ffilocal = _atoll_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int atoi64_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atoi64_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _atoi64_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atoi64_l');
  late final _atoi64_l__ffilocal = _atoi64_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int atoflt__ffilocal(
    ffi.Pointer<CRT_FLOAT__ffilocal> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoflt__ffilocal(
      _Result,
      _String,
    );
  }

  late final _atoflt__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CRT_FLOAT__ffilocal>,
              ffi.Pointer<ffi.Int8>)>>('_atoflt');
  late final _atoflt__ffilocal = _atoflt__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<CRT_FLOAT__ffilocal>, ffi.Pointer<ffi.Int8>)>();

  int atodbl__ffilocal(
    ffi.Pointer<CRT_DOUBLE__ffilocal> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atodbl__ffilocal(
      _Result,
      _String,
    );
  }

  late final _atodbl__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CRT_DOUBLE__ffilocal>,
              ffi.Pointer<ffi.Int8>)>>('_atodbl');
  late final _atodbl__ffilocal = _atodbl__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<CRT_DOUBLE__ffilocal>, ffi.Pointer<ffi.Int8>)>();

  int atoldbl__ffilocal(
    ffi.Pointer<LDOUBLE__ffilocal> _Result,
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _atoldbl__ffilocal(
      _Result,
      _String,
    );
  }

  late final _atoldbl__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LDOUBLE__ffilocal>,
              ffi.Pointer<ffi.Int8>)>>('_atoldbl');
  late final _atoldbl__ffilocal = _atoldbl__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<LDOUBLE__ffilocal>, ffi.Pointer<ffi.Int8>)>();

  int atoflt_l__ffilocal(
    ffi.Pointer<CRT_FLOAT__ffilocal> _Result,
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atoflt_l__ffilocal(
      _Result,
      _String,
      _Locale,
    );
  }

  late final _atoflt_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CRT_FLOAT__ffilocal>,
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atoflt_l');
  late final _atoflt_l__ffilocal = _atoflt_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<CRT_FLOAT__ffilocal>, ffi.Pointer<ffi.Int8>,
          locale_t__ffilocal)>();

  int atodbl_l__ffilocal(
    ffi.Pointer<CRT_DOUBLE__ffilocal> _Result,
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atodbl_l__ffilocal(
      _Result,
      _String,
      _Locale,
    );
  }

  late final _atodbl_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CRT_DOUBLE__ffilocal>,
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atodbl_l');
  late final _atodbl_l__ffilocal = _atodbl_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<CRT_DOUBLE__ffilocal>, ffi.Pointer<ffi.Int8>,
          locale_t__ffilocal)>();

  int atoldbl_l__ffilocal(
    ffi.Pointer<LDOUBLE__ffilocal> _Result,
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _atoldbl_l__ffilocal(
      _Result,
      _String,
      _Locale,
    );
  }

  late final _atoldbl_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LDOUBLE__ffilocal>,
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_atoldbl_l');
  late final _atoldbl_l__ffilocal = _atoldbl_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<LDOUBLE__ffilocal>, ffi.Pointer<ffi.Int8>,
          locale_t__ffilocal)>();

  double strtof(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ) {
    return _strtof(
      _String,
      _EndPtr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    locale_t__ffilocal _Locale,
  ) {
    return _strtof_l__ffilocal(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final _strtof_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              locale_t__ffilocal)>>('_strtof_l');
  late final _strtof_l__ffilocal = _strtof_l__ffilocalPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          locale_t__ffilocal)>();

  double strtod(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
  ) {
    return _strtod(
      _String,
      _EndPtr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtod_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    locale_t__ffilocal _Locale,
  ) {
    return _strtod_l__ffilocal(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final _strtod_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              locale_t__ffilocal)>>('_strtod_l');
  late final _strtod_l__ffilocal = _strtod_l__ffilocalPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          locale_t__ffilocal)>();

  int strtol(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtol_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _strtol_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _strtol_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_strtol_l');
  late final _strtol_l__ffilocal = _strtol_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, locale_t__ffilocal)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _strtoll_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _strtoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_strtoll_l');
  late final _strtoll_l__ffilocal = _strtoll_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, locale_t__ffilocal)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _strtoul_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _strtoul_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_strtoul_l');
  late final _strtoul_l__ffilocal = _strtoul_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, locale_t__ffilocal)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _strtoull_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _strtoull_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_strtoull_l');
  late final _strtoull_l__ffilocal = _strtoull_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, locale_t__ffilocal)>();

  int strtoi64__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoi64__ffilocal(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoi64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('_strtoi64');
  late final _strtoi64__ffilocal = _strtoi64__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoi64_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _strtoi64_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _strtoi64_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_strtoi64_l');
  late final _strtoi64_l__ffilocal = _strtoi64_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, locale_t__ffilocal)>();

  int strtoui64__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
  ) {
    return _strtoui64__ffilocal(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoui64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('_strtoui64');
  late final _strtoui64__ffilocal = _strtoui64__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoui64_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _EndPtr,
    int _Radix,
    locale_t__ffilocal _Locale,
  ) {
    return _strtoui64_l__ffilocal(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final _strtoui64_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              locale_t__ffilocal)>>('_strtoui64_l');
  late final _strtoui64_l__ffilocal = _strtoui64_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, locale_t__ffilocal)>();

  int itoa_s__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _itoa_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _itoa_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, size_t, ffi.Int32)>>('_itoa_s');
  late final _itoa_s__ffilocal = _itoa_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> itoa__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _itoa__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoa__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_itoa');
  late final _itoa__ffilocal = _itoa__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int ltoa_s__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _ltoa_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _ltoa_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int64, ffi.Pointer<ffi.Int8>, size_t, ffi.Int32)>>('_ltoa_s');
  late final _ltoa_s__ffilocal = _ltoa_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> ltoa__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ltoa__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoa__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int64, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_ltoa');
  late final _ltoa__ffilocal = _ltoa__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int ultoa_s__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _ultoa_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _ultoa_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Uint64, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Int32)>>('_ultoa_s');
  late final _ultoa_s__ffilocal = _ultoa_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> ultoa__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ultoa__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoa__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint64, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_ultoa');
  late final _ultoa__ffilocal = _ultoa__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int i64toa_s__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _i64toa_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _i64toa_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Int64, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Int32)>>('_i64toa_s');
  late final _i64toa_s__ffilocal = _i64toa_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> i64toa__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _i64toa__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _i64toa__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int64, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_i64toa');
  late final _i64toa__ffilocal = _i64toa__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int ui64toa_s__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return _ui64toa_s__ffilocal(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final _ui64toa_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Uint64, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Int32)>>('_ui64toa_s');
  late final _ui64toa_s__ffilocal = _ui64toa_s__ffilocalPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> ui64toa__ffilocal(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ui64toa__ffilocal(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ui64toa__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint64, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_ui64toa');
  late final _ui64toa__ffilocal = _ui64toa__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int ecvt_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _ecvt_s__ffilocal(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvt_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('_ecvt_s');
  late final _ecvt_s__ffilocal = _ecvt_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, double, int,
          ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> ecvt__ffilocal(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _ecvt__ffilocal(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvt__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('_ecvt');
  late final _ecvt__ffilocal = _ecvt__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int fcvt_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _fcvt_s__ffilocal(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvt_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('_fcvt_s');
  late final _fcvt_s__ffilocal = _fcvt_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, double, int,
          ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> fcvt__ffilocal(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _fcvt__ffilocal(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvt__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('_fcvt');
  late final _fcvt__ffilocal = _fcvt__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int gcvt_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return _gcvt_s__ffilocal(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  late final _gcvt_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Double,
              ffi.Int32)>>('_gcvt_s');
  late final _gcvt_s__ffilocal = _gcvt_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, double, int)>();

  ffi.Pointer<ffi.Int8> gcvt__ffilocal(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _gcvt__ffilocal(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  late final _gcvt__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('_gcvt');
  late final _gcvt__ffilocal = _gcvt__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int mb_cur_max_func____ffilocal() {
    return _mb_cur_max_func____ffilocal();
  }

  late final _mb_cur_max_func____ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('___mb_cur_max_func');
  late final _mb_cur_max_func____ffilocal =
      _mb_cur_max_func____ffilocalPtr.asFunction<int Function()>();

  int mb_cur_max_l_func____ffilocal(
    locale_t__ffilocal _Locale,
  ) {
    return _mb_cur_max_l_func____ffilocal(
      _Locale,
    );
  }

  late final _mb_cur_max_l_func____ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(locale_t__ffilocal)>>(
          '___mb_cur_max_l_func');
  late final _mb_cur_max_l_func____ffilocal = _mb_cur_max_l_func____ffilocalPtr
      .asFunction<int Function(locale_t__ffilocal)>();

  int mblen(
    ffi.Pointer<ffi.Int8> _Ch,
    int _MaxCount,
  ) {
    return _mblen(
      _Ch,
      _MaxCount,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mblen_l__ffilocal(
    ffi.Pointer<ffi.Int8> _Ch,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _mblen_l__ffilocal(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  late final _mblen_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, size_t, locale_t__ffilocal)>>('_mblen_l');
  late final _mblen_l__ffilocal = _mblen_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, locale_t__ffilocal)>();

  int mbstrlen__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _mbstrlen__ffilocal(
      _String,
    );
  }

  late final _mbstrlen__ffilocalPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>)>>(
          '_mbstrlen');
  late final _mbstrlen__ffilocal =
      _mbstrlen__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mbstrlen_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _mbstrlen_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _mbstrlen_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_mbstrlen_l');
  late final _mbstrlen_l__ffilocal = _mbstrlen_l__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int mbstrnlen__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return _mbstrnlen__ffilocal(
      _String,
      _MaxCount,
    );
  }

  late final _mbstrnlen__ffilocalPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      '_mbstrnlen');
  late final _mbstrnlen__ffilocal = _mbstrnlen__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstrnlen_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _mbstrnlen_l__ffilocal(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  late final _mbstrnlen_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              locale_t__ffilocal)>>('_mbstrnlen_l');
  late final _mbstrnlen_l__ffilocal = _mbstrnlen_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, locale_t__ffilocal)>();

  int mbtowc(
    ffi.Pointer<wchar_t> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return _mbtowc(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc_l__ffilocal(
    ffi.Pointer<wchar_t> _DstCh,
    ffi.Pointer<ffi.Int8> _SrcCh,
    int _SrcSizeInBytes,
    locale_t__ffilocal _Locale,
  ) {
    return _mbtowc_l__ffilocal(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  late final _mbtowc_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>,
              size_t, locale_t__ffilocal)>>('_mbtowc_l');
  late final _mbtowc_l__ffilocal = _mbtowc_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int,
          locale_t__ffilocal)>();

  int mbstowcs_s(
    ffi.Pointer<size_t> _PtNumOfCharConverted,
    ffi.Pointer<wchar_t> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Int8> _SrcBuf,
    int _MaxCount,
  ) {
    return _mbstowcs_s(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  late final _mbstowcs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<ffi.Int8>, size_t)>>('mbstowcs_s');
  late final _mbstowcs_s = _mbstowcs_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, int,
          ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<wchar_t> _Dest,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _mbstowcs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>,
              size_t)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs_s_l__ffilocal(
    ffi.Pointer<size_t> _PtNumOfCharConverted,
    ffi.Pointer<wchar_t> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Int8> _SrcBuf,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _mbstowcs_s_l__ffilocal(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  late final _mbstowcs_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              locale_t__ffilocal)>>('_mbstowcs_s_l');
  late final _mbstowcs_s_l__ffilocal = _mbstowcs_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<wchar_t>, int,
          ffi.Pointer<ffi.Int8>, int, locale_t__ffilocal)>();

  int mbstowcs_l__ffilocal(
    ffi.Pointer<wchar_t> _Dest,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _mbstowcs_l__ffilocal(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final _mbstowcs_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t,
              locale_t__ffilocal)>>('_mbstowcs_l');
  late final _mbstowcs_l__ffilocal = _mbstowcs_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int,
          locale_t__ffilocal)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> _MbCh,
    int _WCh,
  ) {
    return _wctomb(
      _MbCh,
      _WCh,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, wchar_t)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int wctomb_l__ffilocal(
    ffi.Pointer<ffi.Int8> _MbCh,
    int _WCh,
    locale_t__ffilocal _Locale,
  ) {
    return _wctomb_l__ffilocal(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  late final _wctomb_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, wchar_t,
              locale_t__ffilocal)>>('_wctomb_l');
  late final _wctomb_l__ffilocal = _wctomb_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, locale_t__ffilocal)>();

  int wctomb_s(
    ffi.Pointer<ffi.Int32> _SizeConverted,
    ffi.Pointer<ffi.Int8> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return _wctomb_s(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  late final _wctomb_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>,
              rsize_t, wchar_t)>>('wctomb_s');
  late final _wctomb_s = _wctomb_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>, int, int)>();

  int wctomb_s_l__ffilocal(
    ffi.Pointer<ffi.Int32> _SizeConverted,
    ffi.Pointer<ffi.Int8> _MbCh,
    int _SizeInBytes,
    int _WCh,
    locale_t__ffilocal _Locale,
  ) {
    return _wctomb_s_l__ffilocal(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  late final _wctomb_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>,
              size_t, wchar_t, locale_t__ffilocal)>>('_wctomb_s_l');
  late final _wctomb_s_l__ffilocal = _wctomb_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>, int, int,
          locale_t__ffilocal)>();

  int wcstombs_s(
    ffi.Pointer<size_t> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Int8> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<wchar_t> _Src,
    int _MaxCountInBytes,
  ) {
    return _wcstombs_s(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  late final _wcstombs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<wchar_t>, size_t)>>('wcstombs_s');
  late final _wcstombs_s = _wcstombs_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<wchar_t>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcstombs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>,
              size_t)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, int)>();

  int wcstombs_s_l__ffilocal(
    ffi.Pointer<size_t> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Int8> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<wchar_t> _Src,
    int _MaxCountInBytes,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstombs_s_l__ffilocal(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  late final _wcstombs_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<wchar_t>,
              size_t,
              locale_t__ffilocal)>>('_wcstombs_s_l');
  late final _wcstombs_s_l__ffilocal = _wcstombs_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<wchar_t>, int, locale_t__ffilocal)>();

  int wcstombs_l__ffilocal(
    ffi.Pointer<ffi.Int8> _Dest,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _wcstombs_l__ffilocal(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final _wcstombs_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcstombs_l');
  late final _wcstombs_l__ffilocal = _wcstombs_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, int,
          locale_t__ffilocal)>();

  ffi.Pointer<ffi.Int8> fullpath__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int8> _Path,
    int _BufferCount,
  ) {
    return _fullpath__ffilocal(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final _fullpath__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('_fullpath');
  late final _fullpath__ffilocal = _fullpath__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int makepath_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return _makepath_s__ffilocal(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final _makepath_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('_makepath_s');
  late final _makepath_s__ffilocal = _makepath_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void makepath__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return _makepath__ffilocal(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final _makepath__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('_makepath');
  late final _makepath__ffilocal = _makepath__ffilocalPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void splitpath__ffilocal(
    ffi.Pointer<ffi.Int8> _FullPath,
    ffi.Pointer<ffi.Int8> _Drive,
    ffi.Pointer<ffi.Int8> _Dir,
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _Ext,
  ) {
    return _splitpath__ffilocal(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final _splitpath__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('_splitpath');
  late final _splitpath__ffilocal = _splitpath__ffilocalPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int splitpath_s__ffilocal(
    ffi.Pointer<ffi.Int8> _FullPath,
    ffi.Pointer<ffi.Int8> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Int8> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Int8> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Int8> _Ext,
    int _ExtCount,
  ) {
    return _splitpath_s__ffilocal(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final _splitpath_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('_splitpath_s');
  late final _splitpath_s__ffilocal = _splitpath_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          int)>();

  int getenv_s(
    ffi.Pointer<size_t> _RequiredCount,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return _getenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _getenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, rsize_t,
              ffi.Pointer<ffi.Int8>)>>('getenv_s');
  late final _getenv_s = _getenv_sPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int32> p___argc___ffilocal() {
    return _p___argc___ffilocal();
  }

  late final _p___argc___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__p___argc');
  late final _p___argc___ffilocal =
      _p___argc___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> p___argv___ffilocal() {
    return _p___argv___ffilocal();
  }

  late final _p___argv___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
              Function()>>('__p___argv');
  late final _p___argv___ffilocal = _p___argv___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<wchar_t>>> p___wargv___ffilocal() {
    return _p___wargv___ffilocal();
  }

  late final _p___wargv___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<wchar_t>>>
              Function()>>('__p___wargv');
  late final _p___wargv___ffilocal = _p___wargv___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<wchar_t>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> p__environ___ffilocal() {
    return _p__environ___ffilocal();
  }

  late final _p__environ___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
              Function()>>('__p__environ');
  late final _p__environ___ffilocal = _p__environ___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<wchar_t>>> p__wenviron___ffilocal() {
    return _p__wenviron___ffilocal();
  }

  late final _p__wenviron___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<wchar_t>>>
              Function()>>('__p__wenviron');
  late final _p__wenviron___ffilocal = _p__wenviron___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<wchar_t>>> Function()>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return _getenv(
      _VarName,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int dupenv_s__ffilocal(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Buffer,
    ffi.Pointer<size_t> _BufferCount,
    ffi.Pointer<ffi.Int8> _VarName,
  ) {
    return _dupenv_s__ffilocal(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _dupenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>)>>('_dupenv_s');
  late final _dupenv_s__ffilocal = _dupenv_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>,
          ffi.Pointer<ffi.Int8>)>();

  int system(
    ffi.Pointer<ffi.Int8> _Command,
  ) {
    return _system(
      _Command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int putenv__ffilocal(
    ffi.Pointer<ffi.Int8> _EnvString,
  ) {
    return _putenv__ffilocal(
      _EnvString,
    );
  }

  late final _putenv__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          '_putenv');
  late final _putenv__ffilocal =
      _putenv__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int putenv_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Name,
    ffi.Pointer<ffi.Int8> _Value,
  ) {
    return _putenv_s__ffilocal(
      _Name,
      _Value,
    );
  }

  late final _putenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_putenv_s');
  late final _putenv_s__ffilocal = _putenv_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int searchenv_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _VarName,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
  ) {
    return _searchenv_s__ffilocal(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final _searchenv_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('_searchenv_s');
  late final _searchenv_s__ffilocal = _searchenv_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, int)>();

  void searchenv__ffilocal(
    ffi.Pointer<ffi.Int8> _Filename,
    ffi.Pointer<ffi.Int8> _VarName,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _searchenv__ffilocal(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  late final _searchenv__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('_searchenv');
  late final _searchenv__ffilocal = _searchenv__ffilocalPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void seterrormode__ffilocal(
    int _Mode,
  ) {
    return _seterrormode__ffilocal(
      _Mode,
    );
  }

  late final _seterrormode__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          '_seterrormode');
  late final _seterrormode__ffilocal =
      _seterrormode__ffilocalPtr.asFunction<void Function(int)>();

  void beep__ffilocal(
    int _Frequency,
    int _Duration,
  ) {
    return _beep__ffilocal(
      _Frequency,
      _Duration,
    );
  }

  late final _beep__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32, ffi.Uint32)>>(
          '_beep');
  late final _beep__ffilocal =
      _beep__ffilocalPtr.asFunction<void Function(int, int)>();

  void sleep__ffilocal(
    int _Duration,
  ) {
    return _sleep__ffilocal(
      _Duration,
    );
  }

  late final _sleep__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint64)>>('_sleep');
  late final _sleep__ffilocal =
      _sleep__ffilocalPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _ecvt(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int32> _PtDec,
    ffi.Pointer<ffi.Int32> _PtSign,
  ) {
    return _fcvt(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int8> _DstBuf,
  ) {
    return _gcvt(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> itoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _itoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('itoa');
  late final _itoa = _itoaPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> ltoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ltoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Int64, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('ltoa');
  late final _ltoa = _ltoaPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  void swab(
    ffi.Pointer<ffi.Int8> _Buf1,
    ffi.Pointer<ffi.Int8> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> ultoa(
    int _Value,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Radix,
  ) {
    return _ultoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint64, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('ultoa');
  late final _ultoa = _ultoaPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int putenv(
    ffi.Pointer<ffi.Int8> _EnvString,
  ) {
    return _putenv(
      _EnvString,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  onexit_t__ffilocal onexit(
    onexit_t__ffilocal _Func,
  ) {
    return _onexit(
      _Func,
    );
  }

  late final _onexitPtr = _lookup<
          ffi.NativeFunction<onexit_t__ffilocal Function(onexit_t__ffilocal)>>(
      'onexit');
  late final _onexit =
      _onexitPtr.asFunction<onexit_t__ffilocal Function(onexit_t__ffilocal)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> _Buf,
    int _Val,
    int _MaxCount,
  ) {
    return _memchr(
      _Buf,
      _Val,
      _MaxCount,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memcmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memcpy(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Size,
  ) {
    return _memmove(
      _Dst,
      _Src,
      _Size,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, size_t)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> _Dst,
    int _Val,
    int _Size,
  ) {
    return _memset(
      _Dst,
      _Val,
      _Size,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Val,
  ) {
    return _strchr(
      _Str,
      _Val,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> _Str,
    int _Ch,
  ) {
    return _strrchr(
      _Str,
      _Ch,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _SubStr,
  ) {
    return _strstr(
      _Str,
      _SubStr,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Uint16> wcschr(
    ffi.Pointer<wchar_t> _Str,
    int _Ch,
  ) {
    return _wcschr(
      _Str,
      _Ch,
    );
  }

  late final _wcschrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('wcschr');
  late final _wcschr = _wcschrPtr.asFunction<
      ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsrchr(
    ffi.Pointer<wchar_t> _Str,
    int _Ch,
  ) {
    return _wcsrchr(
      _Str,
      _Ch,
    );
  }

  late final _wcsrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('wcsrchr');
  late final _wcsrchr = _wcsrchrPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsstr(
    ffi.Pointer<wchar_t> _Str,
    ffi.Pointer<wchar_t> _SubStr,
  ) {
    return _wcsstr(
      _Str,
      _SubStr,
    );
  }

  late final _wcsstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsstr');
  late final _wcsstr = _wcsstrPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int memicmp__ffilocal(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memicmp__ffilocal(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memicmp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('_memicmp');
  late final _memicmp__ffilocal = _memicmp__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int memicmp_l__ffilocal(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
    locale_t__ffilocal _Locale,
  ) {
    return _memicmp_l__ffilocal(
      _Buf1,
      _Buf2,
      _Size,
      _Locale,
    );
  }

  late final _memicmp_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t, locale_t__ffilocal)>>('_memicmp_l');
  late final _memicmp_l__ffilocal = _memicmp_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          locale_t__ffilocal)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _Size,
  ) {
    return _memccpy(
      _Dst,
      _Src,
      _Val,
      _Size,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int memicmp(
    ffi.Pointer<ffi.Void> _Buf1,
    ffi.Pointer<ffi.Void> _Buf2,
    int _Size,
  ) {
    return _memicmp(
      _Buf1,
      _Buf2,
      _Size,
    );
  }

  late final _memicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              size_t)>>('memicmp');
  late final _memicmp = _memicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int wcscat_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscat_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t,
              ffi.Pointer<wchar_t>)>>('wcscat_s');
  late final _wcscat_s = _wcscat_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>)>();

  int wcscpy_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscpy_s(
      _Destination,
      _SizeInWords,
      _Source,
    );
  }

  late final _wcscpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t,
              ffi.Pointer<wchar_t>)>>('wcscpy_s');
  late final _wcscpy_s = _wcscpy_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>)>();

  int wcsncat_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsncat_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t, ffi.Pointer<wchar_t>,
              rsize_t)>>('wcsncat_s');
  late final _wcsncat_s = _wcsncat_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, int)>();

  int wcsncpy_s(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsncpy_s(
      _Destination,
      _SizeInWords,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsncpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, rsize_t, ffi.Pointer<wchar_t>,
              rsize_t)>>('wcsncpy_s');
  late final _wcsncpy_s = _wcsncpy_sPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcstok_s(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Delimiter,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Context,
  ) {
    return _wcstok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstok_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstok_s');
  late final _wcstok_s = _wcstok_sPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  ffi.Pointer<wchar_t> wcsdup__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsdup__ffilocal(
      _String,
    );
  }

  late final _wcsdup__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcsdup');
  late final _wcsdup__ffilocal = _wcsdup__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcscat(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscat(
      _Destination,
      _Source,
    );
  }

  late final _wcscatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscat');
  late final _wcscat = _wcscatPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcscmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcscmp(
      _String1,
      _String2,
    );
  }

  late final _wcscmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscmp');
  late final _wcscmp = _wcscmpPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcscpy(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
  ) {
    return _wcscpy(
      _Destination,
      _Source,
    );
  }

  late final _wcscpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscpy');
  late final _wcscpy = _wcscpyPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcscspn(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Control,
  ) {
    return _wcscspn(
      _String,
      _Control,
    );
  }

  late final _wcscspnPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscspn');
  late final _wcscspn = _wcscspnPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcslen(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcslen(
      _String,
    );
  }

  late final _wcslenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<wchar_t>)>>(
          'wcslen');
  late final _wcslen =
      _wcslenPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int wcsnlen(
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsnlen(
      _Source,
      _MaxCount,
    );
  }

  late final _wcsnlenPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      'wcsnlen');
  late final _wcsnlen =
      _wcsnlenPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsncat(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _Count,
  ) {
    return _wcsncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsncat');
  late final _wcsncat = _wcsncatPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wcsncmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsncmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsncmp');
  late final _wcsncmp = _wcsncmpPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsncpy(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _Count,
  ) {
    return _wcsncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _wcsncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsncpy');
  late final _wcsncpy = _wcsncpyPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcspbrk(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Control,
  ) {
    return _wcspbrk(
      _String,
      _Control,
    );
  }

  late final _wcspbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcspbrk');
  late final _wcspbrk = _wcspbrkPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcsspn(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Control,
  ) {
    return _wcsspn(
      _String,
      _Control,
    );
  }

  late final _wcsspnPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsspn');
  late final _wcsspn = _wcsspnPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcstok(
    ffi.Pointer<wchar_t> _String,
    ffi.Pointer<wchar_t> _Delimiter,
    ffi.Pointer<ffi.Pointer<wchar_t>> _Context,
  ) {
    return _wcstok(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _wcstokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>,
              ffi.Pointer<ffi.Pointer<wchar_t>>)>>('wcstok');
  late final _wcstok = _wcstokPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<ffi.Pointer<wchar_t>>)>();

  ffi.Pointer<wchar_t> wcserror__ffilocal(
    int _ErrorNumber,
  ) {
    return _wcserror__ffilocal(
      _ErrorNumber,
    );
  }

  late final _wcserror__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wchar_t> Function(ffi.Int32)>>(
          '_wcserror');
  late final _wcserror__ffilocal =
      _wcserror__ffilocalPtr.asFunction<ffi.Pointer<wchar_t> Function(int)>();

  int wcserror_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    int _ErrorNumber,
  ) {
    return _wcserror_s__ffilocal(
      _Buffer,
      _SizeInWords,
      _ErrorNumber,
    );
  }

  late final _wcserror_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, ffi.Int32)>>('_wcserror_s');
  late final _wcserror_s__ffilocal = _wcserror_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> wcserror___ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcserror___ffilocal(
      _String,
    );
  }

  late final _wcserror___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('__wcserror');
  late final _wcserror___ffilocal = _wcserror___ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcserror_s___ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _ErrorMessage,
  ) {
    return _wcserror_s___ffilocal(
      _Buffer,
      _SizeInWords,
      _ErrorMessage,
    );
  }

  late final _wcserror_s___ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<wchar_t>)>>('__wcserror_s');
  late final _wcserror_s___ffilocal = _wcserror_s___ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>)>();

  int wcsicmp__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcsicmp__ffilocal(
      _String1,
      _String2,
    );
  }

  late final _wcsicmp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wcsicmp');
  late final _wcsicmp__ffilocal = _wcsicmp__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcsicmp_l__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsicmp_l__ffilocal(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final _wcsicmp_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal)>>('_wcsicmp_l');
  late final _wcsicmp_l__ffilocal = _wcsicmp_l__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wcsnicmp__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsnicmp__ffilocal(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicmp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              size_t)>>('_wcsnicmp');
  late final _wcsnicmp__ffilocal = _wcsnicmp__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wcsnicmp_l__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsnicmp_l__ffilocal(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final _wcsnicmp_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcsnicmp_l');
  late final _wcsnicmp_l__ffilocal = _wcsnicmp_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int,
          locale_t__ffilocal)>();

  int wcsnset_s__ffilocal(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset_s__ffilocal(
      _Destination,
      _SizeInWords,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnset_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, wchar_t, size_t)>>('_wcsnset_s');
  late final _wcsnset_s__ffilocal = _wcsnset_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, int, int)>();

  ffi.Pointer<wchar_t> wcsnset__ffilocal(
    ffi.Pointer<wchar_t> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset__ffilocal(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnset__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t, size_t)>>('_wcsnset');
  late final _wcsnset__ffilocal = _wcsnset__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> wcsrev__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsrev__ffilocal(
      _String,
    );
  }

  late final _wcsrev__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcsrev');
  late final _wcsrev__ffilocal = _wcsrev__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcsset_s__ffilocal(
    ffi.Pointer<wchar_t> _Destination,
    int _SizeInWords,
    int _Value,
  ) {
    return _wcsset_s__ffilocal(
      _Destination,
      _SizeInWords,
      _Value,
    );
  }

  late final _wcsset_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, wchar_t)>>('_wcsset_s');
  late final _wcsset_s__ffilocal = _wcsset_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> wcsset__ffilocal(
    ffi.Pointer<wchar_t> _String,
    int _Value,
  ) {
    return _wcsset__ffilocal(
      _String,
      _Value,
    );
  }

  late final _wcsset__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('_wcsset');
  late final _wcsset__ffilocal = _wcsset__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  int wcslwr_s__ffilocal(
    ffi.Pointer<wchar_t> _String,
    int _SizeInWords,
  ) {
    return _wcslwr_s__ffilocal(
      _String,
      _SizeInWords,
    );
  }

  late final _wcslwr_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wcslwr_s');
  late final _wcslwr_s__ffilocal = _wcslwr_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcslwr__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcslwr__ffilocal(
      _String,
    );
  }

  late final _wcslwr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcslwr');
  late final _wcslwr__ffilocal = _wcslwr__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcslwr_s_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    int _SizeInWords,
    locale_t__ffilocal _Locale,
  ) {
    return _wcslwr_s_l__ffilocal(
      _String,
      _SizeInWords,
      _Locale,
    );
  }

  late final _wcslwr_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcslwr_s_l');
  late final _wcslwr_s_l__ffilocal = _wcslwr_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, locale_t__ffilocal)>();

  ffi.Pointer<wchar_t> wcslwr_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wcslwr_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wcslwr_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wcslwr_l');
  late final _wcslwr_l__ffilocal = _wcslwr_l__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wcsupr_s__ffilocal(
    ffi.Pointer<wchar_t> _String,
    int _Size,
  ) {
    return _wcsupr_s__ffilocal(
      _String,
      _Size,
    );
  }

  late final _wcsupr_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wcsupr_s');
  late final _wcsupr_s__ffilocal = _wcsupr_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsupr__ffilocal(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsupr__ffilocal(
      _String,
    );
  }

  late final _wcsupr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wcsupr');
  late final _wcsupr__ffilocal = _wcsupr__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcsupr_s_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    int _Size,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsupr_s_l__ffilocal(
      _String,
      _Size,
      _Locale,
    );
  }

  late final _wcsupr_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcsupr_s_l');
  late final _wcsupr_s_l__ffilocal = _wcsupr_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, locale_t__ffilocal)>();

  ffi.Pointer<wchar_t> wcsupr_l__ffilocal(
    ffi.Pointer<wchar_t> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsupr_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _wcsupr_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, locale_t__ffilocal)>>('_wcsupr_l');
  late final _wcsupr_l__ffilocal = _wcsupr_l__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wcsxfrm(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
  ) {
    return _wcsxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _wcsxfrmPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsxfrm');
  late final _wcsxfrm = _wcsxfrmPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wcsxfrm_l__ffilocal(
    ffi.Pointer<wchar_t> _Destination,
    ffi.Pointer<wchar_t> _Source,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsxfrm_l__ffilocal(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final _wcsxfrm_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcsxfrm_l');
  late final _wcsxfrm_l__ffilocal = _wcsxfrm_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int,
          locale_t__ffilocal)>();

  int wcscoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcscoll(
      _String1,
      _String2,
    );
  }

  late final _wcscollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcscoll');
  late final _wcscoll = _wcscollPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcscoll_l__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    locale_t__ffilocal _Locale,
  ) {
    return _wcscoll_l__ffilocal(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final _wcscoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal)>>('_wcscoll_l');
  late final _wcscoll_l__ffilocal = _wcscoll_l__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wcsicoll__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcsicoll__ffilocal(
      _String1,
      _String2,
    );
  }

  late final _wcsicoll__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wcsicoll');
  late final _wcsicoll__ffilocal = _wcsicoll__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcsicoll_l__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsicoll_l__ffilocal(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final _wcsicoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              locale_t__ffilocal)>>('_wcsicoll_l');
  late final _wcsicoll_l__ffilocal = _wcsicoll_l__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, locale_t__ffilocal)>();

  int wcsncoll__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsncoll__ffilocal(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsncoll__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              size_t)>>('_wcsncoll');
  late final _wcsncoll__ffilocal = _wcsncoll__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wcsncoll_l__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsncoll_l__ffilocal(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final _wcsncoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcsncoll_l');
  late final _wcsncoll_l__ffilocal = _wcsncoll_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int,
          locale_t__ffilocal)>();

  int wcsnicoll__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsnicoll__ffilocal(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicoll__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              size_t)>>('_wcsnicoll');
  late final _wcsnicoll__ffilocal = _wcsnicoll__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  int wcsnicoll_l__ffilocal(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsnicoll_l__ffilocal(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final _wcsnicoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t,
              locale_t__ffilocal)>>('_wcsnicoll_l');
  late final _wcsnicoll_l__ffilocal = _wcsnicoll_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int,
          locale_t__ffilocal)>();

  ffi.Pointer<wchar_t> wcsdup(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsdup(
      _String,
    );
  }

  late final _wcsdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcsdup');
  late final _wcsdup = _wcsdupPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcsicmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcsicmp(
      _String1,
      _String2,
    );
  }

  late final _wcsicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsicmp');
  late final _wcsicmp = _wcsicmpPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int wcsnicmp(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
    int _MaxCount,
  ) {
    return _wcsnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _wcsnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, size_t)>>('wcsnicmp');
  late final _wcsnicmp = _wcsnicmpPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcsnset(
    ffi.Pointer<wchar_t> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _wcsnset(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _wcsnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t, size_t)>>('wcsnset');
  late final _wcsnset = _wcsnsetPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<wchar_t> wcsrev(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsrev(
      _String,
    );
  }

  late final _wcsrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcsrev');
  late final _wcsrev = _wcsrevPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcsset(
    ffi.Pointer<wchar_t> _String,
    int _Value,
  ) {
    return _wcsset(
      _String,
      _Value,
    );
  }

  late final _wcssetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, wchar_t)>>('wcsset');
  late final _wcsset = _wcssetPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wcslwr(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcslwr(
      _String,
    );
  }

  late final _wcslwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcslwr');
  late final _wcslwr = _wcslwrPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> wcsupr(
    ffi.Pointer<wchar_t> _String,
  ) {
    return _wcsupr(
      _String,
    );
  }

  late final _wcsuprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('wcsupr');
  late final _wcsupr = _wcsuprPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wcsicoll(
    ffi.Pointer<wchar_t> _String1,
    ffi.Pointer<wchar_t> _String2,
  ) {
    return _wcsicoll(
      _String1,
      _String2,
    );
  }

  late final _wcsicollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('wcsicoll');
  late final _wcsicoll = _wcsicollPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int strcpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, rsize_t,
              ffi.Pointer<ffi.Int8>)>>('strcpy_s');
  late final _strcpy_s = _strcpy_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int strcat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcat_s(
      _Destination,
      _SizeInBytes,
      _Source,
    );
  }

  late final _strcat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, rsize_t,
              ffi.Pointer<ffi.Int8>)>>('strcat_s');
  late final _strcat_s = _strcat_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int strerror_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _ErrorNumber,
  ) {
    return _strerror_s(
      _Buffer,
      _SizeInBytes,
      _ErrorNumber,
    );
  }

  late final _strerror_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>, size_t, ffi.Int32)>>('strerror_s');
  late final _strerror_s = _strerror_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int strncat_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strncat_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncat_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, rsize_t,
              ffi.Pointer<ffi.Int8>, rsize_t)>>('strncat_s');
  late final _strncat_s = _strncat_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int)>();

  int strncpy_s(
    ffi.Pointer<ffi.Int8> _Destination,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strncpy_s(
      _Destination,
      _SizeInBytes,
      _Source,
      _MaxCount,
    );
  }

  late final _strncpy_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, rsize_t,
              ffi.Pointer<ffi.Int8>, rsize_t)>>('strncpy_s');
  late final _strncpy_s = _strncpy_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strtok_s(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> _Context,
  ) {
    return _strtok_s(
      _String,
      _Delimiter,
      _Context,
    );
  }

  late final _strtok_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtok_s');
  late final _strtok_s = _strtok_sPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Void> memccpy__ffilocal(
    ffi.Pointer<ffi.Void> _Dst,
    ffi.Pointer<ffi.Void> _Src,
    int _Val,
    int _MaxCount,
  ) {
    return _memccpy__ffilocal(
      _Dst,
      _Src,
      _Val,
      _MaxCount,
    );
  }

  late final _memccpy__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32, size_t)>>('_memccpy');
  late final _memccpy__ffilocal = _memccpy__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcat(
      _Destination,
      _Source,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
  ) {
    return _strcmp(
      _Str1,
      _Str2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcmpi__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcmpi__ffilocal(
      _String1,
      _String2,
    );
  }

  late final _strcmpi__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_strcmpi');
  late final _strcmpi__ffilocal = _strcmpi__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcoll(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcoll(
      _String1,
      _String2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcoll_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    locale_t__ffilocal _Locale,
  ) {
    return _strcoll_l__ffilocal(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final _strcoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal)>>('_strcoll_l');
  late final _strcoll_l__ffilocal = _strcoll_l__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strcpy(
      _Destination,
      _Source,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strcspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strcspn(
      _Str,
      _Control,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strdup__ffilocal(
    ffi.Pointer<ffi.Int8> _Source,
  ) {
    return _strdup__ffilocal(
      _Source,
    );
  }

  late final _strdup__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strdup');
  late final _strdup__ffilocal = _strdup__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strerror__ffilocal(
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return _strerror__ffilocal(
      _ErrorMessage,
    );
  }

  late final _strerror__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strerror');
  late final _strerror__ffilocal = _strerror__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strerror_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return _strerror_s__ffilocal(
      _Buffer,
      _SizeInBytes,
      _ErrorMessage,
    );
  }

  late final _strerror_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('_strerror_s');
  late final _strerror_s__ffilocal = _strerror_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strerror(
    int _ErrorMessage,
  ) {
    return _strerror(
      _ErrorMessage,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int stricmp__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _stricmp__ffilocal(
      _String1,
      _String2,
    );
  }

  late final _stricmp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_stricmp');
  late final _stricmp__ffilocal = _stricmp__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int stricoll__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _stricoll__ffilocal(
      _String1,
      _String2,
    );
  }

  late final _stricoll__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_stricoll');
  late final _stricoll__ffilocal = _stricoll__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int stricoll_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    locale_t__ffilocal _Locale,
  ) {
    return _stricoll_l__ffilocal(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final _stricoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal)>>('_stricoll_l');
  late final _stricoll_l__ffilocal = _stricoll_l__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int stricmp_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    locale_t__ffilocal _Locale,
  ) {
    return _stricmp_l__ffilocal(
      _String1,
      _String2,
      _Locale,
    );
  }

  late final _stricmp_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t__ffilocal)>>('_stricmp_l');
  late final _stricmp_l__ffilocal = _stricmp_l__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int strlen(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return _strlen(
      _Str,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Int8>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int strlwr_s__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return _strlwr_s__ffilocal(
      _String,
      _Size,
    );
  }

  late final _strlwr_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      '_strlwr_s');
  late final _strlwr_s__ffilocal = _strlwr_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strlwr__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strlwr__ffilocal(
      _String,
    );
  }

  late final _strlwr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strlwr');
  late final _strlwr__ffilocal = _strlwr__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strlwr_s_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    locale_t__ffilocal _Locale,
  ) {
    return _strlwr_s_l__ffilocal(
      _String,
      _Size,
      _Locale,
    );
  }

  late final _strlwr_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t,
              locale_t__ffilocal)>>('_strlwr_s_l');
  late final _strlwr_s_l__ffilocal = _strlwr_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, locale_t__ffilocal)>();

  ffi.Pointer<ffi.Int8> strlwr_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _strlwr_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _strlwr_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_strlwr_l');
  late final _strlwr_l__ffilocal = _strlwr_l__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return _strncat(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strncmp(
    ffi.Pointer<ffi.Int8> _Str1,
    ffi.Pointer<ffi.Int8> _Str2,
    int _MaxCount,
  ) {
    return _strncmp(
      _Str1,
      _Str2,
      _MaxCount,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strnicmp__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return _strnicmp__ffilocal(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strnicmp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('_strnicmp');
  late final _strnicmp__ffilocal = _strnicmp__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strnicmp_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _strnicmp_l__ffilocal(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final _strnicmp_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t, locale_t__ffilocal)>>('_strnicmp_l');
  late final _strnicmp_l__ffilocal = _strnicmp_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int,
          locale_t__ffilocal)>();

  int strnicoll__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return _strnicoll__ffilocal(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strnicoll__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('_strnicoll');
  late final _strnicoll__ffilocal = _strnicoll__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strnicoll_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _strnicoll_l__ffilocal(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final _strnicoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t, locale_t__ffilocal)>>('_strnicoll_l');
  late final _strnicoll_l__ffilocal = _strnicoll_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int,
          locale_t__ffilocal)>();

  int strncoll__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return _strncoll__ffilocal(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strncoll__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('_strncoll');
  late final _strncoll__ffilocal = _strncoll__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strncoll_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _strncoll_l__ffilocal(
      _String1,
      _String2,
      _MaxCount,
      _Locale,
    );
  }

  late final _strncoll_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t, locale_t__ffilocal)>>('_strncoll_l');
  late final _strncoll_l__ffilocal = _strncoll_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int,
          locale_t__ffilocal)>();

  int strncnt___ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _Count,
  ) {
    return _strncnt___ffilocal(
      _String,
      _Count,
    );
  }

  late final _strncnt___ffilocalPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      '__strncnt');
  late final _strncnt___ffilocal = _strncnt___ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _Count,
  ) {
    return _strncpy(
      _Destination,
      _Source,
      _Count,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strnlen(
    ffi.Pointer<ffi.Int8> _String,
    int _MaxCount,
  ) {
    return _strnlen(
      _String,
      _MaxCount,
    );
  }

  late final _strnlenPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      'strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int strnset_s__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _SizeInBytes,
    int _Value,
    int _MaxCount,
  ) {
    return _strnset_s__ffilocal(
      _String,
      _SizeInBytes,
      _Value,
      _MaxCount,
    );
  }

  late final _strnset_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>, size_t, ffi.Int32, size_t)>>('_strnset_s');
  late final _strnset_s__ffilocal = _strnset_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int, int)>();

  ffi.Pointer<ffi.Int8> strnset__ffilocal(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
    int _Count,
  ) {
    return _strnset__ffilocal(
      _Destination,
      _Value,
      _Count,
    );
  }

  late final _strnset__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, size_t)>>('_strnset');
  late final _strnset__ffilocal = _strnset__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strpbrk(
      _Str,
      _Control,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strrev__ffilocal(
    ffi.Pointer<ffi.Int8> _Str,
  ) {
    return _strrev__ffilocal(
      _Str,
    );
  }

  late final _strrev__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strrev');
  late final _strrev__ffilocal = _strrev__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strset_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Destination,
    int _DestinationSize,
    int _Value,
  ) {
    return _strset_s__ffilocal(
      _Destination,
      _DestinationSize,
      _Value,
    );
  }

  late final _strset_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>, size_t, ffi.Int32)>>('_strset_s');
  late final _strset_s__ffilocal = _strset_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> strset__ffilocal(
    ffi.Pointer<ffi.Int8> _Destination,
    int _Value,
  ) {
    return _strset__ffilocal(
      _Destination,
      _Value,
    );
  }

  late final _strset__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_strset');
  late final _strset__ffilocal = _strset__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strspn(
    ffi.Pointer<ffi.Int8> _Str,
    ffi.Pointer<ffi.Int8> _Control,
  ) {
    return _strspn(
      _Str,
      _Control,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> _String,
    ffi.Pointer<ffi.Int8> _Delimiter,
  ) {
    return _strtok(
      _String,
      _Delimiter,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strupr_s__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
  ) {
    return _strupr_s__ffilocal(
      _String,
      _Size,
    );
  }

  late final _strupr_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      '_strupr_s');
  late final _strupr_s__ffilocal = _strupr_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strupr__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strupr__ffilocal(
      _String,
    );
  }

  late final _strupr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strupr');
  late final _strupr__ffilocal = _strupr__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strupr_s_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    int _Size,
    locale_t__ffilocal _Locale,
  ) {
    return _strupr_s_l__ffilocal(
      _String,
      _Size,
      _Locale,
    );
  }

  late final _strupr_s_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t,
              locale_t__ffilocal)>>('_strupr_s_l');
  late final _strupr_s_l__ffilocal = _strupr_s_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, locale_t__ffilocal)>();

  ffi.Pointer<ffi.Int8> strupr_l__ffilocal(
    ffi.Pointer<ffi.Int8> _String,
    locale_t__ffilocal _Locale,
  ) {
    return _strupr_l__ffilocal(
      _String,
      _Locale,
    );
  }

  late final _strupr_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>>('_strupr_l');
  late final _strupr_l__ffilocal = _strupr_l__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, locale_t__ffilocal)>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
  ) {
    return _strxfrm(
      _Destination,
      _Source,
      _MaxCount,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strxfrm_l__ffilocal(
    ffi.Pointer<ffi.Int8> _Destination,
    ffi.Pointer<ffi.Int8> _Source,
    int _MaxCount,
    locale_t__ffilocal _Locale,
  ) {
    return _strxfrm_l__ffilocal(
      _Destination,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final _strxfrm_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, size_t,
              locale_t__ffilocal)>>('_strxfrm_l');
  late final _strxfrm_l__ffilocal = _strxfrm_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int,
          locale_t__ffilocal)>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strdup(
      _String,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strcmpi(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _strcmpi(
      _String1,
      _String2,
    );
  }

  late final _strcmpiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcmpi');
  late final _strcmpi = _strcmpiPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int stricmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
  ) {
    return _stricmp(
      _String1,
      _String2,
    );
  }

  late final _stricmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('stricmp');
  late final _stricmp = _stricmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strlwr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strlwr(
      _String,
    );
  }

  late final _strlwrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strlwr');
  late final _strlwr = _strlwrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strnicmp(
    ffi.Pointer<ffi.Int8> _String1,
    ffi.Pointer<ffi.Int8> _String2,
    int _MaxCount,
  ) {
    return _strnicmp(
      _String1,
      _String2,
      _MaxCount,
    );
  }

  late final _strnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('strnicmp');
  late final _strnicmp = _strnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strnset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
    int _MaxCount,
  ) {
    return _strnset(
      _String,
      _Value,
      _MaxCount,
    );
  }

  late final _strnsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, size_t)>>('strnset');
  late final _strnset = _strnsetPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> strrev(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strrev(
      _String,
    );
  }

  late final _strrevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strrev');
  late final _strrev = _strrevPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strset(
    ffi.Pointer<ffi.Int8> _String,
    int _Value,
  ) {
    return _strset(
      _String,
      _Value,
    );
  }

  late final _strsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strset');
  late final _strset = _strsetPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strupr(
    ffi.Pointer<ffi.Int8> _String,
  ) {
    return _strupr(
      _String,
    );
  }

  late final _struprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strupr');
  late final _strupr = _struprPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  late final ffi.Pointer<ffi.Double> _HUGE__ffilocal =
      _lookup<ffi.Double>('_HUGE');

  double get HUGE__ffilocal => _HUGE__ffilocal.value;

  set HUGE__ffilocal(double value) => _HUGE__ffilocal.value = value;

  void fperrraise__ffilocal(
    int _Except,
  ) {
    return _fperrraise__ffilocal(
      _Except,
    );
  }

  late final _fperrraise__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_fperrraise');
  late final _fperrraise__ffilocal =
      _fperrraise__ffilocalPtr.asFunction<void Function(int)>();

  int dclass__ffilocal(
    double _X,
  ) {
    return _dclass__ffilocal(
      _X,
    );
  }

  late final _dclass__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Double)>>('_dclass');
  late final _dclass__ffilocal =
      _dclass__ffilocalPtr.asFunction<int Function(double)>();

  int fdclass__ffilocal(
    double _X,
  ) {
    return _fdclass__ffilocal(
      _X,
    );
  }

  late final _fdclass__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Float)>>('_fdclass');
  late final _fdclass__ffilocal =
      _fdclass__ffilocalPtr.asFunction<int Function(double)>();

  int dsign__ffilocal(
    double _X,
  ) {
    return _dsign__ffilocal(
      _X,
    );
  }

  late final _dsign__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('_dsign');
  late final _dsign__ffilocal =
      _dsign__ffilocalPtr.asFunction<int Function(double)>();

  int fdsign__ffilocal(
    double _X,
  ) {
    return _fdsign__ffilocal(
      _X,
    );
  }

  late final _fdsign__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('_fdsign');
  late final _fdsign__ffilocal =
      _fdsign__ffilocalPtr.asFunction<int Function(double)>();

  int dpcomp__ffilocal(
    double _X,
    double _Y,
  ) {
    return _dpcomp__ffilocal(
      _X,
      _Y,
    );
  }

  late final _dpcomp__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double, ffi.Double)>>(
          '_dpcomp');
  late final _dpcomp__ffilocal =
      _dpcomp__ffilocalPtr.asFunction<int Function(double, double)>();

  int fdpcomp__ffilocal(
    double _X,
    double _Y,
  ) {
    return _fdpcomp__ffilocal(
      _X,
      _Y,
    );
  }

  late final _fdpcomp__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float, ffi.Float)>>(
          '_fdpcomp');
  late final _fdpcomp__ffilocal =
      _fdpcomp__ffilocalPtr.asFunction<int Function(double, double)>();

  int dtest__ffilocal(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return _dtest__ffilocal(
      _Px,
    );
  }

  late final _dtest__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ffi.Double>)>>(
          '_dtest');
  late final _dtest__ffilocal =
      _dtest__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int fdtest__ffilocal(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return _fdtest__ffilocal(
      _Px,
    );
  }

  late final _fdtest__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ffi.Float>)>>(
          '_fdtest');
  late final _fdtest__ffilocal =
      _fdtest__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Float>)>();

  int d_int__ffilocal(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return _d_int__ffilocal(
      _Px,
      _Xexp,
    );
  }

  late final _d_int__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Double>, ffi.Int16)>>('_d_int');
  late final _d_int__ffilocal = _d_int__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int fd_int__ffilocal(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return _fd_int__ffilocal(
      _Px,
      _Xexp,
    );
  }

  late final _fd_int__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Float>, ffi.Int16)>>('_fd_int');
  late final _fd_int__ffilocal = _fd_int__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int dscale__ffilocal(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return _dscale__ffilocal(
      _Px,
      _Lexp,
    );
  }

  late final _dscale__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Double>, ffi.Int64)>>('_dscale');
  late final _dscale__ffilocal = _dscale__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int fdscale__ffilocal(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return _fdscale__ffilocal(
      _Px,
      _Lexp,
    );
  }

  late final _fdscale__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Float>, ffi.Int64)>>('_fdscale');
  late final _fdscale__ffilocal = _fdscale__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int dunscale__ffilocal(
    ffi.Pointer<ffi.Int16> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return _dunscale__ffilocal(
      _Pex,
      _Px,
    );
  }

  late final _dunscale__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Double>)>>('_dunscale');
  late final _dunscale__ffilocal = _dunscale__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Double>)>();

  int fdunscale__ffilocal(
    ffi.Pointer<ffi.Int16> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return _fdunscale__ffilocal(
      _Pex,
      _Px,
    );
  }

  late final _fdunscale__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Float>)>>('_fdunscale');
  late final _fdunscale__ffilocal = _fdunscale__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Float>)>();

  int dexp__ffilocal(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return _dexp__ffilocal(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final _dexp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Int64)>>('_dexp');
  late final _dexp__ffilocal = _dexp__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int)>();

  int fdexp__ffilocal(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return _fdexp__ffilocal(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final _fdexp__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Float>, ffi.Float, ffi.Int64)>>('_fdexp');
  late final _fdexp__ffilocal = _fdexp__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, double, int)>();

  int dnorm__ffilocal(
    ffi.Pointer<ffi.Uint16> _Ps,
  ) {
    return _dnorm__ffilocal(
      _Ps,
    );
  }

  late final _dnorm__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ffi.Uint16>)>>(
          '_dnorm');
  late final _dnorm__ffilocal =
      _dnorm__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int fdnorm__ffilocal(
    ffi.Pointer<ffi.Uint16> _Ps,
  ) {
    return _fdnorm__ffilocal(
      _Ps,
    );
  }

  late final _fdnorm__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ffi.Uint16>)>>(
          '_fdnorm');
  late final _fdnorm__ffilocal =
      _fdnorm__ffilocalPtr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  double dpoly__ffilocal(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return _dpoly__ffilocal(
      _X,
      _Tab,
      _N,
    );
  }

  late final _dpoly__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int32)>>('_dpoly');
  late final _dpoly__ffilocal = _dpoly__ffilocalPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Double>, int)>();

  double fdpoly__ffilocal(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return _fdpoly__ffilocal(
      _X,
      _Tab,
      _N,
    );
  }

  late final _fdpoly__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Float>, ffi.Int32)>>('_fdpoly');
  late final _fdpoly__ffilocal = _fdpoly__ffilocalPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Float>, int)>();

  double dlog__ffilocal(
    double _X,
    int _Baseflag,
  ) {
    return _dlog__ffilocal(
      _X,
      _Baseflag,
    );
  }

  late final _dlog__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          '_dlog');
  late final _dlog__ffilocal =
      _dlog__ffilocalPtr.asFunction<double Function(double, int)>();

  double fdlog__ffilocal(
    double _X,
    int _Baseflag,
  ) {
    return _fdlog__ffilocal(
      _X,
      _Baseflag,
    );
  }

  late final _fdlog__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          '_fdlog');
  late final _fdlog__ffilocal =
      _fdlog__ffilocalPtr.asFunction<double Function(double, int)>();

  double dsin__ffilocal(
    double _X,
    int _Qoff,
  ) {
    return _dsin__ffilocal(
      _X,
      _Qoff,
    );
  }

  late final _dsin__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Uint32)>>(
          '_dsin');
  late final _dsin__ffilocal =
      _dsin__ffilocalPtr.asFunction<double Function(double, int)>();

  double fdsin__ffilocal(
    double _X,
    int _Qoff,
  ) {
    return _fdsin__ffilocal(
      _X,
      _Qoff,
    );
  }

  late final _fdsin__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Uint32)>>(
          '_fdsin');
  late final _fdsin__ffilocal =
      _fdsin__ffilocalPtr.asFunction<double Function(double, int)>();

  late final ffi.Pointer<float_const__ffilocal> _Denorm_C__ffilocal =
      _lookup<float_const__ffilocal>('_Denorm_C');

  ffi.Pointer<float_const__ffilocal> get Denorm_C__ffilocal =>
      _Denorm_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _Inf_C__ffilocal =
      _lookup<float_const__ffilocal>('_Inf_C');

  ffi.Pointer<float_const__ffilocal> get Inf_C__ffilocal => _Inf_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _Nan_C__ffilocal =
      _lookup<float_const__ffilocal>('_Nan_C');

  ffi.Pointer<float_const__ffilocal> get Nan_C__ffilocal => _Nan_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _Snan_C__ffilocal =
      _lookup<float_const__ffilocal>('_Snan_C');

  ffi.Pointer<float_const__ffilocal> get Snan_C__ffilocal => _Snan_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _Hugeval_C__ffilocal =
      _lookup<float_const__ffilocal>('_Hugeval_C');

  ffi.Pointer<float_const__ffilocal> get Hugeval_C__ffilocal =>
      _Hugeval_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _FDenorm_C__ffilocal =
      _lookup<float_const__ffilocal>('_FDenorm_C');

  ffi.Pointer<float_const__ffilocal> get FDenorm_C__ffilocal =>
      _FDenorm_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _FInf_C__ffilocal =
      _lookup<float_const__ffilocal>('_FInf_C');

  ffi.Pointer<float_const__ffilocal> get FInf_C__ffilocal => _FInf_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _FNan_C__ffilocal =
      _lookup<float_const__ffilocal>('_FNan_C');

  ffi.Pointer<float_const__ffilocal> get FNan_C__ffilocal => _FNan_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _FSnan_C__ffilocal =
      _lookup<float_const__ffilocal>('_FSnan_C');

  ffi.Pointer<float_const__ffilocal> get FSnan_C__ffilocal =>
      _FSnan_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _LDenorm_C__ffilocal =
      _lookup<float_const__ffilocal>('_LDenorm_C');

  ffi.Pointer<float_const__ffilocal> get LDenorm_C__ffilocal =>
      _LDenorm_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _LInf_C__ffilocal =
      _lookup<float_const__ffilocal>('_LInf_C');

  ffi.Pointer<float_const__ffilocal> get LInf_C__ffilocal => _LInf_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _LNan_C__ffilocal =
      _lookup<float_const__ffilocal>('_LNan_C');

  ffi.Pointer<float_const__ffilocal> get LNan_C__ffilocal => _LNan_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _LSnan_C__ffilocal =
      _lookup<float_const__ffilocal>('_LSnan_C');

  ffi.Pointer<float_const__ffilocal> get LSnan_C__ffilocal =>
      _LSnan_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _Eps_C__ffilocal =
      _lookup<float_const__ffilocal>('_Eps_C');

  ffi.Pointer<float_const__ffilocal> get Eps_C__ffilocal => _Eps_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _Rteps_C__ffilocal =
      _lookup<float_const__ffilocal>('_Rteps_C');

  ffi.Pointer<float_const__ffilocal> get Rteps_C__ffilocal =>
      _Rteps_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _FEps_C__ffilocal =
      _lookup<float_const__ffilocal>('_FEps_C');

  ffi.Pointer<float_const__ffilocal> get FEps_C__ffilocal => _FEps_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _FRteps_C__ffilocal =
      _lookup<float_const__ffilocal>('_FRteps_C');

  ffi.Pointer<float_const__ffilocal> get FRteps_C__ffilocal =>
      _FRteps_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _LEps_C__ffilocal =
      _lookup<float_const__ffilocal>('_LEps_C');

  ffi.Pointer<float_const__ffilocal> get LEps_C__ffilocal => _LEps_C__ffilocal;

  late final ffi.Pointer<float_const__ffilocal> _LRteps_C__ffilocal =
      _lookup<float_const__ffilocal>('_LRteps_C');

  ffi.Pointer<float_const__ffilocal> get LRteps_C__ffilocal =>
      _LRteps_C__ffilocal;

  late final ffi.Pointer<ffi.Double> _Zero_C__ffilocal =
      _lookup<ffi.Double>('_Zero_C');

  double get Zero_C__ffilocal => _Zero_C__ffilocal.value;

  set Zero_C__ffilocal(double value) => _Zero_C__ffilocal.value = value;

  late final ffi.Pointer<ffi.Double> _Xbig_C__ffilocal =
      _lookup<ffi.Double>('_Xbig_C');

  double get Xbig_C__ffilocal => _Xbig_C__ffilocal.value;

  set Xbig_C__ffilocal(double value) => _Xbig_C__ffilocal.value = value;

  late final ffi.Pointer<ffi.Float> _FZero_C__ffilocal =
      _lookup<ffi.Float>('_FZero_C');

  double get FZero_C__ffilocal => _FZero_C__ffilocal.value;

  set FZero_C__ffilocal(double value) => _FZero_C__ffilocal.value = value;

  late final ffi.Pointer<ffi.Float> _FXbig_C__ffilocal =
      _lookup<ffi.Float>('_FXbig_C');

  double get FXbig_C__ffilocal => _FXbig_C__ffilocal.value;

  set FXbig_C__ffilocal(double value) => _FXbig_C__ffilocal.value = value;

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double cabs__ffilocal(
    complex__ffilocal _Complex_value,
  ) {
    return _cabs__ffilocal(
      _Complex_value,
    );
  }

  late final _cabs__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(complex__ffilocal)>>(
          '_cabs');
  late final _cabs__ffilocal =
      _cabs__ffilocalPtr.asFunction<double Function(complex__ffilocal)>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double chgsign__ffilocal(
    double _X,
  ) {
    return _chgsign__ffilocal(
      _X,
    );
  }

  late final _chgsign__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_chgsign');
  late final _chgsign__ffilocal =
      _chgsign__ffilocalPtr.asFunction<double Function(double)>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign(
      _Number,
      _Sign,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double copysign__ffilocal(
    double _Number,
    double _Sign,
  ) {
    return _copysign__ffilocal(
      _Number,
      _Sign,
    );
  }

  late final _copysign__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_copysign');
  late final _copysign__ffilocal =
      _copysign__ffilocalPtr.asFunction<double Function(double, double)>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int32> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot(
      _X,
      _Y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double hypot__ffilocal(
    double _X,
    double _Y,
  ) {
    return _hypot__ffilocal(
      _X,
      _Y,
    );
  }

  late final _hypot__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_hypot');
  late final _hypot__ffilocal =
      _hypot__ffilocalPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double logb(
    double _X,
  ) {
    return _logb(
      _X,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int matherr__ffilocal(
    ffi.Pointer<exception__ffilocal> _Except,
  ) {
    return _matherr__ffilocal(
      _Except,
    );
  }

  late final _matherr__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<exception__ffilocal>)>>('_matherr');
  late final _matherr__ffilocal = _matherr__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<exception__ffilocal>)>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double nan(
    ffi.Pointer<ffi.Int8> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter(
      _X,
      _Y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int32> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int32>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int64)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double j0__ffilocal(
    double _X,
  ) {
    return _j0__ffilocal(
      _X,
    );
  }

  late final _j0__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j0');
  late final _j0__ffilocal =
      _j0__ffilocalPtr.asFunction<double Function(double)>();

  double j1__ffilocal(
    double _X,
  ) {
    return _j1__ffilocal(
      _X,
    );
  }

  late final _j1__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j1');
  late final _j1__ffilocal =
      _j1__ffilocalPtr.asFunction<double Function(double)>();

  double jn__ffilocal(
    int _X,
    double _Y,
  ) {
    return _jn__ffilocal(
      _X,
      _Y,
    );
  }

  late final _jn__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          '_jn');
  late final _jn__ffilocal =
      _jn__ffilocalPtr.asFunction<double Function(int, double)>();

  double y0__ffilocal(
    double _X,
  ) {
    return _y0__ffilocal(
      _X,
    );
  }

  late final _y0__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y0');
  late final _y0__ffilocal =
      _y0__ffilocalPtr.asFunction<double Function(double)>();

  double y1__ffilocal(
    double _X,
  ) {
    return _y1__ffilocal(
      _X,
    );
  }

  late final _y1__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y1');
  late final _y1__ffilocal =
      _y1__ffilocalPtr.asFunction<double Function(double)>();

  double yn__ffilocal(
    int _X,
    double _Y,
  ) {
    return _yn__ffilocal(
      _X,
      _Y,
    );
  }

  late final _yn__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          '_yn');
  late final _yn__ffilocal =
      _yn__ffilocalPtr.asFunction<double Function(int, double)>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double chgsignf__ffilocal(
    double _X,
  ) {
    return _chgsignf__ffilocal(
      _X,
    );
  }

  late final _chgsignf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_chgsignf');
  late final _chgsignf__ffilocal =
      _chgsignf__ffilocalPtr.asFunction<double Function(double)>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf(
      _Number,
      _Sign,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysignf__ffilocal(
    double _Number,
    double _Sign,
  ) {
    return _copysignf__ffilocal(
      _Number,
      _Sign,
    );
  }

  late final _copysignf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_copysignf');
  late final _copysignf__ffilocal =
      _copysignf__ffilocalPtr.asFunction<double Function(double, double)>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double hypotf__ffilocal(
    double _X,
    double _Y,
  ) {
    return _hypotf__ffilocal(
      _X,
      _Y,
    );
  }

  late final _hypotf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_hypotf');
  late final _hypotf__ffilocal =
      _hypotf__ffilocalPtr.asFunction<double Function(double, double)>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logbf(
    double _X,
  ) {
    return _logbf(
      _X,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  double nanf(
    ffi.Pointer<ffi.Int8> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Int8>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf(
      _X,
      _Y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int32> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int32>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int64)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double logbf__ffilocal(
    double _X,
  ) {
    return _logbf__ffilocal(
      _X,
    );
  }

  late final _logbf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_logbf');
  late final _logbf__ffilocal =
      _logbf__ffilocalPtr.asFunction<double Function(double)>();

  double nextafterf__ffilocal(
    double _X,
    double _Y,
  ) {
    return _nextafterf__ffilocal(
      _X,
      _Y,
    );
  }

  late final _nextafterf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_nextafterf');
  late final _nextafterf__ffilocal =
      _nextafterf__ffilocalPtr.asFunction<double Function(double, double)>();

  int finitef__ffilocal(
    double _X,
  ) {
    return _finitef__ffilocal(
      _X,
    );
  }

  late final _finitef__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('_finitef');
  late final _finitef__ffilocal =
      _finitef__ffilocalPtr.asFunction<int Function(double)>();

  int isnanf__ffilocal(
    double _X,
  ) {
    return _isnanf__ffilocal(
      _X,
    );
  }

  late final _isnanf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('_isnanf');
  late final _isnanf__ffilocal =
      _isnanf__ffilocalPtr.asFunction<int Function(double)>();

  int fpclassf__ffilocal(
    double _X,
  ) {
    return _fpclassf__ffilocal(
      _X,
    );
  }

  late final _fpclassf__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('_fpclassf');
  late final _fpclassf__ffilocal =
      _fpclassf__ffilocalPtr.asFunction<int Function(double)>();

  int set_FMA3_enable__ffilocal(
    int _Flag,
  ) {
    return _set_FMA3_enable__ffilocal(
      _Flag,
    );
  }

  late final _set_FMA3_enable__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          '_set_FMA3_enable');
  late final _set_FMA3_enable__ffilocal =
      _set_FMA3_enable__ffilocalPtr.asFunction<int Function(int)>();

  int get_FMA3_enable__ffilocal() {
    return _get_FMA3_enable__ffilocal();
  }

  late final _get_FMA3_enable__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_get_FMA3_enable');
  late final _get_FMA3_enable__ffilocal =
      _get_FMA3_enable__ffilocalPtr.asFunction<int Function()>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Double> _HUGE = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE.value;

  set HUGE(double value) => _HUGE.value = value;

  double j0(
    double _X,
  ) {
    return _j0(
      _X,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double _X,
  ) {
    return _j1(
      _X,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn(
      _X,
      _Y,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double _X,
  ) {
    return _y0(
      _X,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double _X,
  ) {
    return _y1(
      _X,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn(
      _X,
      _Y,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  ffi.Pointer<wchar_t> wasctime__ffilocal(
    ffi.Pointer<tm> _Tm,
  ) {
    return _wasctime__ffilocal(
      _Tm,
    );
  }

  late final _wasctime__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<tm>)>>(
      '_wasctime');
  late final _wasctime__ffilocal = _wasctime__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<tm>)>();

  int wasctime_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<tm> _Tm,
  ) {
    return _wasctime_s__ffilocal(
      _Buffer,
      _SizeInWords,
      _Tm,
    );
  }

  late final _wasctime_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<wchar_t>, size_t, ffi.Pointer<tm>)>>('_wasctime_s');
  late final _wasctime_s__ffilocal = _wasctime_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<tm>)>();

  int wcsftime(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _wcsftime(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
    );
  }

  late final _wcsftimePtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t, ffi.Pointer<wchar_t>,
              ffi.Pointer<tm>)>>('wcsftime');
  late final _wcsftime = _wcsftimePtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>, ffi.Pointer<tm>)>();

  int wcsftime_l__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<wchar_t> _Format,
    ffi.Pointer<tm> _Tm,
    locale_t__ffilocal _Locale,
  ) {
    return _wcsftime_l__ffilocal(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final _wcsftime_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, size_t, ffi.Pointer<wchar_t>,
              ffi.Pointer<tm>, locale_t__ffilocal)>>('_wcsftime_l');
  late final _wcsftime_l__ffilocal = _wcsftime_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
          ffi.Pointer<tm>, locale_t__ffilocal)>();

  ffi.Pointer<wchar_t> wctime32__ffilocal(
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _wctime32__ffilocal(
      _Time,
    );
  }

  late final _wctime32__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<time32_t___ffilocal>)>>('_wctime32');
  late final _wctime32__ffilocal = _wctime32__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<time32_t___ffilocal>)>();

  int wctime32_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _wctime32_s__ffilocal(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final _wctime32_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<time32_t___ffilocal>)>>('_wctime32_s');
  late final _wctime32_s__ffilocal = _wctime32_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<time32_t___ffilocal>)>();

  ffi.Pointer<wchar_t> wctime64__ffilocal(
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _wctime64__ffilocal(
      _Time,
    );
  }

  late final _wctime64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<time64_t___ffilocal>)>>('_wctime64');
  late final _wctime64__ffilocal = _wctime64__ffilocalPtr.asFunction<
      ffi.Pointer<wchar_t> Function(ffi.Pointer<time64_t___ffilocal>)>();

  int wctime64_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _wctime64_s__ffilocal(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final _wctime64_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<wchar_t>, size_t,
              ffi.Pointer<time64_t___ffilocal>)>>('_wctime64_s');
  late final _wctime64_s__ffilocal = _wctime64_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<time64_t___ffilocal>)>();

  int wstrdate_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
  ) {
    return _wstrdate_s__ffilocal(
      _Buffer,
      _SizeInWords,
    );
  }

  late final _wstrdate_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wstrdate_s');
  late final _wstrdate_s__ffilocal = _wstrdate_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wstrdate__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return _wstrdate__ffilocal(
      _Buffer,
    );
  }

  late final _wstrdate__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wstrdate');
  late final _wstrdate__ffilocal = _wstrdate__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int wstrtime_s__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
    int _SizeInWords,
  ) {
    return _wstrtime_s__ffilocal(
      _Buffer,
      _SizeInWords,
    );
  }

  late final _wstrtime_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wstrtime_s');
  late final _wstrtime_s__ffilocal = _wstrtime_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> wstrtime__ffilocal(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return _wstrtime__ffilocal(
      _Buffer,
    );
  }

  late final _wstrtime__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wstrtime');
  late final _wstrtime__ffilocal = _wstrtime__ffilocalPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<ffi.Int32> daylight___ffilocal() {
    return _daylight___ffilocal();
  }

  late final _daylight___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__daylight');
  late final _daylight___ffilocal =
      _daylight___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  ffi.Pointer<ffi.Int64> dstbias___ffilocal() {
    return _dstbias___ffilocal();
  }

  late final _dstbias___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function()>>(
          '__dstbias');
  late final _dstbias___ffilocal =
      _dstbias___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int64> Function()>();

  ffi.Pointer<ffi.Int64> timezone___ffilocal() {
    return _timezone___ffilocal();
  }

  late final _timezone___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function()>>(
          '__timezone');
  late final _timezone___ffilocal =
      _timezone___ffilocalPtr.asFunction<ffi.Pointer<ffi.Int64> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Int8>> tzname___ffilocal() {
    return _tzname___ffilocal();
  }

  late final _tzname___ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Int8>> Function()>>(
      '__tzname');
  late final _tzname___ffilocal = _tzname___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Int8>> Function()>();

  int get_daylight__ffilocal(
    ffi.Pointer<ffi.Int32> _Daylight,
  ) {
    return _get_daylight__ffilocal(
      _Daylight,
    );
  }

  late final _get_daylight__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int32>)>>(
          '_get_daylight');
  late final _get_daylight__ffilocal = _get_daylight__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  int get_dstbias__ffilocal(
    ffi.Pointer<ffi.Int64> _DaylightSavingsBias,
  ) {
    return _get_dstbias__ffilocal(
      _DaylightSavingsBias,
    );
  }

  late final _get_dstbias__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int64>)>>(
          '_get_dstbias');
  late final _get_dstbias__ffilocal = _get_dstbias__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>)>();

  int get_timezone__ffilocal(
    ffi.Pointer<ffi.Int64> _TimeZone,
  ) {
    return _get_timezone__ffilocal(
      _TimeZone,
    );
  }

  late final _get_timezone__ffilocalPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int64>)>>(
          '_get_timezone');
  late final _get_timezone__ffilocal = _get_timezone__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>)>();

  int get_tzname__ffilocal(
    ffi.Pointer<size_t> _ReturnValue,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    int _Index,
  ) {
    return _get_tzname__ffilocal(
      _ReturnValue,
      _Buffer,
      _SizeInBytes,
      _Index,
    );
  }

  late final _get_tzname__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Int32)>>('_get_tzname');
  late final _get_tzname__ffilocal = _get_tzname__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime(
      _Tm,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<tm>)>();

  int asctime_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime_s(
      _Buffer,
      _SizeInBytes,
      _Tm,
    );
  }

  late final _asctime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Int8>, size_t, ffi.Pointer<tm>)>>('asctime_s');
  late final _asctime_s = _asctime_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> ctime32__ffilocal(
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _ctime32__ffilocal(
      _Time,
    );
  }

  late final _ctime32__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<time32_t___ffilocal>)>>('_ctime32');
  late final _ctime32__ffilocal = _ctime32__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<time32_t___ffilocal>)>();

  int ctime32_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _ctime32_s__ffilocal(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final _ctime32_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<time32_t___ffilocal>)>>('_ctime32_s');
  late final _ctime32_s__ffilocal = _ctime32_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<time32_t___ffilocal>)>();

  ffi.Pointer<ffi.Int8> ctime64__ffilocal(
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _ctime64__ffilocal(
      _Time,
    );
  }

  late final _ctime64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<time64_t___ffilocal>)>>('_ctime64');
  late final _ctime64__ffilocal = _ctime64__ffilocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<time64_t___ffilocal>)>();

  int ctime64_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _ctime64_s__ffilocal(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final _ctime64_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<time64_t___ffilocal>)>>('_ctime64_s');
  late final _ctime64_s__ffilocal = _ctime64_s__ffilocalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<time64_t___ffilocal>)>();

  double difftime32__ffilocal(
    int _Time1,
    int _Time2,
  ) {
    return _difftime32__ffilocal(
      _Time1,
      _Time2,
    );
  }

  late final _difftime32__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              time32_t___ffilocal, time32_t___ffilocal)>>('_difftime32');
  late final _difftime32__ffilocal =
      _difftime32__ffilocalPtr.asFunction<double Function(int, int)>();

  double difftime64__ffilocal(
    int _Time1,
    int _Time2,
  ) {
    return _difftime64__ffilocal(
      _Time1,
      _Time2,
    );
  }

  late final _difftime64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              time64_t___ffilocal, time64_t___ffilocal)>>('_difftime64');
  late final _difftime64__ffilocal =
      _difftime64__ffilocalPtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> gmtime32__ffilocal(
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _gmtime32__ffilocal(
      _Time,
    );
  }

  late final _gmtime32__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time32_t___ffilocal>)>>('_gmtime32');
  late final _gmtime32__ffilocal = _gmtime32__ffilocalPtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time32_t___ffilocal>)>();

  int gmtime32_s__ffilocal(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _gmtime32_s__ffilocal(
      _Tm,
      _Time,
    );
  }

  late final _gmtime32_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<tm>,
              ffi.Pointer<time32_t___ffilocal>)>>('_gmtime32_s');
  late final _gmtime32_s__ffilocal = _gmtime32_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<tm>, ffi.Pointer<time32_t___ffilocal>)>();

  ffi.Pointer<tm> gmtime64__ffilocal(
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _gmtime64__ffilocal(
      _Time,
    );
  }

  late final _gmtime64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time64_t___ffilocal>)>>('_gmtime64');
  late final _gmtime64__ffilocal = _gmtime64__ffilocalPtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time64_t___ffilocal>)>();

  int gmtime64_s__ffilocal(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _gmtime64_s__ffilocal(
      _Tm,
      _Time,
    );
  }

  late final _gmtime64_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<tm>,
              ffi.Pointer<time64_t___ffilocal>)>>('_gmtime64_s');
  late final _gmtime64_s__ffilocal = _gmtime64_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<tm>, ffi.Pointer<time64_t___ffilocal>)>();

  ffi.Pointer<tm> localtime32__ffilocal(
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _localtime32__ffilocal(
      _Time,
    );
  }

  late final _localtime32__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time32_t___ffilocal>)>>('_localtime32');
  late final _localtime32__ffilocal = _localtime32__ffilocalPtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time32_t___ffilocal>)>();

  int localtime32_s__ffilocal(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _localtime32_s__ffilocal(
      _Tm,
      _Time,
    );
  }

  late final _localtime32_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<tm>,
              ffi.Pointer<time32_t___ffilocal>)>>('_localtime32_s');
  late final _localtime32_s__ffilocal = _localtime32_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<tm>, ffi.Pointer<time32_t___ffilocal>)>();

  ffi.Pointer<tm> localtime64__ffilocal(
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _localtime64__ffilocal(
      _Time,
    );
  }

  late final _localtime64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time64_t___ffilocal>)>>('_localtime64');
  late final _localtime64__ffilocal = _localtime64__ffilocalPtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time64_t___ffilocal>)>();

  int localtime64_s__ffilocal(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _localtime64_s__ffilocal(
      _Tm,
      _Time,
    );
  }

  late final _localtime64_s__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<tm>,
              ffi.Pointer<time64_t___ffilocal>)>>('_localtime64_s');
  late final _localtime64_s__ffilocal = _localtime64_s__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<tm>, ffi.Pointer<time64_t___ffilocal>)>();

  int mkgmtime32__ffilocal(
    ffi.Pointer<tm> _Tm,
  ) {
    return _mkgmtime32__ffilocal(
      _Tm,
    );
  }

  late final _mkgmtime32__ffilocalPtr = _lookup<
          ffi.NativeFunction<time32_t___ffilocal Function(ffi.Pointer<tm>)>>(
      '_mkgmtime32');
  late final _mkgmtime32__ffilocal =
      _mkgmtime32__ffilocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int mkgmtime64__ffilocal(
    ffi.Pointer<tm> _Tm,
  ) {
    return _mkgmtime64__ffilocal(
      _Tm,
    );
  }

  late final _mkgmtime64__ffilocalPtr = _lookup<
          ffi.NativeFunction<time64_t___ffilocal Function(ffi.Pointer<tm>)>>(
      '_mkgmtime64');
  late final _mkgmtime64__ffilocal =
      _mkgmtime64__ffilocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int mktime32__ffilocal(
    ffi.Pointer<tm> _Tm,
  ) {
    return _mktime32__ffilocal(
      _Tm,
    );
  }

  late final _mktime32__ffilocalPtr = _lookup<
          ffi.NativeFunction<time32_t___ffilocal Function(ffi.Pointer<tm>)>>(
      '_mktime32');
  late final _mktime32__ffilocal =
      _mktime32__ffilocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int mktime64__ffilocal(
    ffi.Pointer<tm> _Tm,
  ) {
    return _mktime64__ffilocal(
      _Tm,
    );
  }

  late final _mktime64__ffilocalPtr = _lookup<
          ffi.NativeFunction<time64_t___ffilocal Function(ffi.Pointer<tm>)>>(
      '_mktime64');
  late final _mktime64__ffilocal =
      _mktime64__ffilocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _strftime(
      _Buffer,
      _SizeInBytes,
      _Format,
      _Tm,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<tm>)>();

  int strftime_l__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _MaxSize,
    ffi.Pointer<ffi.Int8> _Format,
    ffi.Pointer<tm> _Tm,
    locale_t__ffilocal _Locale,
  ) {
    return _strftime_l__ffilocal(
      _Buffer,
      _MaxSize,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final _strftime_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<tm>, locale_t__ffilocal)>>('_strftime_l');
  late final _strftime_l__ffilocal = _strftime_l__ffilocalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<tm>, locale_t__ffilocal)>();

  int strdate_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
  ) {
    return _strdate_s__ffilocal(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final _strdate_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      '_strdate_s');
  late final _strdate_s__ffilocal = _strdate_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strdate__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _strdate__ffilocal(
      _Buffer,
    );
  }

  late final _strdate__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strdate');
  late final _strdate__ffilocal = _strdate__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int strtime_s__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _SizeInBytes,
  ) {
    return _strtime_s__ffilocal(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final _strtime_s__ffilocalPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int8>, size_t)>>(
      '_strtime_s');
  late final _strtime_s__ffilocal = _strtime_s__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strtime__ffilocal(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _strtime__ffilocal(
      _Buffer,
    );
  }

  late final _strtime__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('_strtime');
  late final _strtime__ffilocal = _strtime__ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int time32__ffilocal(
    ffi.Pointer<time32_t___ffilocal> _Time,
  ) {
    return _time32__ffilocal(
      _Time,
    );
  }

  late final _time32__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          time32_t___ffilocal Function(
              ffi.Pointer<time32_t___ffilocal>)>>('_time32');
  late final _time32__ffilocal = _time32__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<time32_t___ffilocal>)>();

  int time64__ffilocal(
    ffi.Pointer<time64_t___ffilocal> _Time,
  ) {
    return _time64__ffilocal(
      _Time,
    );
  }

  late final _time64__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          time64_t___ffilocal Function(
              ffi.Pointer<time64_t___ffilocal>)>>('_time64');
  late final _time64__ffilocal = _time64__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<time64_t___ffilocal>)>();

  int timespec32_get__ffilocal(
    ffi.Pointer<timespec32__ffilocal> _Ts,
    int _Base,
  ) {
    return _timespec32_get__ffilocal(
      _Ts,
      _Base,
    );
  }

  late final _timespec32_get__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<timespec32__ffilocal>,
              ffi.Int32)>>('_timespec32_get');
  late final _timespec32_get__ffilocal = _timespec32_get__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<timespec32__ffilocal>, int)>();

  int timespec64_get__ffilocal(
    ffi.Pointer<timespec64__ffilocal> _Ts,
    int _Base,
  ) {
    return _timespec64_get__ffilocal(
      _Ts,
      _Base,
    );
  }

  late final _timespec64_get__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<timespec64__ffilocal>,
              ffi.Int32)>>('_timespec64_get');
  late final _timespec64_get__ffilocal = _timespec64_get__ffilocalPtr
      .asFunction<int Function(ffi.Pointer<timespec64__ffilocal>, int)>();

  void tzset__ffilocal() {
    return _tzset__ffilocal();
  }

  late final _tzset__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_tzset');
  late final _tzset__ffilocal =
      _tzset__ffilocalPtr.asFunction<void Function()>();

  int getsystime__ffilocal(
    ffi.Pointer<tm> _Tm,
  ) {
    return _getsystime__ffilocal(
      _Tm,
    );
  }

  late final _getsystime__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<tm>)>>(
          '_getsystime');
  late final _getsystime__ffilocal =
      _getsystime__ffilocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int setsystime__ffilocal(
    ffi.Pointer<tm> _Tm,
    int _Milliseconds,
  ) {
    return _setsystime__ffilocal(
      _Tm,
      _Milliseconds,
    );
  }

  late final _setsystime__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<tm>, ffi.Uint32)>>(
      '_setsystime');
  late final _setsystime__ffilocal =
      _setsystime__ffilocalPtr.asFunction<int Function(ffi.Pointer<tm>, int)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Uint16> pctype_func___ffilocal() {
    return _pctype_func___ffilocal();
  }

  late final _pctype_func___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function()>>(
          '__pctype_func');
  late final _pctype_func___ffilocal = _pctype_func___ffilocalPtr
      .asFunction<ffi.Pointer<ffi.Uint16> Function()>();

  ffi.Pointer<wctype_t> pwctype_func___ffilocal() {
    return _pwctype_func___ffilocal();
  }

  late final _pwctype_func___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wctype_t> Function()>>(
          '__pwctype_func');
  late final _pwctype_func___ffilocal = _pwctype_func___ffilocalPtr
      .asFunction<ffi.Pointer<wctype_t> Function()>();

  int iswalnum(
    int _C,
  ) {
    return _iswalnum(
      _C,
    );
  }

  late final _iswalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswalnum');
  late final _iswalnum = _iswalnumPtr.asFunction<int Function(int)>();

  int iswalpha(
    int _C,
  ) {
    return _iswalpha(
      _C,
    );
  }

  late final _iswalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswalpha');
  late final _iswalpha = _iswalphaPtr.asFunction<int Function(int)>();

  int iswascii(
    int _C,
  ) {
    return _iswascii(
      _C,
    );
  }

  late final _iswasciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswascii');
  late final _iswascii = _iswasciiPtr.asFunction<int Function(int)>();

  int iswblank(
    int _C,
  ) {
    return _iswblank(
      _C,
    );
  }

  late final _iswblankPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswblank');
  late final _iswblank = _iswblankPtr.asFunction<int Function(int)>();

  int iswcntrl(
    int _C,
  ) {
    return _iswcntrl(
      _C,
    );
  }

  late final _iswcntrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswcntrl');
  late final _iswcntrl = _iswcntrlPtr.asFunction<int Function(int)>();

  int iswdigit(
    int _C,
  ) {
    return _iswdigit(
      _C,
    );
  }

  late final _iswdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswdigit');
  late final _iswdigit = _iswdigitPtr.asFunction<int Function(int)>();

  int iswgraph(
    int _C,
  ) {
    return _iswgraph(
      _C,
    );
  }

  late final _iswgraphPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswgraph');
  late final _iswgraph = _iswgraphPtr.asFunction<int Function(int)>();

  int iswlower(
    int _C,
  ) {
    return _iswlower(
      _C,
    );
  }

  late final _iswlowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswlower');
  late final _iswlower = _iswlowerPtr.asFunction<int Function(int)>();

  int iswprint(
    int _C,
  ) {
    return _iswprint(
      _C,
    );
  }

  late final _iswprintPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswprint');
  late final _iswprint = _iswprintPtr.asFunction<int Function(int)>();

  int iswpunct(
    int _C,
  ) {
    return _iswpunct(
      _C,
    );
  }

  late final _iswpunctPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswpunct');
  late final _iswpunct = _iswpunctPtr.asFunction<int Function(int)>();

  int iswspace(
    int _C,
  ) {
    return _iswspace(
      _C,
    );
  }

  late final _iswspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswspace');
  late final _iswspace = _iswspacePtr.asFunction<int Function(int)>();

  int iswupper(
    int _C,
  ) {
    return _iswupper(
      _C,
    );
  }

  late final _iswupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswupper');
  late final _iswupper = _iswupperPtr.asFunction<int Function(int)>();

  int iswxdigit(
    int _C,
  ) {
    return _iswxdigit(
      _C,
    );
  }

  late final _iswxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('iswxdigit');
  late final _iswxdigit = _iswxdigitPtr.asFunction<int Function(int)>();

  int iswcsymf___ffilocal(
    int _C,
  ) {
    return _iswcsymf___ffilocal(
      _C,
    );
  }

  late final _iswcsymf___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('__iswcsymf');
  late final _iswcsymf___ffilocal =
      _iswcsymf___ffilocalPtr.asFunction<int Function(int)>();

  int iswcsym___ffilocal(
    int _C,
  ) {
    return _iswcsym___ffilocal(
      _C,
    );
  }

  late final _iswcsym___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t)>>('__iswcsym');
  late final _iswcsym___ffilocal =
      _iswcsym___ffilocalPtr.asFunction<int Function(int)>();

  int iswalnum_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswalnum_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswalnum_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswalnum_l');
  late final _iswalnum_l__ffilocal = _iswalnum_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswalpha_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswalpha_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswalpha_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswalpha_l');
  late final _iswalpha_l__ffilocal = _iswalpha_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswblank_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswblank_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswblank_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswblank_l');
  late final _iswblank_l__ffilocal = _iswblank_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswcntrl_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswcntrl_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswcntrl_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswcntrl_l');
  late final _iswcntrl_l__ffilocal = _iswcntrl_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswdigit_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswdigit_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswdigit_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswdigit_l');
  late final _iswdigit_l__ffilocal = _iswdigit_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswgraph_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswgraph_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswgraph_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswgraph_l');
  late final _iswgraph_l__ffilocal = _iswgraph_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswlower_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswlower_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswlower_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswlower_l');
  late final _iswlower_l__ffilocal = _iswlower_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswprint_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswprint_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswprint_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswprint_l');
  late final _iswprint_l__ffilocal = _iswprint_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswpunct_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswpunct_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswpunct_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswpunct_l');
  late final _iswpunct_l__ffilocal = _iswpunct_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswspace_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswspace_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswspace_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswspace_l');
  late final _iswspace_l__ffilocal = _iswspace_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswupper_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswupper_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswupper_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswupper_l');
  late final _iswupper_l__ffilocal = _iswupper_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswxdigit_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswxdigit_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswxdigit_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswxdigit_l');
  late final _iswxdigit_l__ffilocal = _iswxdigit_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswcsymf_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswcsymf_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswcsymf_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswcsymf_l');
  late final _iswcsymf_l__ffilocal = _iswcsymf_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswcsym_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iswcsym_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iswcsym_l__ffilocalPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(wint_t, locale_t__ffilocal)>>(
      '_iswcsym_l');
  late final _iswcsym_l__ffilocal = _iswcsym_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int towupper(
    int _C,
  ) {
    return _towupper(
      _C,
    );
  }

  late final _towupperPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('towupper');
  late final _towupper = _towupperPtr.asFunction<int Function(int)>();

  int towlower(
    int _C,
  ) {
    return _towlower(
      _C,
    );
  }

  late final _towlowerPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t)>>('towlower');
  late final _towlower = _towlowerPtr.asFunction<int Function(int)>();

  int iswctype(
    int _C,
    int _Type,
  ) {
    return _iswctype(
      _C,
      _Type,
    );
  }

  late final _iswctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, wctype_t)>>(
          'iswctype');
  late final _iswctype = _iswctypePtr.asFunction<int Function(int, int)>();

  int towupper_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _towupper_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _towupper_l__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, locale_t__ffilocal)>>(
          '_towupper_l');
  late final _towupper_l__ffilocal = _towupper_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int towlower_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _towlower_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _towlower_l__ffilocalPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, locale_t__ffilocal)>>(
          '_towlower_l');
  late final _towlower_l__ffilocal = _towlower_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iswctype_l__ffilocal(
    int _C,
    int _Type,
    locale_t__ffilocal _Locale,
  ) {
    return _iswctype_l__ffilocal(
      _C,
      _Type,
      _Locale,
    );
  }

  late final _iswctype_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              wint_t, wctype_t, locale_t__ffilocal)>>('_iswctype_l');
  late final _iswctype_l__ffilocal = _iswctype_l__ffilocalPtr
      .asFunction<int Function(int, int, locale_t__ffilocal)>();

  int isleadbyte(
    int _C,
  ) {
    return _isleadbyte(
      _C,
    );
  }

  late final _isleadbytePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isleadbyte');
  late final _isleadbyte = _isleadbytePtr.asFunction<int Function(int)>();

  int isleadbyte_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isleadbyte_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isleadbyte_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isleadbyte_l');
  late final _isleadbyte_l__ffilocal = _isleadbyte_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int is_wctype(
    int _C,
    int _Type,
  ) {
    return _is_wctype(
      _C,
      _Type,
    );
  }

  late final _is_wctypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(wint_t, wctype_t)>>(
          'is_wctype');
  late final _is_wctype = _is_wctypePtr.asFunction<int Function(int, int)>();

  int isctype__ffilocal(
    int _C,
    int _Type,
  ) {
    return _isctype__ffilocal(
      _C,
      _Type,
    );
  }

  late final _isctype__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          '_isctype');
  late final _isctype__ffilocal =
      _isctype__ffilocalPtr.asFunction<int Function(int, int)>();

  int isctype_l__ffilocal(
    int _C,
    int _Type,
    locale_t__ffilocal _Locale,
  ) {
    return _isctype_l__ffilocal(
      _C,
      _Type,
      _Locale,
    );
  }

  late final _isctype_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, locale_t__ffilocal)>>('_isctype_l');
  late final _isctype_l__ffilocal = _isctype_l__ffilocalPtr
      .asFunction<int Function(int, int, locale_t__ffilocal)>();

  int isalpha(
    int _C,
  ) {
    return _isalpha(
      _C,
    );
  }

  late final _isalphaPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isalpha');
  late final _isalpha = _isalphaPtr.asFunction<int Function(int)>();

  int isalpha_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isalpha_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isalpha_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isalpha_l');
  late final _isalpha_l__ffilocal = _isalpha_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isupper(
    int _C,
  ) {
    return _isupper(
      _C,
    );
  }

  late final _isupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isupper');
  late final _isupper = _isupperPtr.asFunction<int Function(int)>();

  int isupper_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isupper_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isupper_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isupper_l');
  late final _isupper_l__ffilocal = _isupper_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int islower(
    int _C,
  ) {
    return _islower(
      _C,
    );
  }

  late final _islowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('islower');
  late final _islower = _islowerPtr.asFunction<int Function(int)>();

  int islower_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _islower_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _islower_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_islower_l');
  late final _islower_l__ffilocal = _islower_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isdigit(
    int _C,
  ) {
    return _isdigit(
      _C,
    );
  }

  late final _isdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isdigit');
  late final _isdigit = _isdigitPtr.asFunction<int Function(int)>();

  int isdigit_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isdigit_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isdigit_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isdigit_l');
  late final _isdigit_l__ffilocal = _isdigit_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isxdigit(
    int _C,
  ) {
    return _isxdigit(
      _C,
    );
  }

  late final _isxdigitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isxdigit');
  late final _isxdigit = _isxdigitPtr.asFunction<int Function(int)>();

  int isxdigit_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isxdigit_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isxdigit_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isxdigit_l');
  late final _isxdigit_l__ffilocal = _isxdigit_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isspace(
    int _C,
  ) {
    return _isspace(
      _C,
    );
  }

  late final _isspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isspace');
  late final _isspace = _isspacePtr.asFunction<int Function(int)>();

  int isspace_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isspace_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isspace_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isspace_l');
  late final _isspace_l__ffilocal = _isspace_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int ispunct(
    int _C,
  ) {
    return _ispunct(
      _C,
    );
  }

  late final _ispunctPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('ispunct');
  late final _ispunct = _ispunctPtr.asFunction<int Function(int)>();

  int ispunct_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _ispunct_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _ispunct_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_ispunct_l');
  late final _ispunct_l__ffilocal = _ispunct_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isblank(
    int _C,
  ) {
    return _isblank(
      _C,
    );
  }

  late final _isblankPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isblank');
  late final _isblank = _isblankPtr.asFunction<int Function(int)>();

  int isblank_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isblank_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isblank_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isblank_l');
  late final _isblank_l__ffilocal = _isblank_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isalnum(
    int _C,
  ) {
    return _isalnum(
      _C,
    );
  }

  late final _isalnumPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isalnum');
  late final _isalnum = _isalnumPtr.asFunction<int Function(int)>();

  int isalnum_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isalnum_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isalnum_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isalnum_l');
  late final _isalnum_l__ffilocal = _isalnum_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isprint(
    int _C,
  ) {
    return _isprint(
      _C,
    );
  }

  late final _isprintPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isprint');
  late final _isprint = _isprintPtr.asFunction<int Function(int)>();

  int isprint_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isprint_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isprint_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isprint_l');
  late final _isprint_l__ffilocal = _isprint_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isgraph(
    int _C,
  ) {
    return _isgraph(
      _C,
    );
  }

  late final _isgraphPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('isgraph');
  late final _isgraph = _isgraphPtr.asFunction<int Function(int)>();

  int isgraph_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _isgraph_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _isgraph_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_isgraph_l');
  late final _isgraph_l__ffilocal = _isgraph_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int iscntrl(
    int _C,
  ) {
    return _iscntrl(
      _C,
    );
  }

  late final _iscntrlPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('iscntrl');
  late final _iscntrl = _iscntrlPtr.asFunction<int Function(int)>();

  int iscntrl_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _iscntrl_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _iscntrl_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_iscntrl_l');
  late final _iscntrl_l__ffilocal = _iscntrl_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int toupper(
    int _C,
  ) {
    return _toupper(
      _C,
    );
  }

  late final _toupperPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('toupper');
  late final _toupper = _toupperPtr.asFunction<int Function(int)>();

  int tolower(
    int _C,
  ) {
    return _tolower(
      _C,
    );
  }

  late final _tolowerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('tolower');
  late final _tolower = _tolowerPtr.asFunction<int Function(int)>();

  int tolower__ffilocal(
    int _C,
  ) {
    return _tolower__ffilocal(
      _C,
    );
  }

  late final _tolower__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('_tolower');
  late final _tolower__ffilocal =
      _tolower__ffilocalPtr.asFunction<int Function(int)>();

  int tolower_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _tolower_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _tolower_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_tolower_l');
  late final _tolower_l__ffilocal = _tolower_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int toupper__ffilocal(
    int _C,
  ) {
    return _toupper__ffilocal(
      _C,
    );
  }

  late final _toupper__ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('_toupper');
  late final _toupper__ffilocal =
      _toupper__ffilocalPtr.asFunction<int Function(int)>();

  int toupper_l__ffilocal(
    int _C,
    locale_t__ffilocal _Locale,
  ) {
    return _toupper_l__ffilocal(
      _C,
      _Locale,
    );
  }

  late final _toupper_l__ffilocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, locale_t__ffilocal)>>('_toupper_l');
  late final _toupper_l__ffilocal = _toupper_l__ffilocalPtr
      .asFunction<int Function(int, locale_t__ffilocal)>();

  int isascii___ffilocal(
    int _C,
  ) {
    return _isascii___ffilocal(
      _C,
    );
  }

  late final _isascii___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('__isascii');
  late final _isascii___ffilocal =
      _isascii___ffilocalPtr.asFunction<int Function(int)>();

  int toascii___ffilocal(
    int _C,
  ) {
    return _toascii___ffilocal(
      _C,
    );
  }

  late final _toascii___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('__toascii');
  late final _toascii___ffilocal =
      _toascii___ffilocalPtr.asFunction<int Function(int)>();

  int iscsymf___ffilocal(
    int _C,
  ) {
    return _iscsymf___ffilocal(
      _C,
    );
  }

  late final _iscsymf___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('__iscsymf');
  late final _iscsymf___ffilocal =
      _iscsymf___ffilocalPtr.asFunction<int Function(int)>();

  int iscsym___ffilocal(
    int _C,
  ) {
    return _iscsym___ffilocal(
      _C,
    );
  }

  late final _iscsym___ffilocalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('__iscsym');
  late final _iscsym___ffilocal =
      _iscsym___ffilocalPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _chisqr =
      _lookup<ffi.Pointer<ffi.Double>>('chisqr');

  ffi.Pointer<ffi.Double> get chisqr => _chisqr.value;

  set chisqr(ffi.Pointer<ffi.Double> value) => _chisqr.value = value;

  late final ffi.Pointer<prcopt_t> _prcopt_default =
      _lookup<prcopt_t>('prcopt_default');

  prcopt_t get prcopt_default => _prcopt_default.ref;

  late final ffi.Pointer<solopt_t> _solopt_default =
      _lookup<solopt_t>('solopt_default');

  solopt_t get solopt_default => _solopt_default.ref;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<sbsigpband_t>>> _igpband1 =
      _lookup<ffi.Pointer<ffi.Pointer<sbsigpband_t>>>('igpband1');

  ffi.Pointer<ffi.Pointer<sbsigpband_t>> get igpband1 => _igpband1.value;

  set igpband1(ffi.Pointer<ffi.Pointer<sbsigpband_t>> value) =>
      _igpband1.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<sbsigpband_t>>> _igpband2 =
      _lookup<ffi.Pointer<ffi.Pointer<sbsigpband_t>>>('igpband2');

  ffi.Pointer<ffi.Pointer<sbsigpband_t>> get igpband2 => _igpband2.value;

  set igpband2(ffi.Pointer<ffi.Pointer<sbsigpband_t>> value) =>
      _igpband2.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _formatstrs =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('formatstrs');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get formatstrs => _formatstrs.value;

  set formatstrs(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _formatstrs.value = value;

  late final ffi.Pointer<ffi.Pointer<opt_t>> _sysopts =
      _lookup<ffi.Pointer<opt_t>>('sysopts');

  ffi.Pointer<opt_t> get sysopts => _sysopts.value;

  set sysopts(ffi.Pointer<opt_t> value) => _sysopts.value = value;

  int satno(
    int sys,
    int prn,
  ) {
    return _satno(
      sys,
      prn,
    );
  }

  late final _satnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'satno');
  late final _satno = _satnoPtr.asFunction<int Function(int, int)>();

  int satsys(
    int sat,
    ffi.Pointer<ffi.Int32> prn,
  ) {
    return _satsys(
      sat,
      prn,
    );
  }

  late final _satsysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int32>)>>('satsys');
  late final _satsys =
      _satsysPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int32>)>();

  int satid2no(
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _satid2no(
      id,
    );
  }

  late final _satid2noPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'satid2no');
  late final _satid2no =
      _satid2noPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void satno2id(
    int sat,
    ffi.Pointer<ffi.Int8> id,
  ) {
    return _satno2id(
      sat,
      id,
    );
  }

  late final _satno2idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('satno2id');
  late final _satno2id =
      _satno2idPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  int obs2code(
    ffi.Pointer<ffi.Int8> obs,
  ) {
    return _obs2code(
      obs,
    );
  }

  late final _obs2codePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Int8>)>>(
          'obs2code');
  late final _obs2code =
      _obs2codePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> code2obs(
    int code,
  ) {
    return _code2obs(
      code,
    );
  }

  late final _code2obsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Uint8)>>(
          'code2obs');
  late final _code2obs =
      _code2obsPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  double code2freq(
    int sys,
    int code,
    int fcn,
  ) {
    return _code2freq(
      sys,
      code,
      fcn,
    );
  }

  late final _code2freqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Uint8, ffi.Int32)>>('code2freq');
  late final _code2freq =
      _code2freqPtr.asFunction<double Function(int, int, int)>();

  double sat2freq(
    int sat,
    int code,
    ffi.Pointer<nav_t> nav,
  ) {
    return _sat2freq(
      sat,
      code,
      nav,
    );
  }

  late final _sat2freqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Uint8, ffi.Pointer<nav_t>)>>('sat2freq');
  late final _sat2freq =
      _sat2freqPtr.asFunction<double Function(int, int, ffi.Pointer<nav_t>)>();

  int code2idx(
    int sys,
    int code,
  ) {
    return _code2idx(
      sys,
      code,
    );
  }

  late final _code2idxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Uint8)>>(
          'code2idx');
  late final _code2idx = _code2idxPtr.asFunction<int Function(int, int)>();

  int satexclude(
    int sat,
    double var1,
    int svh,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _satexclude(
      sat,
      var1,
      svh,
      opt,
    );
  }

  late final _satexcludePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Int32,
              ffi.Pointer<prcopt_t>)>>('satexclude');
  late final _satexclude = _satexcludePtr
      .asFunction<int Function(int, double, int, ffi.Pointer<prcopt_t>)>();

  int testsnr(
    int base,
    int freq,
    double el,
    double snr,
    ffi.Pointer<snrmask_t> mask,
  ) {
    return _testsnr(
      base,
      freq,
      el,
      snr,
      mask,
    );
  }

  late final _testsnrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<snrmask_t>)>>('testsnr');
  late final _testsnr = _testsnrPtr.asFunction<
      int Function(int, int, double, double, ffi.Pointer<snrmask_t>)>();

  void setcodepri(
    int sys,
    int idx,
    ffi.Pointer<ffi.Int8> pri,
  ) {
    return _setcodepri(
      sys,
      idx,
      pri,
    );
  }

  late final _setcodepriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('setcodepri');
  late final _setcodepri = _setcodepriPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int getcodepri(
    int sys,
    int code,
    ffi.Pointer<ffi.Int8> opt,
  ) {
    return _getcodepri(
      sys,
      code,
      opt,
    );
  }

  late final _getcodepriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Uint8, ffi.Pointer<ffi.Int8>)>>('getcodepri');
  late final _getcodepri = _getcodepriPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Double> mat(
    int n,
    int m,
  ) {
    return _mat(
      n,
      m,
    );
  }

  late final _matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Int32, ffi.Int32)>>('mat');
  late final _mat =
      _matPtr.asFunction<ffi.Pointer<ffi.Double> Function(int, int)>();

  ffi.Pointer<ffi.Int32> imat(
    int n,
    int m,
  ) {
    return _imat(
      n,
      m,
    );
  }

  late final _imatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Int32, ffi.Int32)>>('imat');
  late final _imat =
      _imatPtr.asFunction<ffi.Pointer<ffi.Int32> Function(int, int)>();

  ffi.Pointer<ffi.Double> zeros(
    int n,
    int m,
  ) {
    return _zeros(
      n,
      m,
    );
  }

  late final _zerosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Int32, ffi.Int32)>>('zeros');
  late final _zeros =
      _zerosPtr.asFunction<ffi.Pointer<ffi.Double> Function(int, int)>();

  ffi.Pointer<ffi.Double> eye(
    int n,
  ) {
    return _eye(
      n,
    );
  }

  late final _eyePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Int32)>>(
          'eye');
  late final _eye = _eyePtr.asFunction<ffi.Pointer<ffi.Double> Function(int)>();

  double dot(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    int n,
  ) {
    return _dot(
      a,
      b,
      n,
    );
  }

  late final _dotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('dot');
  late final _dot = _dotPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int)>();

  double norm(
    ffi.Pointer<ffi.Double> a,
    int n,
  ) {
    return _norm(
      a,
      n,
    );
  }

  late final _normPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Int32)>>('norm');
  late final _norm =
      _normPtr.asFunction<double Function(ffi.Pointer<ffi.Double>, int)>();

  void cross3(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    ffi.Pointer<ffi.Double> c,
  ) {
    return _cross3(
      a,
      b,
      c,
    );
  }

  late final _cross3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cross3');
  late final _cross3 = _cross3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int normv3(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
  ) {
    return _normv3(
      a,
      b,
    );
  }

  late final _normv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('normv3');
  late final _normv3 = _normv3Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void matcpy(
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> B,
    int n,
    int m,
  ) {
    return _matcpy(
      A,
      B,
      n,
      m,
    );
  }

  late final _matcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Int32, ffi.Int32)>>('matcpy');
  late final _matcpy = _matcpyPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  void matmul(
    ffi.Pointer<ffi.Int8> tr,
    int n,
    int k,
    int m,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> B,
    double beta,
    ffi.Pointer<ffi.Double> C,
  ) {
    return _matmul(
      tr,
      n,
      k,
      m,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _matmulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('matmul');
  late final _matmul = _matmulPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int8>,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Double>)>();

  int matinv(
    ffi.Pointer<ffi.Double> A,
    int n,
  ) {
    return _matinv(
      A,
      n,
    );
  }

  late final _matinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Int32)>>('matinv');
  late final _matinv =
      _matinvPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int solve(
    ffi.Pointer<ffi.Int8> tr,
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> Y,
    int n,
    int m,
    ffi.Pointer<ffi.Double> X,
  ) {
    return _solve(
      tr,
      A,
      Y,
      n,
      m,
      X,
    );
  }

  late final _solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>)>>('solve');
  late final _solve = _solvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  int lsq(
    ffi.Pointer<ffi.Double> A,
    ffi.Pointer<ffi.Double> y,
    int n,
    int m,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> Q,
  ) {
    return _lsq(
      A,
      y,
      n,
      m,
      x,
      Q,
    );
  }

  late final _lsqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lsq');
  late final _lsq = _lsqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int filter(
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> P,
    ffi.Pointer<ffi.Double> H,
    ffi.Pointer<ffi.Double> v,
    ffi.Pointer<ffi.Double> R,
    int n,
    int m,
  ) {
    return _filter(
      x,
      P,
      H,
      v,
      R,
      n,
      m,
    );
  }

  late final _filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Int32)>>('filter');
  late final _filter = _filterPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          int)>();

  int smoother(
    ffi.Pointer<ffi.Double> xf,
    ffi.Pointer<ffi.Double> Qf,
    ffi.Pointer<ffi.Double> xb,
    ffi.Pointer<ffi.Double> Qb,
    int n,
    ffi.Pointer<ffi.Double> xs,
    ffi.Pointer<ffi.Double> Qs,
  ) {
    return _smoother(
      xf,
      Qf,
      xb,
      Qb,
      n,
      xs,
      Qs,
    );
  }

  late final _smootherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('smoother');
  late final _smoother = _smootherPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void matprint(
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
  ) {
    return _matprint(
      A,
      n,
      m,
      p,
      q,
    );
  }

  late final _matprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('matprint');
  late final _matprint = _matprintPtr
      .asFunction<void Function(ffi.Pointer<ffi.Double>, int, int, int, int)>();

  void matfprint(
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
    ffi.Pointer<FILE> fp,
  ) {
    return _matfprint(
      A,
      n,
      m,
      p,
      q,
      fp,
    );
  }

  late final _matfprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Pointer<FILE>)>>('matfprint');
  late final _matfprint = _matfprintPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, int, int, int, int, ffi.Pointer<FILE>)>();

  void add_fatal(
    ffi.Pointer<fatalfunc_t> func,
  ) {
    return _add_fatal(
      func,
    );
  }

  late final _add_fatalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<fatalfunc_t>)>>(
          'add_fatal');
  late final _add_fatal =
      _add_fatalPtr.asFunction<void Function(ffi.Pointer<fatalfunc_t>)>();

  double str2num(
    ffi.Pointer<ffi.Int8> s,
    int i,
    int n,
  ) {
    return _str2num(
      s,
      i,
      n,
    );
  }

  late final _str2numPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32)>>('str2num');
  late final _str2num = _str2numPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int str2time(
    ffi.Pointer<ffi.Int8> s,
    int i,
    int n,
    ffi.Pointer<gtime_t> t,
  ) {
    return _str2time(
      s,
      i,
      n,
      t,
    );
  }

  late final _str2timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32,
              ffi.Pointer<gtime_t>)>>('str2time');
  late final _str2time = _str2timePtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<gtime_t>)>();

  void time2str(
    gtime_t t,
    ffi.Pointer<ffi.Int8> str,
    int n,
  ) {
    return _time2str(
      t,
      str,
      n,
    );
  }

  late final _time2strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('time2str');
  late final _time2str = _time2strPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Int8>, int)>();

  gtime_t epoch2time(
    ffi.Pointer<ffi.Double> ep,
  ) {
    return _epoch2time(
      ep,
    );
  }

  late final _epoch2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Pointer<ffi.Double>)>>(
          'epoch2time');
  late final _epoch2time =
      _epoch2timePtr.asFunction<gtime_t Function(ffi.Pointer<ffi.Double>)>();

  void time2epoch(
    gtime_t t,
    ffi.Pointer<ffi.Double> ep,
  ) {
    return _time2epoch(
      t,
      ep,
    );
  }

  late final _time2epochPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>)>>('time2epoch');
  late final _time2epoch = _time2epochPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Double>)>();

  void time2epoch_n(
    gtime_t t,
    ffi.Pointer<ffi.Double> ep,
    int n,
  ) {
    return _time2epoch_n(
      t,
      ep,
      n,
    );
  }

  late final _time2epoch_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t, ffi.Pointer<ffi.Double>, ffi.Int32)>>('time2epoch_n');
  late final _time2epoch_n = _time2epoch_nPtr
      .asFunction<void Function(gtime_t, ffi.Pointer<ffi.Double>, int)>();

  gtime_t gpst2time(
    int week,
    double sec,
  ) {
    return _gpst2time(
      week,
      sec,
    );
  }

  late final _gpst2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Int32, ffi.Double)>>(
          'gpst2time');
  late final _gpst2time =
      _gpst2timePtr.asFunction<gtime_t Function(int, double)>();

  double time2gpst(
    gtime_t t,
    ffi.Pointer<ffi.Int32> week,
  ) {
    return _time2gpst(
      t,
      week,
    );
  }

  late final _time2gpstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Int32>)>>('time2gpst');
  late final _time2gpst = _time2gpstPtr
      .asFunction<double Function(gtime_t, ffi.Pointer<ffi.Int32>)>();

  gtime_t gst2time(
    int week,
    double sec,
  ) {
    return _gst2time(
      week,
      sec,
    );
  }

  late final _gst2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Int32, ffi.Double)>>(
          'gst2time');
  late final _gst2time =
      _gst2timePtr.asFunction<gtime_t Function(int, double)>();

  double time2gst(
    gtime_t t,
    ffi.Pointer<ffi.Int32> week,
  ) {
    return _time2gst(
      t,
      week,
    );
  }

  late final _time2gstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Int32>)>>('time2gst');
  late final _time2gst = _time2gstPtr
      .asFunction<double Function(gtime_t, ffi.Pointer<ffi.Int32>)>();

  gtime_t bdt2time(
    int week,
    double sec,
  ) {
    return _bdt2time(
      week,
      sec,
    );
  }

  late final _bdt2timePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Int32, ffi.Double)>>(
          'bdt2time');
  late final _bdt2time =
      _bdt2timePtr.asFunction<gtime_t Function(int, double)>();

  double time2bdt(
    gtime_t t,
    ffi.Pointer<ffi.Int32> week,
  ) {
    return _time2bdt(
      t,
      week,
    );
  }

  late final _time2bdtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Int32>)>>('time2bdt');
  late final _time2bdt = _time2bdtPtr
      .asFunction<double Function(gtime_t, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> time_str(
    gtime_t t,
    int n,
  ) {
    return _time_str(
      t,
      n,
    );
  }

  late final _time_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(gtime_t, ffi.Int32)>>('time_str');
  late final _time_str =
      _time_strPtr.asFunction<ffi.Pointer<ffi.Int8> Function(gtime_t, int)>();

  gtime_t timeadd(
    gtime_t t,
    double sec,
  ) {
    return _timeadd(
      t,
      sec,
    );
  }

  late final _timeaddPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t, ffi.Double)>>(
          'timeadd');
  late final _timeadd =
      _timeaddPtr.asFunction<gtime_t Function(gtime_t, double)>();

  double timediff(
    gtime_t t1,
    gtime_t t2,
  ) {
    return _timediff(
      t1,
      t2,
    );
  }

  late final _timediffPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gtime_t, gtime_t)>>(
          'timediff');
  late final _timediff =
      _timediffPtr.asFunction<double Function(gtime_t, gtime_t)>();

  gtime_t gpst2utc(
    gtime_t t,
  ) {
    return _gpst2utc(
      t,
    );
  }

  late final _gpst2utcPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('gpst2utc');
  late final _gpst2utc = _gpst2utcPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t utc2gpst(
    gtime_t t,
  ) {
    return _utc2gpst(
      t,
    );
  }

  late final _utc2gpstPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('utc2gpst');
  late final _utc2gpst = _utc2gpstPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t gpst2bdt(
    gtime_t t,
  ) {
    return _gpst2bdt(
      t,
    );
  }

  late final _gpst2bdtPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('gpst2bdt');
  late final _gpst2bdt = _gpst2bdtPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t bdt2gpst(
    gtime_t t,
  ) {
    return _bdt2gpst(
      t,
    );
  }

  late final _bdt2gpstPtr =
      _lookup<ffi.NativeFunction<gtime_t Function(gtime_t)>>('bdt2gpst');
  late final _bdt2gpst = _bdt2gpstPtr.asFunction<gtime_t Function(gtime_t)>();

  gtime_t timeget() {
    return _timeget();
  }

  late final _timegetPtr =
      _lookup<ffi.NativeFunction<gtime_t Function()>>('timeget');
  late final _timeget = _timegetPtr.asFunction<gtime_t Function()>();

  void timeset(
    gtime_t t,
  ) {
    return _timeset(
      t,
    );
  }

  late final _timesetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gtime_t)>>('timeset');
  late final _timeset = _timesetPtr.asFunction<void Function(gtime_t)>();

  void timereset() {
    return _timereset();
  }

  late final _timeresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('timereset');
  late final _timereset = _timeresetPtr.asFunction<void Function()>();

  double time2doy(
    gtime_t t,
  ) {
    return _time2doy(
      t,
    );
  }

  late final _time2doyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gtime_t)>>('time2doy');
  late final _time2doy = _time2doyPtr.asFunction<double Function(gtime_t)>();

  double utc2gmst(
    gtime_t t,
    double ut1_utc,
  ) {
    return _utc2gmst(
      t,
      ut1_utc,
    );
  }

  late final _utc2gmstPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gtime_t, ffi.Double)>>(
          'utc2gmst');
  late final _utc2gmst =
      _utc2gmstPtr.asFunction<double Function(gtime_t, double)>();

  int read_leaps(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _read_leaps(
      file,
    );
  }

  late final _read_leapsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'read_leaps');
  late final _read_leaps =
      _read_leapsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int adjgpsweek(
    int week,
  ) {
    return _adjgpsweek(
      week,
    );
  }

  late final _adjgpsweekPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('adjgpsweek');
  late final _adjgpsweek = _adjgpsweekPtr.asFunction<int Function(int)>();

  int tickget() {
    return _tickget();
  }

  late final _tickgetPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('tickget');
  late final _tickget = _tickgetPtr.asFunction<int Function()>();

  void sleepms(
    int ms,
  ) {
    return _sleepms(
      ms,
    );
  }

  late final _sleepmsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('sleepms');
  late final _sleepms = _sleepmsPtr.asFunction<void Function(int)>();

  int reppath(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> rpath,
    gtime_t time,
    ffi.Pointer<ffi.Int8> rov,
    ffi.Pointer<ffi.Int8> base,
  ) {
    return _reppath(
      path,
      rpath,
      time,
      rov,
      base,
    );
  }

  late final _reppathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              gtime_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('reppath');
  late final _reppath = _reppathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, gtime_t,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int reppaths(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> rpaths,
    int nmax,
    gtime_t ts,
    gtime_t te,
    ffi.Pointer<ffi.Int8> rov,
    ffi.Pointer<ffi.Int8> base,
  ) {
    return _reppaths(
      path,
      rpaths,
      nmax,
      ts,
      te,
      rov,
      base,
    );
  }

  late final _reppathsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              gtime_t,
              gtime_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('reppaths');
  late final _reppaths = _reppathsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int,
          gtime_t,
          gtime_t,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void ecef2pos(
    ffi.Pointer<ffi.Double> r,
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _ecef2pos(
      r,
      pos,
    );
  }

  late final _ecef2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('ecef2pos');
  late final _ecef2pos = _ecef2posPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void pos2ecef(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> r,
  ) {
    return _pos2ecef(
      pos,
      r,
    );
  }

  late final _pos2ecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('pos2ecef');
  late final _pos2ecef = _pos2ecefPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void ecef2enu(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> r,
    ffi.Pointer<ffi.Double> e,
  ) {
    return _ecef2enu(
      pos,
      r,
      e,
    );
  }

  late final _ecef2enuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ecef2enu');
  late final _ecef2enu = _ecef2enuPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void enu2ecef(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> e,
    ffi.Pointer<ffi.Double> r,
  ) {
    return _enu2ecef(
      pos,
      e,
      r,
    );
  }

  late final _enu2ecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('enu2ecef');
  late final _enu2ecef = _enu2ecefPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void covenu(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> P,
    ffi.Pointer<ffi.Double> Q,
  ) {
    return _covenu(
      pos,
      P,
      Q,
    );
  }

  late final _covenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('covenu');
  late final _covenu = _covenuPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void covecef(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _covecef(
      pos,
      Q,
      P,
    );
  }

  late final _covecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('covecef');
  late final _covecef = _covecefPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void xyz2enu(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> E,
  ) {
    return _xyz2enu(
      pos,
      E,
    );
  }

  late final _xyz2enuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('xyz2enu');
  late final _xyz2enu = _xyz2enuPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void eci2ecef(
    gtime_t tutc,
    ffi.Pointer<ffi.Double> erpv,
    ffi.Pointer<ffi.Double> U,
    ffi.Pointer<ffi.Double> gmst,
  ) {
    return _eci2ecef(
      tutc,
      erpv,
      U,
      gmst,
    );
  }

  late final _eci2ecefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('eci2ecef');
  late final _eci2ecef = _eci2ecefPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void deg2dms(
    double deg,
    ffi.Pointer<ffi.Double> dms,
    int ndec,
  ) {
    return _deg2dms(
      deg,
      dms,
      ndec,
    );
  }

  late final _deg2dmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int32)>>('deg2dms');
  late final _deg2dms = _deg2dmsPtr
      .asFunction<void Function(double, ffi.Pointer<ffi.Double>, int)>();

  double dms2deg(
    ffi.Pointer<ffi.Double> dms,
  ) {
    return _dms2deg(
      dms,
    );
  }

  late final _dms2degPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Double>)>>(
          'dms2deg');
  late final _dms2deg =
      _dms2degPtr.asFunction<double Function(ffi.Pointer<ffi.Double>)>();

  void readpos(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> rcv,
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _readpos(
      file,
      rcv,
      pos,
    );
  }

  late final _readposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Double>)>>('readpos');
  late final _readpos = _readposPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Double>)>();

  int sortobs(
    ffi.Pointer<obs_t> obs,
  ) {
    return _sortobs(
      obs,
    );
  }

  late final _sortobsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<obs_t>)>>(
          'sortobs');
  late final _sortobs =
      _sortobsPtr.asFunction<int Function(ffi.Pointer<obs_t>)>();

  void uniqnav(
    ffi.Pointer<nav_t> nav,
  ) {
    return _uniqnav(
      nav,
    );
  }

  late final _uniqnavPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nav_t>)>>(
          'uniqnav');
  late final _uniqnav =
      _uniqnavPtr.asFunction<void Function(ffi.Pointer<nav_t>)>();

  int screent(
    gtime_t time,
    gtime_t ts,
    gtime_t te,
    double tint,
  ) {
    return _screent(
      time,
      ts,
      te,
      tint,
    );
  }

  late final _screentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t, gtime_t, gtime_t, ffi.Double)>>('screent');
  late final _screent =
      _screentPtr.asFunction<int Function(gtime_t, gtime_t, gtime_t, double)>();

  int readnav(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readnav(
      file,
      nav,
    );
  }

  late final _readnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>>('readnav');
  late final _readnav = _readnavPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>();

  int savenav(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _savenav(
      file,
      nav,
    );
  }

  late final _savenavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>>('savenav');
  late final _savenav = _savenavPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>();

  void freeobs(
    ffi.Pointer<obs_t> obs,
  ) {
    return _freeobs(
      obs,
    );
  }

  late final _freeobsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<obs_t>)>>(
          'freeobs');
  late final _freeobs =
      _freeobsPtr.asFunction<void Function(ffi.Pointer<obs_t>)>();

  void freenav(
    ffi.Pointer<nav_t> nav,
    int opt,
  ) {
    return _freenav(
      nav,
      opt,
    );
  }

  late final _freenavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nav_t>, ffi.Int32)>>(
      'freenav');
  late final _freenav =
      _freenavPtr.asFunction<void Function(ffi.Pointer<nav_t>, int)>();

  int readblq(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> sta,
    ffi.Pointer<ffi.Double> odisp,
  ) {
    return _readblq(
      file,
      sta,
      odisp,
    );
  }

  late final _readblqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Double>)>>('readblq');
  late final _readblq = _readblqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Double>)>();

  int readerp(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<erp_t> erp,
  ) {
    return _readerp(
      file,
      erp,
    );
  }

  late final _readerpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<erp_t>)>>('readerp');
  late final _readerp = _readerpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<erp_t>)>();

  int geterp(
    ffi.Pointer<erp_t> erp,
    gtime_t time,
    ffi.Pointer<ffi.Double> val,
  ) {
    return _geterp(
      erp,
      time,
      val,
    );
  }

  late final _geterpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<erp_t>, gtime_t, ffi.Pointer<ffi.Double>)>>('geterp');
  late final _geterp = _geterpPtr.asFunction<
      int Function(ffi.Pointer<erp_t>, gtime_t, ffi.Pointer<ffi.Double>)>();

  void traceopen(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _traceopen(
      file,
    );
  }

  late final _traceopenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'traceopen');
  late final _traceopen =
      _traceopenPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void traceclose() {
    return _traceclose();
  }

  late final _traceclosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('traceclose');
  late final _traceclose = _traceclosePtr.asFunction<void Function()>();

  void tracelevel(
    int level,
  ) {
    return _tracelevel(
      level,
    );
  }

  late final _tracelevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('tracelevel');
  late final _tracelevel = _tracelevelPtr.asFunction<void Function(int)>();

  void trace(
    int level,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _trace(
      level,
      format,
    );
  }

  late final _tracePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('trace');
  late final _trace =
      _tracePtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  void tracet(
    int level,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _tracet(
      level,
      format,
    );
  }

  late final _tracetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('tracet');
  late final _tracet =
      _tracetPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  void tracemat(
    int level,
    ffi.Pointer<ffi.Double> A,
    int n,
    int m,
    int p,
    int q,
  ) {
    return _tracemat(
      level,
      A,
      n,
      m,
      p,
      q,
    );
  }

  late final _tracematPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32,
              ffi.Int32, ffi.Int32, ffi.Int32)>>('tracemat');
  late final _tracemat = _tracematPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Double>, int, int, int, int)>();

  void traceobs(
    int level,
    ffi.Pointer<obsd_t> obs,
    int n,
  ) {
    return _traceobs(
      level,
      obs,
      n,
    );
  }

  late final _traceobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Pointer<obsd_t>, ffi.Int32)>>('traceobs');
  late final _traceobs =
      _traceobsPtr.asFunction<void Function(int, ffi.Pointer<obsd_t>, int)>();

  void tracenav(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracenav(
      level,
      nav,
    );
  }

  late final _tracenavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<nav_t>)>>(
      'tracenav');
  late final _tracenav =
      _tracenavPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracegnav(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracegnav(
      level,
      nav,
    );
  }

  late final _tracegnavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<nav_t>)>>(
      'tracegnav');
  late final _tracegnav =
      _tracegnavPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracehnav(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracehnav(
      level,
      nav,
    );
  }

  late final _tracehnavPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<nav_t>)>>(
      'tracehnav');
  late final _tracehnav =
      _tracehnavPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracepeph(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracepeph(
      level,
      nav,
    );
  }

  late final _tracepephPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<nav_t>)>>(
      'tracepeph');
  late final _tracepeph =
      _tracepephPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void tracepclk(
    int level,
    ffi.Pointer<nav_t> nav,
  ) {
    return _tracepclk(
      level,
      nav,
    );
  }

  late final _tracepclkPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<nav_t>)>>(
      'tracepclk');
  late final _tracepclk =
      _tracepclkPtr.asFunction<void Function(int, ffi.Pointer<nav_t>)>();

  void traceb(
    int level,
    ffi.Pointer<ffi.Uint8> p,
    int n,
  ) {
    return _traceb(
      level,
      p,
      n,
    );
  }

  late final _tracebPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('traceb');
  late final _traceb =
      _tracebPtr.asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int)>();

  int gettracelevel() {
    return _gettracelevel();
  }

  late final _gettracelevelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('gettracelevel');
  late final _gettracelevel = _gettracelevelPtr.asFunction<int Function()>();

  int execcmd(
    ffi.Pointer<ffi.Int8> cmd,
  ) {
    return _execcmd(
      cmd,
    );
  }

  late final _execcmdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'execcmd');
  late final _execcmd =
      _execcmdPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int expath(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> paths,
    int nmax,
  ) {
    return _expath(
      path,
      paths,
      nmax,
    );
  }

  late final _expathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('expath');
  late final _expath = _expathPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  void createdir(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _createdir(
      path,
    );
  }

  late final _createdirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'createdir');
  late final _createdir =
      _createdirPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  double satazel(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> e,
    ffi.Pointer<ffi.Double> azel,
  ) {
    return _satazel(
      pos,
      e,
      azel,
    );
  }

  late final _satazelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('satazel');
  late final _satazel = _satazelPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double geodist(
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> rr,
    ffi.Pointer<ffi.Double> e,
  ) {
    return _geodist(
      rs,
      rr,
      e,
    );
  }

  late final _geodistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('geodist');
  late final _geodist = _geodistPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void dops(
    int ns,
    ffi.Pointer<ffi.Double> azel,
    double elmin,
    ffi.Pointer<ffi.Double> dop,
  ) {
    return _dops(
      ns,
      azel,
      elmin,
      dop,
    );
  }

  late final _dopsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('dops');
  late final _dops = _dopsPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Double>, double, ffi.Pointer<ffi.Double>)>();

  double ionmodel(
    gtime_t t,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
  ) {
    return _ionmodel(
      t,
      ion,
      pos,
      azel,
    );
  }

  late final _ionmodelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('ionmodel');
  late final _ionmodel = _ionmodelPtr.asFunction<
      double Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double ionmapf(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
  ) {
    return _ionmapf(
      pos,
      azel,
    );
  }

  late final _ionmapfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('ionmapf');
  late final _ionmapf = _ionmapfPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double ionppp(
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    double re,
    double hion,
    ffi.Pointer<ffi.Double> pppos,
  ) {
    return _ionppp(
      pos,
      azel,
      re,
      hion,
      pppos,
    );
  }

  late final _ionpppPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>)>>('ionppp');
  late final _ionppp = _ionpppPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, double,
          double, ffi.Pointer<ffi.Double>)>();

  double tropmodel(
    gtime_t time,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    double humi,
  ) {
    return _tropmodel(
      time,
      pos,
      azel,
      humi,
    );
  }

  late final _tropmodelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Double)>>('tropmodel');
  late final _tropmodel = _tropmodelPtr.asFunction<
      double Function(
          gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, double)>();

  double tropmapf(
    gtime_t time,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> mapfw,
  ) {
    return _tropmapf(
      time,
      pos,
      azel,
      mapfw,
    );
  }

  late final _tropmapfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('tropmapf');
  late final _tropmapf = _tropmapfPtr.asFunction<
      double Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int iontec(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    int opt,
    ffi.Pointer<ffi.Double> delay,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _iontec(
      time,
      nav,
      pos,
      azel,
      opt,
      delay,
      var1,
    );
  }

  late final _iontecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('iontec');
  late final _iontec = _iontecPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void readtec(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
    int opt,
  ) {
    return _readtec(
      file,
      nav,
      opt,
    );
  }

  late final _readtecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>,
              ffi.Int32)>>('readtec');
  late final _readtec = _readtecPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>, int)>();

  int ionocorr(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    int sat,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    int ionoopt,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _ionocorr(
      time,
      nav,
      sat,
      pos,
      azel,
      ionoopt,
      ion,
      var1,
    );
  }

  late final _ionocorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ionocorr');
  late final _ionocorr = _ionocorrPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int tropcorr(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    int tropopt,
    ffi.Pointer<ffi.Double> trp,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _tropcorr(
      time,
      nav,
      pos,
      azel,
      tropopt,
      trp,
      var1,
    );
  }

  late final _tropcorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('tropcorr');
  late final _tropcorr = _tropcorrPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int seliflc(
    int optnf,
    int sys,
  ) {
    return _seliflc(
      optnf,
      sys,
    );
  }

  late final _seliflcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'seliflc');
  late final _seliflc = _seliflcPtr.asFunction<int Function(int, int)>();

  int readpcv(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<pcvs_t> pcvs,
  ) {
    return _readpcv(
      file,
      pcvs,
    );
  }

  late final _readpcvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<pcvs_t>)>>('readpcv');
  late final _readpcv = _readpcvPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<pcvs_t>)>();

  ffi.Pointer<pcv_t> searchpcv(
    int sat,
    ffi.Pointer<ffi.Int8> type,
    gtime_t time,
    ffi.Pointer<pcvs_t> pcvs,
  ) {
    return _searchpcv(
      sat,
      type,
      time,
      pcvs,
    );
  }

  late final _searchpcvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pcv_t> Function(ffi.Int32, ffi.Pointer<ffi.Int8>, gtime_t,
              ffi.Pointer<pcvs_t>)>>('searchpcv');
  late final _searchpcv = _searchpcvPtr.asFunction<
      ffi.Pointer<pcv_t> Function(
          int, ffi.Pointer<ffi.Int8>, gtime_t, ffi.Pointer<pcvs_t>)>();

  void antmodel(
    ffi.Pointer<pcv_t> pcv,
    ffi.Pointer<ffi.Double> del,
    ffi.Pointer<ffi.Double> azel,
    int opt,
    ffi.Pointer<ffi.Double> dant,
  ) {
    return _antmodel(
      pcv,
      del,
      azel,
      opt,
      dant,
    );
  }

  late final _antmodelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pcv_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>)>>('antmodel');
  late final _antmodel = _antmodelPtr.asFunction<
      void Function(ffi.Pointer<pcv_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>)>();

  void antmodel_s(
    ffi.Pointer<pcv_t> pcv,
    double nadir,
    ffi.Pointer<ffi.Double> dant,
  ) {
    return _antmodel_s(
      pcv,
      nadir,
      dant,
    );
  }

  late final _antmodel_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pcv_t>, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('antmodel_s');
  late final _antmodel_s = _antmodel_sPtr.asFunction<
      void Function(ffi.Pointer<pcv_t>, double, ffi.Pointer<ffi.Double>)>();

  void sunmoonpos(
    gtime_t tutc,
    ffi.Pointer<ffi.Double> erpv,
    ffi.Pointer<ffi.Double> rsun,
    ffi.Pointer<ffi.Double> rmoon,
    ffi.Pointer<ffi.Double> gmst,
  ) {
    return _sunmoonpos(
      tutc,
      erpv,
      rsun,
      rmoon,
      gmst,
    );
  }

  late final _sunmoonposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sunmoonpos');
  late final _sunmoonpos = _sunmoonposPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void tidedisp(
    gtime_t tutc,
    ffi.Pointer<ffi.Double> rr,
    int opt,
    ffi.Pointer<erp_t> erp,
    ffi.Pointer<ffi.Double> odisp,
    ffi.Pointer<ffi.Double> dr,
  ) {
    return _tidedisp(
      tutc,
      rr,
      opt,
      erp,
      odisp,
      dr,
    );
  }

  late final _tidedispPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<erp_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('tidedisp');
  late final _tidedisp = _tidedispPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, int, ffi.Pointer<erp_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int opengeoid(
    int model,
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _opengeoid(
      model,
      file,
    );
  }

  late final _opengeoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('opengeoid');
  late final _opengeoid =
      _opengeoidPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  void closegeoid() {
    return _closegeoid();
  }

  late final _closegeoidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('closegeoid');
  late final _closegeoid = _closegeoidPtr.asFunction<void Function()>();

  double geoidh(
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _geoidh(
      pos,
    );
  }

  late final _geoidhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Double>)>>(
          'geoidh');
  late final _geoidh =
      _geoidhPtr.asFunction<double Function(ffi.Pointer<ffi.Double>)>();

  int loaddatump(
    ffi.Pointer<ffi.Int8> file,
  ) {
    return _loaddatump(
      file,
    );
  }

  late final _loaddatumpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'loaddatump');
  late final _loaddatump =
      _loaddatumpPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int tokyo2jgd(
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _tokyo2jgd(
      pos,
    );
  }

  late final _tokyo2jgdPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Double>)>>(
          'tokyo2jgd');
  late final _tokyo2jgd =
      _tokyo2jgdPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int jgd2tokyo(
    ffi.Pointer<ffi.Double> pos,
  ) {
    return _jgd2tokyo(
      pos,
    );
  }

  late final _jgd2tokyoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Double>)>>(
          'jgd2tokyo');
  late final _jgd2tokyo =
      _jgd2tokyoPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int readrnx(
    ffi.Pointer<ffi.Int8> file,
    int rcv,
    ffi.Pointer<ffi.Int8> opt,
    ffi.Pointer<obs_t> obs,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<sta_t> sta,
  ) {
    return _readrnx(
      file,
      rcv,
      opt,
      obs,
      nav,
      sta,
    );
  }

  late final _readrnxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_t>,
              ffi.Pointer<nav_t>,
              ffi.Pointer<sta_t>)>>('readrnx');
  late final _readrnx = _readrnxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_t>, ffi.Pointer<nav_t>, ffi.Pointer<sta_t>)>();

  int readrnxt(
    ffi.Pointer<ffi.Int8> file,
    int rcv,
    gtime_t ts,
    gtime_t te,
    double tint,
    ffi.Pointer<ffi.Int8> opt,
    ffi.Pointer<obs_t> obs,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<sta_t> sta,
  ) {
    return _readrnxt(
      file,
      rcv,
      ts,
      te,
      tint,
      opt,
      obs,
      nav,
      sta,
    );
  }

  late final _readrnxtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<obs_t>,
              ffi.Pointer<nav_t>,
              ffi.Pointer<sta_t>)>>('readrnxt');
  late final _readrnxt = _readrnxtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>,
          int,
          gtime_t,
          gtime_t,
          double,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<obs_t>,
          ffi.Pointer<nav_t>,
          ffi.Pointer<sta_t>)>();

  int readrnxc(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readrnxc(
      file,
      nav,
    );
  }

  late final _readrnxcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>>('readrnxc');
  late final _readrnxc = _readrnxcPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>();

  int outrnxobsh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxobsh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxobshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxobsh');
  late final _outrnxobsh = _outrnxobshPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxobsb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<obsd_t> obs,
    int n,
    int epflag,
  ) {
    return _outrnxobsb(
      fp,
      opt,
      obs,
      n,
      epflag,
    );
  }

  late final _outrnxobsbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<obsd_t>, ffi.Int32, ffi.Int32)>>('outrnxobsb');
  late final _outrnxobsb = _outrnxobsbPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
          ffi.Pointer<obsd_t>, int, int)>();

  int outrnxnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxnavh');
  late final _outrnxnavh = _outrnxnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxgnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxgnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxgnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxgnavh');
  late final _outrnxgnavh = _outrnxgnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxhnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxhnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxhnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxhnavh');
  late final _outrnxhnavh = _outrnxhnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxlnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxlnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxlnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxlnavh');
  late final _outrnxlnavh = _outrnxlnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxqnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxqnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxqnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxqnavh');
  late final _outrnxqnavh = _outrnxqnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxcnavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxcnavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxcnavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxcnavh');
  late final _outrnxcnavh = _outrnxcnavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxinavh(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<nav_t> nav,
  ) {
    return _outrnxinavh(
      fp,
      opt,
      nav,
    );
  }

  late final _outrnxinavhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<nav_t>)>>('outrnxinavh');
  late final _outrnxinavh = _outrnxinavhPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<nav_t>)>();

  int outrnxnavb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<eph_t> eph,
  ) {
    return _outrnxnavb(
      fp,
      opt,
      eph,
    );
  }

  late final _outrnxnavbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<eph_t>)>>('outrnxnavb');
  late final _outrnxnavb = _outrnxnavbPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<eph_t>)>();

  int outrnxgnavb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<geph_t> geph,
  ) {
    return _outrnxgnavb(
      fp,
      opt,
      geph,
    );
  }

  late final _outrnxgnavbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<geph_t>)>>('outrnxgnavb');
  late final _outrnxgnavb = _outrnxgnavbPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<geph_t>)>();

  int outrnxhnavb(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<seph_t> seph,
  ) {
    return _outrnxhnavb(
      fp,
      opt,
      seph,
    );
  }

  late final _outrnxhnavbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>,
              ffi.Pointer<seph_t>)>>('outrnxhnavb');
  late final _outrnxhnavb = _outrnxhnavbPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<rnxopt_t>, ffi.Pointer<seph_t>)>();

  int rtk_uncompress(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> uncfile,
  ) {
    return _rtk_uncompress(
      file,
      uncfile,
    );
  }

  late final _rtk_uncompressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rtk_uncompress');
  late final _rtk_uncompress = _rtk_uncompressPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int convrnx(
    int format,
    ffi.Pointer<rnxopt_t> opt,
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ofile,
  ) {
    return _convrnx(
      format,
      opt,
      file,
      ofile,
    );
  }

  late final _convrnxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<rnxopt_t>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('convrnx');
  late final _convrnx = _convrnxPtr.asFunction<
      int Function(int, ffi.Pointer<rnxopt_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int init_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
  ) {
    return _init_rnxctr(
      rnx,
    );
  }

  late final _init_rnxctrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<rnxctr_t>)>>(
          'init_rnxctr');
  late final _init_rnxctr =
      _init_rnxctrPtr.asFunction<int Function(ffi.Pointer<rnxctr_t>)>();

  void free_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
  ) {
    return _free_rnxctr(
      rnx,
    );
  }

  late final _free_rnxctrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rnxctr_t>)>>(
          'free_rnxctr');
  late final _free_rnxctr =
      _free_rnxctrPtr.asFunction<void Function(ffi.Pointer<rnxctr_t>)>();

  int open_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
    ffi.Pointer<FILE> fp,
  ) {
    return _open_rnxctr(
      rnx,
      fp,
    );
  }

  late final _open_rnxctrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>>('open_rnxctr');
  late final _open_rnxctr = _open_rnxctrPtr
      .asFunction<int Function(ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>();

  int input_rnxctr(
    ffi.Pointer<rnxctr_t> rnx,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rnxctr(
      rnx,
      fp,
    );
  }

  late final _input_rnxctrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>>('input_rnxctr');
  late final _input_rnxctr = _input_rnxctrPtr
      .asFunction<int Function(ffi.Pointer<rnxctr_t>, ffi.Pointer<FILE>)>();

  double eph2clk(
    gtime_t time,
    ffi.Pointer<eph_t> eph,
  ) {
    return _eph2clk(
      time,
      eph,
    );
  }

  late final _eph2clkPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(gtime_t, ffi.Pointer<eph_t>)>>(
      'eph2clk');
  late final _eph2clk =
      _eph2clkPtr.asFunction<double Function(gtime_t, ffi.Pointer<eph_t>)>();

  double geph2clk(
    gtime_t time,
    ffi.Pointer<geph_t> geph,
  ) {
    return _geph2clk(
      time,
      geph,
    );
  }

  late final _geph2clkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<geph_t>)>>('geph2clk');
  late final _geph2clk =
      _geph2clkPtr.asFunction<double Function(gtime_t, ffi.Pointer<geph_t>)>();

  double seph2clk(
    gtime_t time,
    ffi.Pointer<seph_t> seph,
  ) {
    return _seph2clk(
      time,
      seph,
    );
  }

  late final _seph2clkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(gtime_t, ffi.Pointer<seph_t>)>>('seph2clk');
  late final _seph2clk =
      _seph2clkPtr.asFunction<double Function(gtime_t, ffi.Pointer<seph_t>)>();

  void eph2pos(
    gtime_t time,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _eph2pos(
      time,
      eph,
      rs,
      dts,
      var1,
    );
  }

  late final _eph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('eph2pos');
  late final _eph2pos = _eph2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<eph_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void geph2pos(
    gtime_t time,
    ffi.Pointer<geph_t> geph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _geph2pos(
      time,
      geph,
      rs,
      dts,
      var1,
    );
  }

  late final _geph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<geph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('geph2pos');
  late final _geph2pos = _geph2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<geph_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void seph2pos(
    gtime_t time,
    ffi.Pointer<seph_t> seph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _seph2pos(
      time,
      seph,
      rs,
      dts,
      var1,
    );
  }

  late final _seph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<seph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('seph2pos');
  late final _seph2pos = _seph2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<seph_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int peph2pos(
    gtime_t time,
    int sat,
    ffi.Pointer<nav_t> nav,
    int opt,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _peph2pos(
      time,
      sat,
      nav,
      opt,
      rs,
      dts,
      var1,
    );
  }

  late final _peph2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Int32,
              ffi.Pointer<nav_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('peph2pos');
  late final _peph2pos = _peph2posPtr.asFunction<
      int Function(
          gtime_t,
          int,
          ffi.Pointer<nav_t>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void satantoff(
    gtime_t time,
    ffi.Pointer<ffi.Double> rs,
    int sat,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> dant,
  ) {
    return _satantoff(
      time,
      rs,
      sat,
      nav,
      dant,
    );
  }

  late final _satantoffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Int32,
              ffi.Pointer<nav_t>, ffi.Pointer<ffi.Double>)>>('satantoff');
  late final _satantoff = _satantoffPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<ffi.Double>, int, ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>)>();

  int satpos(
    gtime_t time,
    gtime_t teph,
    int sat,
    int ephopt,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
    ffi.Pointer<ffi.Int32> svh,
  ) {
    return _satpos(
      time,
      teph,
      sat,
      ephopt,
      nav,
      rs,
      dts,
      var1,
      svh,
    );
  }

  late final _satposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              gtime_t,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int32>)>>('satpos');
  late final _satpos = _satposPtr.asFunction<
      int Function(
          gtime_t,
          gtime_t,
          int,
          int,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int32>)>();

  void satposs(
    gtime_t time,
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<nav_t> nav,
    int sateph,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
    ffi.Pointer<ffi.Int32> svh,
  ) {
    return _satposs(
      time,
      obs,
      n,
      nav,
      sateph,
      rs,
      dts,
      var1,
      svh,
    );
  }

  late final _satpossPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              ffi.Pointer<obsd_t>,
              ffi.Int32,
              ffi.Pointer<nav_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int32>)>>('satposs');
  late final _satposs = _satpossPtr.asFunction<
      void Function(
          gtime_t,
          ffi.Pointer<obsd_t>,
          int,
          ffi.Pointer<nav_t>,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Int32>)>();

  void setseleph(
    int sys,
    int sel,
  ) {
    return _setseleph(
      sys,
      sel,
    );
  }

  late final _setselephPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>(
          'setseleph');
  late final _setseleph = _setselephPtr.asFunction<void Function(int, int)>();

  int getseleph(
    int sys,
  ) {
    return _getseleph(
      sys,
    );
  }

  late final _getselephPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('getseleph');
  late final _getseleph = _getselephPtr.asFunction<int Function(int)>();

  void readsp3(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
    int opt,
  ) {
    return _readsp3(
      file,
      nav,
      opt,
    );
  }

  late final _readsp3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>,
              ffi.Int32)>>('readsp3');
  late final _readsp3 = _readsp3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>, int)>();

  int readsap(
    ffi.Pointer<ffi.Int8> file,
    gtime_t time,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readsap(
      file,
      time,
      nav,
    );
  }

  late final _readsapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, gtime_t, ffi.Pointer<nav_t>)>>('readsap');
  late final _readsap = _readsapPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, gtime_t, ffi.Pointer<nav_t>)>();

  int readdcb(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<sta_t> sta,
  ) {
    return _readdcb(
      file,
      nav,
      sta,
    );
  }

  late final _readdcbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>,
              ffi.Pointer<sta_t>)>>('readdcb');
  late final _readdcb = _readdcbPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>, ffi.Pointer<sta_t>)>();

  int readfcb(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<nav_t> nav,
  ) {
    return _readfcb(
      file,
      nav,
    );
  }

  late final _readfcbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>>('readfcb');
  late final _readfcb = _readfcbPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<nav_t>)>();

  void alm2pos(
    gtime_t time,
    ffi.Pointer<alm_t> alm,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
  ) {
    return _alm2pos(
      time,
      alm,
      rs,
      dts,
    );
  }

  late final _alm2posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gtime_t, ffi.Pointer<alm_t>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>('alm2pos');
  late final _alm2pos = _alm2posPtr.asFunction<
      void Function(gtime_t, ffi.Pointer<alm_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int tle_read(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<tle_t> tle,
  ) {
    return _tle_read(
      file,
      tle,
    );
  }

  late final _tle_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<tle_t>)>>('tle_read');
  late final _tle_read = _tle_readPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<tle_t>)>();

  int tle_name_read(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<tle_t> tle,
  ) {
    return _tle_name_read(
      file,
      tle,
    );
  }

  late final _tle_name_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<tle_t>)>>('tle_name_read');
  late final _tle_name_read = _tle_name_readPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<tle_t>)>();

  int tle_pos(
    gtime_t time,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> satno,
    ffi.Pointer<ffi.Int8> desig,
    ffi.Pointer<tle_t> tle,
    ffi.Pointer<erp_t> erp,
    ffi.Pointer<ffi.Double> rs,
  ) {
    return _tle_pos(
      time,
      name,
      satno,
      desig,
      tle,
      erp,
      rs,
    );
  }

  late final _tle_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<tle_t>,
              ffi.Pointer<erp_t>,
              ffi.Pointer<ffi.Double>)>>('tle_pos');
  late final _tle_pos = _tle_posPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<tle_t>,
          ffi.Pointer<erp_t>,
          ffi.Pointer<ffi.Double>)>();

  int getbitu(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
  ) {
    return _getbitu(
      buff,
      pos,
      len,
    );
  }

  late final _getbituPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32)>>('getbitu');
  late final _getbitu =
      _getbituPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  int getbits(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
  ) {
    return _getbits(
      buff,
      pos,
      len,
    );
  }

  late final _getbitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32)>>('getbits');
  late final _getbits =
      _getbitsPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void setbitu(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
    int data,
  ) {
    return _setbitu(
      buff,
      pos,
      len,
      data,
    );
  }

  late final _setbituPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32,
              ffi.Uint32)>>('setbitu');
  late final _setbitu = _setbituPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  void setbits(
    ffi.Pointer<ffi.Uint8> buff,
    int pos,
    int len,
    int data,
  ) {
    return _setbits(
      buff,
      pos,
      len,
      data,
    );
  }

  late final _setbitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('setbits');
  late final _setbits = _setbitsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  int rtk_crc32(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _rtk_crc32(
      buff,
      len,
    );
  }

  late final _rtk_crc32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('rtk_crc32');
  late final _rtk_crc32 =
      _rtk_crc32Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int rtk_crc24q(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _rtk_crc24q(
      buff,
      len,
    );
  }

  late final _rtk_crc24qPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('rtk_crc24q');
  late final _rtk_crc24q =
      _rtk_crc24qPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int rtk_crc16(
    ffi.Pointer<ffi.Uint8> buff,
    int len,
  ) {
    return _rtk_crc16(
      buff,
      len,
    );
  }

  late final _rtk_crc16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('rtk_crc16');
  late final _rtk_crc16 =
      _rtk_crc16Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  int decode_word(
    int word,
    ffi.Pointer<ffi.Uint8> data,
  ) {
    return _decode_word(
      word,
      data,
    );
  }

  late final _decode_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<ffi.Uint8>)>>('decode_word');
  late final _decode_word =
      _decode_wordPtr.asFunction<int Function(int, ffi.Pointer<ffi.Uint8>)>();

  int decode_frame(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<alm_t> alm,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_frame(
      buff,
      eph,
      alm,
      ion,
      utc,
    );
  }

  late final _decode_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<alm_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_frame');
  late final _decode_frame = _decode_framePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<eph_t>,
          ffi.Pointer<alm_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int test_glostr(
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _test_glostr(
      buff,
    );
  }

  late final _test_glostrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint8>)>>(
          'test_glostr');
  late final _test_glostr =
      _test_glostrPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  int decode_glostr(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<geph_t> geph,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_glostr(
      buff,
      geph,
      utc,
    );
  }

  late final _decode_glostrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<geph_t>,
              ffi.Pointer<ffi.Double>)>>('decode_glostr');
  late final _decode_glostr = _decode_glostrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<geph_t>,
          ffi.Pointer<ffi.Double>)>();

  int decode_bds_d1(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_bds_d1(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_bds_d1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_bds_d1');
  late final _decode_bds_d1 = _decode_bds_d1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int decode_bds_d2(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_bds_d2(
      buff,
      eph,
      utc,
    );
  }

  late final _decode_bds_d2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>)>>('decode_bds_d2');
  late final _decode_bds_d2 = _decode_bds_d2Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>)>();

  int decode_gal_inav(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_gal_inav(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_gal_inavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_gal_inav');
  late final _decode_gal_inav = _decode_gal_inavPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int decode_gal_fnav(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_gal_fnav(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_gal_fnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_gal_fnav');
  late final _decode_gal_fnav = _decode_gal_fnavPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int decode_irn_nav(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<eph_t> eph,
    ffi.Pointer<ffi.Double> ion,
    ffi.Pointer<ffi.Double> utc,
  ) {
    return _decode_irn_nav(
      buff,
      eph,
      ion,
      utc,
    );
  }

  late final _decode_irn_navPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<eph_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('decode_irn_nav');
  late final _decode_irn_nav = _decode_irn_navPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<eph_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int init_raw(
    ffi.Pointer<raw_t> raw,
    int format,
  ) {
    return _init_raw(
      raw,
      format,
    );
  }

  late final _init_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Int32)>>('init_raw');
  late final _init_raw =
      _init_rawPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  void free_raw(
    ffi.Pointer<raw_t> raw,
  ) {
    return _free_raw(
      raw,
    );
  }

  late final _free_rawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<raw_t>)>>(
          'free_raw');
  late final _free_raw =
      _free_rawPtr.asFunction<void Function(ffi.Pointer<raw_t>)>();

  int input_raw(
    ffi.Pointer<raw_t> raw,
    int format,
    int data,
  ) {
    return _input_raw(
      raw,
      format,
      data,
    );
  }

  late final _input_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Int32, ffi.Uint8)>>('input_raw');
  late final _input_raw =
      _input_rawPtr.asFunction<int Function(ffi.Pointer<raw_t>, int, int)>();

  int input_rawf(
    ffi.Pointer<raw_t> raw,
    int format,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rawf(
      raw,
      format,
      fp,
    );
  }

  late final _input_rawfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Int32, ffi.Pointer<FILE>)>>('input_rawf');
  late final _input_rawf = _input_rawfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, int, ffi.Pointer<FILE>)>();

  int init_rt17(
    ffi.Pointer<raw_t> raw,
  ) {
    return _init_rt17(
      raw,
    );
  }

  late final _init_rt17Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'init_rt17');
  late final _init_rt17 =
      _init_rt17Ptr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  int init_cmr(
    ffi.Pointer<raw_t> raw,
  ) {
    return _init_cmr(
      raw,
    );
  }

  late final _init_cmrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<raw_t>)>>(
          'init_cmr');
  late final _init_cmr =
      _init_cmrPtr.asFunction<int Function(ffi.Pointer<raw_t>)>();

  void free_rt17(
    ffi.Pointer<raw_t> raw,
  ) {
    return _free_rt17(
      raw,
    );
  }

  late final _free_rt17Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<raw_t>)>>(
          'free_rt17');
  late final _free_rt17 =
      _free_rt17Ptr.asFunction<void Function(ffi.Pointer<raw_t>)>();

  void free_cmr(
    ffi.Pointer<raw_t> raw,
  ) {
    return _free_cmr(
      raw,
    );
  }

  late final _free_cmrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<raw_t>)>>(
          'free_cmr');
  late final _free_cmr =
      _free_cmrPtr.asFunction<void Function(ffi.Pointer<raw_t>)>();

  int update_cmr(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<obs_t> obs,
  ) {
    return _update_cmr(
      raw,
      svr,
      obs,
    );
  }

  late final _update_cmrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Pointer<rtksvr_t>,
              ffi.Pointer<obs_t>)>>('update_cmr');
  late final _update_cmr = _update_cmrPtr.asFunction<
      int Function(
          ffi.Pointer<raw_t>, ffi.Pointer<rtksvr_t>, ffi.Pointer<obs_t>)>();

  int input_oem4(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_oem4(
      raw,
      data,
    );
  }

  late final _input_oem4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_oem4');
  late final _input_oem4 =
      _input_oem4Ptr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_cnav(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_cnav(
      raw,
      data,
    );
  }

  late final _input_cnavPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_cnav');
  late final _input_cnav =
      _input_cnavPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_ubx(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_ubx(
      raw,
      data,
    );
  }

  late final _input_ubxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_ubx');
  late final _input_ubx =
      _input_ubxPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_sbp(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_sbp(
      raw,
      data,
    );
  }

  late final _input_sbpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_sbp');
  late final _input_sbp =
      _input_sbpPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_cres(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_cres(
      raw,
      data,
    );
  }

  late final _input_cresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_cres');
  late final _input_cres =
      _input_cresPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_stq(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_stq(
      raw,
      data,
    );
  }

  late final _input_stqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_stq');
  late final _input_stq =
      _input_stqPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_javad(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_javad(
      raw,
      data,
    );
  }

  late final _input_javadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_javad');
  late final _input_javad =
      _input_javadPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_nvs(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_nvs(
      raw,
      data,
    );
  }

  late final _input_nvsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_nvs');
  late final _input_nvs =
      _input_nvsPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_bnx(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_bnx(
      raw,
      data,
    );
  }

  late final _input_bnxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_bnx');
  late final _input_bnx =
      _input_bnxPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_rt17(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_rt17(
      raw,
      data,
    );
  }

  late final _input_rt17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_rt17');
  late final _input_rt17 =
      _input_rt17Ptr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_sbf(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_sbf(
      raw,
      data,
    );
  }

  late final _input_sbfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_sbf');
  late final _input_sbf =
      _input_sbfPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_tersus(
    ffi.Pointer<raw_t> raw,
    int data,
  ) {
    return _input_tersus(
      raw,
      data,
    );
  }

  late final _input_tersusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<raw_t>, ffi.Uint8)>>('input_tersus');
  late final _input_tersus =
      _input_tersusPtr.asFunction<int Function(ffi.Pointer<raw_t>, int)>();

  int input_oem4f(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_oem4f(
      raw,
      fp,
    );
  }

  late final _input_oem4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_oem4f');
  late final _input_oem4f = _input_oem4fPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_cnavf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_cnavf(
      raw,
      fp,
    );
  }

  late final _input_cnavfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_cnavf');
  late final _input_cnavf = _input_cnavfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_ubxf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_ubxf(
      raw,
      fp,
    );
  }

  late final _input_ubxfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_ubxf');
  late final _input_ubxf = _input_ubxfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_sbpf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_sbpf(
      raw,
      fp,
    );
  }

  late final _input_sbpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_sbpf');
  late final _input_sbpf = _input_sbpfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_cresf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_cresf(
      raw,
      fp,
    );
  }

  late final _input_cresfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_cresf');
  late final _input_cresf = _input_cresfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_stqf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_stqf(
      raw,
      fp,
    );
  }

  late final _input_stqfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_stqf');
  late final _input_stqf = _input_stqfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_javadf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_javadf(
      raw,
      fp,
    );
  }

  late final _input_javadfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_javadf');
  late final _input_javadf = _input_javadfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_nvsf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_nvsf(
      raw,
      fp,
    );
  }

  late final _input_nvsfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_nvsf');
  late final _input_nvsf = _input_nvsfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_bnxf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_bnxf(
      raw,
      fp,
    );
  }

  late final _input_bnxfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_bnxf');
  late final _input_bnxf = _input_bnxfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_rt17f(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rt17f(
      raw,
      fp,
    );
  }

  late final _input_rt17fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_rt17f');
  late final _input_rt17f = _input_rt17fPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_sbff(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_sbff(
      raw,
      fp,
    );
  }

  late final _input_sbffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_sbff');
  late final _input_sbff = _input_sbffPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int input_tersusf(
    ffi.Pointer<raw_t> raw,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_tersusf(
      raw,
      fp,
    );
  }

  late final _input_tersusfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>>('input_tersusf');
  late final _input_tersusf = _input_tersusfPtr
      .asFunction<int Function(ffi.Pointer<raw_t>, ffi.Pointer<FILE>)>();

  int gen_ubx(
    ffi.Pointer<ffi.Int8> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_ubx(
      msg,
      buff,
    );
  }

  late final _gen_ubxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>>('gen_ubx');
  late final _gen_ubx = _gen_ubxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>();

  int gen_stq(
    ffi.Pointer<ffi.Int8> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_stq(
      msg,
      buff,
    );
  }

  late final _gen_stqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>>('gen_stq');
  late final _gen_stq = _gen_stqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>();

  int gen_nvs(
    ffi.Pointer<ffi.Int8> msg,
    ffi.Pointer<ffi.Uint8> buff,
  ) {
    return _gen_nvs(
      msg,
      buff,
    );
  }

  late final _gen_nvsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>>('gen_nvs');
  late final _gen_nvs = _gen_nvsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Uint8>)>();

  int init_rtcm(
    ffi.Pointer<rtcm_t> rtcm,
  ) {
    return _init_rtcm(
      rtcm,
    );
  }

  late final _init_rtcmPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<rtcm_t>)>>(
          'init_rtcm');
  late final _init_rtcm =
      _init_rtcmPtr.asFunction<int Function(ffi.Pointer<rtcm_t>)>();

  void free_rtcm(
    ffi.Pointer<rtcm_t> rtcm,
  ) {
    return _free_rtcm(
      rtcm,
    );
  }

  late final _free_rtcmPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtcm_t>)>>(
          'free_rtcm');
  late final _free_rtcm =
      _free_rtcmPtr.asFunction<void Function(ffi.Pointer<rtcm_t>)>();

  int input_rtcm2(
    ffi.Pointer<rtcm_t> rtcm,
    int data,
  ) {
    return _input_rtcm2(
      rtcm,
      data,
    );
  }

  late final _input_rtcm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<rtcm_t>, ffi.Uint8)>>('input_rtcm2');
  late final _input_rtcm2 =
      _input_rtcm2Ptr.asFunction<int Function(ffi.Pointer<rtcm_t>, int)>();

  int input_rtcm3(
    ffi.Pointer<rtcm_t> rtcm,
    int data,
  ) {
    return _input_rtcm3(
      rtcm,
      data,
    );
  }

  late final _input_rtcm3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<rtcm_t>, ffi.Uint8)>>('input_rtcm3');
  late final _input_rtcm3 =
      _input_rtcm3Ptr.asFunction<int Function(ffi.Pointer<rtcm_t>, int)>();

  int input_rtcm2f(
    ffi.Pointer<rtcm_t> rtcm,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rtcm2f(
      rtcm,
      fp,
    );
  }

  late final _input_rtcm2fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>>('input_rtcm2f');
  late final _input_rtcm2f = _input_rtcm2fPtr
      .asFunction<int Function(ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>();

  int input_rtcm3f(
    ffi.Pointer<rtcm_t> rtcm,
    ffi.Pointer<FILE> fp,
  ) {
    return _input_rtcm3f(
      rtcm,
      fp,
    );
  }

  late final _input_rtcm3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>>('input_rtcm3f');
  late final _input_rtcm3f = _input_rtcm3fPtr
      .asFunction<int Function(ffi.Pointer<rtcm_t>, ffi.Pointer<FILE>)>();

  int gen_rtcm2(
    ffi.Pointer<rtcm_t> rtcm,
    int type,
    int sync1,
  ) {
    return _gen_rtcm2(
      rtcm,
      type,
      sync1,
    );
  }

  late final _gen_rtcm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtcm_t>, ffi.Int32, ffi.Int32)>>('gen_rtcm2');
  late final _gen_rtcm2 =
      _gen_rtcm2Ptr.asFunction<int Function(ffi.Pointer<rtcm_t>, int, int)>();

  int gen_rtcm3(
    ffi.Pointer<rtcm_t> rtcm,
    int type,
    int subtype,
    int sync1,
  ) {
    return _gen_rtcm3(
      rtcm,
      type,
      subtype,
      sync1,
    );
  }

  late final _gen_rtcm3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<rtcm_t>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('gen_rtcm3');
  late final _gen_rtcm3 = _gen_rtcm3Ptr
      .asFunction<int Function(ffi.Pointer<rtcm_t>, int, int, int)>();

  void initsolbuf(
    ffi.Pointer<solbuf_t> solbuf,
    int cyclic,
    int nmax,
  ) {
    return _initsolbuf(
      solbuf,
      cyclic,
      nmax,
    );
  }

  late final _initsolbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<solbuf_t>, ffi.Int32, ffi.Int32)>>('initsolbuf');
  late final _initsolbuf = _initsolbufPtr
      .asFunction<void Function(ffi.Pointer<solbuf_t>, int, int)>();

  void freesolbuf(
    ffi.Pointer<solbuf_t> solbuf,
  ) {
    return _freesolbuf(
      solbuf,
    );
  }

  late final _freesolbufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<solbuf_t>)>>(
          'freesolbuf');
  late final _freesolbuf =
      _freesolbufPtr.asFunction<void Function(ffi.Pointer<solbuf_t>)>();

  void freesolstatbuf(
    ffi.Pointer<solstatbuf_t> solstatbuf,
  ) {
    return _freesolstatbuf(
      solstatbuf,
    );
  }

  late final _freesolstatbufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<solstatbuf_t>)>>(
          'freesolstatbuf');
  late final _freesolstatbuf =
      _freesolstatbufPtr.asFunction<void Function(ffi.Pointer<solstatbuf_t>)>();

  ffi.Pointer<sol_t> getsol(
    ffi.Pointer<solbuf_t> solbuf,
    int index,
  ) {
    return _getsol(
      solbuf,
      index,
    );
  }

  late final _getsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<sol_t> Function(
              ffi.Pointer<solbuf_t>, ffi.Int32)>>('getsol');
  late final _getsol = _getsolPtr
      .asFunction<ffi.Pointer<sol_t> Function(ffi.Pointer<solbuf_t>, int)>();

  int addsol(
    ffi.Pointer<solbuf_t> solbuf,
    ffi.Pointer<sol_t> sol,
  ) {
    return _addsol(
      solbuf,
      sol,
    );
  }

  late final _addsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<solbuf_t>, ffi.Pointer<sol_t>)>>('addsol');
  late final _addsol = _addsolPtr
      .asFunction<int Function(ffi.Pointer<solbuf_t>, ffi.Pointer<sol_t>)>();

  int readsol(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
    int nfile,
    ffi.Pointer<solbuf_t> sol,
  ) {
    return _readsol(
      files,
      nfile,
      sol,
    );
  }

  late final _readsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32,
              ffi.Pointer<solbuf_t>)>>('readsol');
  late final _readsol = _readsolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, int, ffi.Pointer<solbuf_t>)>();

  int readsolt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
    int nfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflag,
    ffi.Pointer<solbuf_t> sol,
  ) {
    return _readsolt(
      files,
      nfile,
      ts,
      te,
      tint,
      qflag,
      sol,
    );
  }

  late final _readsoltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<solbuf_t>)>>('readsolt');
  late final _readsolt = _readsoltPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, int, gtime_t, gtime_t,
          double, int, ffi.Pointer<solbuf_t>)>();

  int readsolstat(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
    int nfile,
    ffi.Pointer<solstatbuf_t> statbuf,
  ) {
    return _readsolstat(
      files,
      nfile,
      statbuf,
    );
  }

  late final _readsolstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32,
              ffi.Pointer<solstatbuf_t>)>>('readsolstat');
  late final _readsolstat = _readsolstatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, int,
          ffi.Pointer<solstatbuf_t>)>();

  int readsolstatt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
    int nfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    ffi.Pointer<solstatbuf_t> statbuf,
  ) {
    return _readsolstatt(
      files,
      nfile,
      ts,
      te,
      tint,
      statbuf,
    );
  }

  late final _readsolstattPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Pointer<solstatbuf_t>)>>('readsolstatt');
  late final _readsolstatt = _readsolstattPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, int, gtime_t, gtime_t,
          double, ffi.Pointer<solstatbuf_t>)>();

  int inputsol(
    int data,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflag,
    ffi.Pointer<solopt_t> opt,
    ffi.Pointer<solbuf_t> solbuf,
  ) {
    return _inputsol(
      data,
      ts,
      te,
      tint,
      qflag,
      opt,
      solbuf,
    );
  }

  late final _inputsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint8, gtime_t, gtime_t, ffi.Double, ffi.Int32,
              ffi.Pointer<solopt_t>, ffi.Pointer<solbuf_t>)>>('inputsol');
  late final _inputsol = _inputsolPtr.asFunction<
      int Function(int, gtime_t, gtime_t, double, int, ffi.Pointer<solopt_t>,
          ffi.Pointer<solbuf_t>)>();

  int outprcopts(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _outprcopts(
      buff,
      opt,
    );
  }

  late final _outprcoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<prcopt_t>)>>('outprcopts');
  late final _outprcopts = _outprcoptsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<prcopt_t>)>();

  int outsolheads(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolheads(
      buff,
      opt,
    );
  }

  late final _outsolheadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<solopt_t>)>>('outsolheads');
  late final _outsolheads = _outsolheadsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<solopt_t>)>();

  int outsols(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ffi.Double> rb,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsols(
      buff,
      sol,
      rb,
      opt,
    );
  }

  late final _outsolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>>('outsols');
  late final _outsols = _outsolsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>();

  int outsolexs(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolexs(
      buff,
      sol,
      ssat,
      opt,
    );
  }

  late final _outsolexsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>, ffi.Pointer<solopt_t>)>>('outsolexs');
  late final _outsolexs = _outsolexsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
          ffi.Pointer<ssat_t>, ffi.Pointer<solopt_t>)>();

  void outprcopt(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _outprcopt(
      fp,
      opt,
    );
  }

  late final _outprcoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<prcopt_t>)>>('outprcopt');
  late final _outprcopt = _outprcoptPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<prcopt_t>)>();

  void outsolhead(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolhead(
      fp,
      opt,
    );
  }

  late final _outsolheadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<solopt_t>)>>('outsolhead');
  late final _outsolhead = _outsolheadPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<solopt_t>)>();

  void outsol(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ffi.Double> rb,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsol(
      fp,
      sol,
      rb,
      opt,
    );
  }

  late final _outsolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>>('outsol');
  late final _outsol = _outsolPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<solopt_t>)>();

  void outsolex(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
    ffi.Pointer<solopt_t> opt,
  ) {
    return _outsolex(
      fp,
      sol,
      ssat,
      opt,
    );
  }

  late final _outsolexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>, ffi.Pointer<solopt_t>)>>('outsolex');
  late final _outsolex = _outsolexPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<sol_t>, ffi.Pointer<ssat_t>,
          ffi.Pointer<solopt_t>)>();

  int outnmea_rmc(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
  ) {
    return _outnmea_rmc(
      buff,
      sol,
    );
  }

  late final _outnmea_rmcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>>('outnmea_rmc');
  late final _outnmea_rmc = _outnmea_rmcPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>();

  int outnmea_gga(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
  ) {
    return _outnmea_gga(
      buff,
      sol,
    );
  }

  late final _outnmea_ggaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>>('outnmea_gga');
  late final _outnmea_gga = _outnmea_ggaPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>)>();

  int outnmea_gsa(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
  ) {
    return _outnmea_gsa(
      buff,
      sol,
      ssat,
    );
  }

  late final _outnmea_gsaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>)>>('outnmea_gsa');
  late final _outnmea_gsa = _outnmea_gsaPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>, ffi.Pointer<ssat_t>)>();

  int outnmea_gsv(
    ffi.Pointer<ffi.Uint8> buff,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ssat_t> ssat,
  ) {
    return _outnmea_gsv(
      buff,
      sol,
      ssat,
    );
  }

  late final _outnmea_gsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>,
              ffi.Pointer<ssat_t>)>>('outnmea_gsv');
  late final _outnmea_gsv = _outnmea_gsvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<sol_t>, ffi.Pointer<ssat_t>)>();

  int convkml(
    ffi.Pointer<ffi.Int8> infile,
    ffi.Pointer<ffi.Int8> outfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflg,
    ffi.Pointer<ffi.Double> offset,
    int tcolor,
    int pcolor,
    int outalt,
    int outtime,
  ) {
    return _convkml(
      infile,
      outfile,
      ts,
      te,
      tint,
      qflg,
      offset,
      tcolor,
      pcolor,
      outalt,
      outtime,
    );
  }

  late final _convkmlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('convkml');
  late final _convkml = _convkmlPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, gtime_t,
          gtime_t, double, int, ffi.Pointer<ffi.Double>, int, int, int, int)>();

  int convgpx(
    ffi.Pointer<ffi.Int8> infile,
    ffi.Pointer<ffi.Int8> outfile,
    gtime_t ts,
    gtime_t te,
    double tint,
    int qflg,
    ffi.Pointer<ffi.Double> offset,
    int outtrk,
    int outpnt,
    int outalt,
    int outtime,
  ) {
    return _convgpx(
      infile,
      outfile,
      ts,
      te,
      tint,
      qflg,
      offset,
      outtrk,
      outpnt,
      outalt,
      outtime,
    );
  }

  late final _convgpxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('convgpx');
  late final _convgpx = _convgpxPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, gtime_t,
          gtime_t, double, int, ffi.Pointer<ffi.Double>, int, int, int, int)>();

  int sbsreadmsg(
    ffi.Pointer<ffi.Int8> file,
    int sel,
    ffi.Pointer<sbs_t> sbs,
  ) {
    return _sbsreadmsg(
      file,
      sel,
      sbs,
    );
  }

  late final _sbsreadmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<sbs_t>)>>('sbsreadmsg');
  late final _sbsreadmsg = _sbsreadmsgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<sbs_t>)>();

  int sbsreadmsgt(
    ffi.Pointer<ffi.Int8> file,
    int sel,
    gtime_t ts,
    gtime_t te,
    ffi.Pointer<sbs_t> sbs,
  ) {
    return _sbsreadmsgt(
      file,
      sel,
      ts,
      te,
      sbs,
    );
  }

  late final _sbsreadmsgtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32, gtime_t, gtime_t,
              ffi.Pointer<sbs_t>)>>('sbsreadmsgt');
  late final _sbsreadmsgt = _sbsreadmsgtPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, gtime_t, gtime_t, ffi.Pointer<sbs_t>)>();

  void sbsoutmsg(
    ffi.Pointer<FILE> fp,
    ffi.Pointer<sbsmsg_t> sbsmsg,
  ) {
    return _sbsoutmsg(
      fp,
      sbsmsg,
    );
  }

  late final _sbsoutmsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<sbsmsg_t>)>>('sbsoutmsg');
  late final _sbsoutmsg = _sbsoutmsgPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<sbsmsg_t>)>();

  int sbsdecodemsg(
    gtime_t time,
    int prn,
    ffi.Pointer<ffi.Uint32> words,
    ffi.Pointer<sbsmsg_t> sbsmsg,
  ) {
    return _sbsdecodemsg(
      time,
      prn,
      words,
      sbsmsg,
    );
  }

  late final _sbsdecodemsgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gtime_t, ffi.Int32, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<sbsmsg_t>)>>('sbsdecodemsg');
  late final _sbsdecodemsg = _sbsdecodemsgPtr.asFunction<
      int Function(
          gtime_t, int, ffi.Pointer<ffi.Uint32>, ffi.Pointer<sbsmsg_t>)>();

  int sbsupdatecorr(
    ffi.Pointer<sbsmsg_t> msg,
    ffi.Pointer<nav_t> nav,
  ) {
    return _sbsupdatecorr(
      msg,
      nav,
    );
  }

  late final _sbsupdatecorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<sbsmsg_t>, ffi.Pointer<nav_t>)>>('sbsupdatecorr');
  late final _sbsupdatecorr = _sbsupdatecorrPtr
      .asFunction<int Function(ffi.Pointer<sbsmsg_t>, ffi.Pointer<nav_t>)>();

  int sbssatcorr(
    gtime_t time,
    int sat,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> rs,
    ffi.Pointer<ffi.Double> dts,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _sbssatcorr(
      time,
      sat,
      nav,
      rs,
      dts,
      var1,
    );
  }

  late final _sbssatcorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Int32,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sbssatcorr');
  late final _sbssatcorr = _sbssatcorrPtr.asFunction<
      int Function(gtime_t, int, ffi.Pointer<nav_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int sbsioncorr(
    gtime_t time,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> delay,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _sbsioncorr(
      time,
      nav,
      pos,
      azel,
      delay,
      var1,
    );
  }

  late final _sbsioncorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sbsioncorr');
  late final _sbsioncorr = _sbsioncorrPtr.asFunction<
      int Function(
          gtime_t,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double sbstropcorr(
    gtime_t time,
    ffi.Pointer<ffi.Double> pos,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> var1,
  ) {
    return _sbstropcorr(
      time,
      pos,
      azel,
      var1,
    );
  }

  late final _sbstropcorrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              gtime_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('sbstropcorr');
  late final _sbstropcorr = _sbstropcorrPtr.asFunction<
      double Function(gtime_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<opt_t> searchopt(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<opt_t> opts,
  ) {
    return _searchopt(
      name,
      opts,
    );
  }

  late final _searchoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<opt_t> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<opt_t>)>>('searchopt');
  late final _searchopt = _searchoptPtr.asFunction<
      ffi.Pointer<opt_t> Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<opt_t>)>();

  int str2opt(
    ffi.Pointer<opt_t> opt,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _str2opt(
      opt,
      str,
    );
  }

  late final _str2optPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<opt_t>, ffi.Pointer<ffi.Int8>)>>('str2opt');
  late final _str2opt = _str2optPtr
      .asFunction<int Function(ffi.Pointer<opt_t>, ffi.Pointer<ffi.Int8>)>();

  int opt2str(
    ffi.Pointer<opt_t> opt,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _opt2str(
      opt,
      str,
    );
  }

  late final _opt2strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<opt_t>, ffi.Pointer<ffi.Int8>)>>('opt2str');
  late final _opt2str = _opt2strPtr
      .asFunction<int Function(ffi.Pointer<opt_t>, ffi.Pointer<ffi.Int8>)>();

  int opt2buf(
    ffi.Pointer<opt_t> opt,
    ffi.Pointer<ffi.Int8> buff,
  ) {
    return _opt2buf(
      opt,
      buff,
    );
  }

  late final _opt2bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<opt_t>, ffi.Pointer<ffi.Int8>)>>('opt2buf');
  late final _opt2buf = _opt2bufPtr
      .asFunction<int Function(ffi.Pointer<opt_t>, ffi.Pointer<ffi.Int8>)>();

  int loadopts(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<opt_t> opts,
  ) {
    return _loadopts(
      file,
      opts,
    );
  }

  late final _loadoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<opt_t>)>>('loadopts');
  late final _loadopts = _loadoptsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<opt_t>)>();

  int saveopts(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Int8> mode,
    ffi.Pointer<ffi.Int8> comment,
    ffi.Pointer<opt_t> opts,
  ) {
    return _saveopts(
      file,
      mode,
      comment,
      opts,
    );
  }

  late final _saveoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<opt_t>)>>('saveopts');
  late final _saveopts = _saveoptsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<opt_t>)>();

  void resetsysopts() {
    return _resetsysopts();
  }

  late final _resetsysoptsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('resetsysopts');
  late final _resetsysopts = _resetsysoptsPtr.asFunction<void Function()>();

  void getsysopts(
    ffi.Pointer<prcopt_t> popt,
    ffi.Pointer<solopt_t> sopt,
    ffi.Pointer<filopt_t> fopt,
  ) {
    return _getsysopts(
      popt,
      sopt,
      fopt,
    );
  }

  late final _getsysoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
              ffi.Pointer<filopt_t>)>>('getsysopts');
  late final _getsysopts = _getsysoptsPtr.asFunction<
      void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
          ffi.Pointer<filopt_t>)>();

  void setsysopts(
    ffi.Pointer<prcopt_t> popt,
    ffi.Pointer<solopt_t> sopt,
    ffi.Pointer<filopt_t> fopt,
  ) {
    return _setsysopts(
      popt,
      sopt,
      fopt,
    );
  }

  late final _setsysoptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
              ffi.Pointer<filopt_t>)>>('setsysopts');
  late final _setsysopts = _setsysoptsPtr.asFunction<
      void Function(ffi.Pointer<prcopt_t>, ffi.Pointer<solopt_t>,
          ffi.Pointer<filopt_t>)>();

  void strinitcom() {
    return _strinitcom();
  }

  late final _strinitcomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('strinitcom');
  late final _strinitcom = _strinitcomPtr.asFunction<void Function()>();

  void strinit(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strinit(
      stream,
    );
  }

  late final _strinitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strinit');
  late final _strinit =
      _strinitPtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  void strlock(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strlock(
      stream,
    );
  }

  late final _strlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strlock');
  late final _strlock =
      _strlockPtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  void strunlock(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strunlock(
      stream,
    );
  }

  late final _strunlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strunlock');
  late final _strunlock =
      _strunlockPtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  int stropen(
    ffi.Pointer<stream_t> stream,
    int type,
    int mode,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _stropen(
      stream,
      type,
      mode,
      path,
    );
  }

  late final _stropenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<stream_t>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('stropen');
  late final _stropen = _stropenPtr.asFunction<
      int Function(ffi.Pointer<stream_t>, int, int, ffi.Pointer<ffi.Int8>)>();

  void strclose(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strclose(
      stream,
    );
  }

  late final _strclosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<stream_t>)>>(
          'strclose');
  late final _strclose =
      _strclosePtr.asFunction<void Function(ffi.Pointer<stream_t>)>();

  int strread(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Uint8> buff,
    int n,
  ) {
    return _strread(
      stream,
      buff,
      n,
    );
  }

  late final _strreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>,
              ffi.Int32)>>('strread');
  late final _strread = _strreadPtr.asFunction<
      int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>, int)>();

  int strwrite(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Uint8> buff,
    int n,
  ) {
    return _strwrite(
      stream,
      buff,
      n,
    );
  }

  late final _strwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>,
              ffi.Int32)>>('strwrite');
  late final _strwrite = _strwritePtr.asFunction<
      int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Uint8>, int)>();

  void strsync(
    ffi.Pointer<stream_t> stream1,
    ffi.Pointer<stream_t> stream2,
  ) {
    return _strsync(
      stream1,
      stream2,
    );
  }

  late final _strsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Pointer<stream_t>)>>('strsync');
  late final _strsync = _strsyncPtr.asFunction<
      void Function(ffi.Pointer<stream_t>, ffi.Pointer<stream_t>)>();

  int strstat(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _strstat(
      stream,
      msg,
    );
  }

  late final _strstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int8>)>>('strstat');
  late final _strstat = _strstatPtr
      .asFunction<int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int8>)>();

  int strstatx(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _strstatx(
      stream,
      msg,
    );
  }

  late final _strstatxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int8>)>>('strstatx');
  late final _strstatx = _strstatxPtr
      .asFunction<int Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int8>)>();

  void strsum(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Int32> inb,
    ffi.Pointer<ffi.Int32> inr,
    ffi.Pointer<ffi.Int32> outb,
    ffi.Pointer<ffi.Int32> outr,
  ) {
    return _strsum(
      stream,
      inb,
      inr,
      outb,
      outr,
    );
  }

  late final _strsumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('strsum');
  late final _strsum = _strsumPtr.asFunction<
      void Function(
          ffi.Pointer<stream_t>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  void strsetopt(
    ffi.Pointer<ffi.Int32> opt,
  ) {
    return _strsetopt(
      opt,
    );
  }

  late final _strsetoptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'strsetopt');
  late final _strsetopt =
      _strsetoptPtr.asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  gtime_t strgettime(
    ffi.Pointer<stream_t> stream,
  ) {
    return _strgettime(
      stream,
    );
  }

  late final _strgettimePtr =
      _lookup<ffi.NativeFunction<gtime_t Function(ffi.Pointer<stream_t>)>>(
          'strgettime');
  late final _strgettime =
      _strgettimePtr.asFunction<gtime_t Function(ffi.Pointer<stream_t>)>();

  void strsendnmea(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<sol_t> sol,
  ) {
    return _strsendnmea(
      stream,
      sol,
    );
  }

  late final _strsendnmeaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Pointer<sol_t>)>>('strsendnmea');
  late final _strsendnmea = _strsendnmeaPtr
      .asFunction<void Function(ffi.Pointer<stream_t>, ffi.Pointer<sol_t>)>();

  void strsendcmd(
    ffi.Pointer<stream_t> stream,
    ffi.Pointer<ffi.Int8> cmd,
  ) {
    return _strsendcmd(
      stream,
      cmd,
    );
  }

  late final _strsendcmdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int8>)>>('strsendcmd');
  late final _strsendcmd = _strsendcmdPtr.asFunction<
      void Function(ffi.Pointer<stream_t>, ffi.Pointer<ffi.Int8>)>();

  void strsettimeout(
    ffi.Pointer<stream_t> stream,
    int toinact,
    int tirecon,
  ) {
    return _strsettimeout(
      stream,
      toinact,
      tirecon,
    );
  }

  late final _strsettimeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<stream_t>, ffi.Int32, ffi.Int32)>>('strsettimeout');
  late final _strsettimeout = _strsettimeoutPtr
      .asFunction<void Function(ffi.Pointer<stream_t>, int, int)>();

  void strsetdir(
    ffi.Pointer<ffi.Int8> dir,
  ) {
    return _strsetdir(
      dir,
    );
  }

  late final _strsetdirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'strsetdir');
  late final _strsetdir =
      _strsetdirPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void strsetproxy(
    ffi.Pointer<ffi.Int8> addr,
  ) {
    return _strsetproxy(
      addr,
    );
  }

  late final _strsetproxyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'strsetproxy');
  late final _strsetproxy =
      _strsetproxyPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int lambda(
    int n,
    int m,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> F,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _lambda(
      n,
      m,
      a,
      Q,
      F,
      s,
    );
  }

  late final _lambdaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lambda');
  late final _lambda = _lambdaPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int lambda_reduction(
    int n,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> Z,
  ) {
    return _lambda_reduction(
      n,
      Q,
      Z,
    );
  }

  late final _lambda_reductionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lambda_reduction');
  late final _lambda_reduction = _lambda_reductionPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int lambda_search(
    int n,
    int m,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> Q,
    ffi.Pointer<ffi.Double> F,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _lambda_search(
      n,
      m,
      a,
      Q,
      F,
      s,
    );
  }

  late final _lambda_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('lambda_search');
  late final _lambda_search = _lambda_searchPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int pntpos(
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<prcopt_t> opt,
    ffi.Pointer<sol_t> sol,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ssat_t> ssat,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _pntpos(
      obs,
      n,
      nav,
      opt,
      sol,
      azel,
      ssat,
      msg,
    );
  }

  late final _pntposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<obsd_t>,
              ffi.Int32,
              ffi.Pointer<nav_t>,
              ffi.Pointer<prcopt_t>,
              ffi.Pointer<sol_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ssat_t>,
              ffi.Pointer<ffi.Int8>)>>('pntpos');
  late final _pntpos = _pntposPtr.asFunction<
      int Function(
          ffi.Pointer<obsd_t>,
          int,
          ffi.Pointer<nav_t>,
          ffi.Pointer<prcopt_t>,
          ffi.Pointer<sol_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ssat_t>,
          ffi.Pointer<ffi.Int8>)>();

  void rtkinit(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _rtkinit(
      rtk,
      opt,
    );
  }

  late final _rtkinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<rtk_t>, ffi.Pointer<prcopt_t>)>>('rtkinit');
  late final _rtkinit = _rtkinitPtr
      .asFunction<void Function(ffi.Pointer<rtk_t>, ffi.Pointer<prcopt_t>)>();

  void rtkfree(
    ffi.Pointer<rtk_t> rtk,
  ) {
    return _rtkfree(
      rtk,
    );
  }

  late final _rtkfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtk_t>)>>(
          'rtkfree');
  late final _rtkfree =
      _rtkfreePtr.asFunction<void Function(ffi.Pointer<rtk_t>)>();

  int rtkpos(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<obsd_t> obs,
    int nobs,
    ffi.Pointer<nav_t> nav,
  ) {
    return _rtkpos(
      rtk,
      obs,
      nobs,
      nav,
    );
  }

  late final _rtkposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, ffi.Int32,
              ffi.Pointer<nav_t>)>>('rtkpos');
  late final _rtkpos = _rtkposPtr.asFunction<
      int Function(
          ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, int, ffi.Pointer<nav_t>)>();

  int rtkopenstat(
    ffi.Pointer<ffi.Int8> file,
    int level,
  ) {
    return _rtkopenstat(
      file,
      level,
    );
  }

  late final _rtkopenstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('rtkopenstat');
  late final _rtkopenstat =
      _rtkopenstatPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  void rtkclosestat() {
    return _rtkclosestat();
  }

  late final _rtkclosestatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rtkclosestat');
  late final _rtkclosestat = _rtkclosestatPtr.asFunction<void Function()>();

  int rtkoutstat(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<ffi.Int8> buff,
  ) {
    return _rtkoutstat(
      rtk,
      buff,
    );
  }

  late final _rtkoutstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Int8>)>>('rtkoutstat');
  late final _rtkoutstat = _rtkoutstatPtr
      .asFunction<int Function(ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Int8>)>();

  void pppos(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<nav_t> nav,
  ) {
    return _pppos(
      rtk,
      obs,
      n,
      nav,
    );
  }

  late final _ppposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, ffi.Int32,
              ffi.Pointer<nav_t>)>>('pppos');
  late final _pppos = _ppposPtr.asFunction<
      void Function(
          ffi.Pointer<rtk_t>, ffi.Pointer<obsd_t>, int, ffi.Pointer<nav_t>)>();

  int pppnx(
    ffi.Pointer<prcopt_t> opt,
  ) {
    return _pppnx(
      opt,
    );
  }

  late final _pppnxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<prcopt_t>)>>(
          'pppnx');
  late final _pppnx =
      _pppnxPtr.asFunction<int Function(ffi.Pointer<prcopt_t>)>();

  int pppoutstat(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<ffi.Int8> buff,
  ) {
    return _pppoutstat(
      rtk,
      buff,
    );
  }

  late final _pppoutstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Int8>)>>('pppoutstat');
  late final _pppoutstat = _pppoutstatPtr
      .asFunction<int Function(ffi.Pointer<rtk_t>, ffi.Pointer<ffi.Int8>)>();

  int ppp_ar(
    ffi.Pointer<rtk_t> rtk,
    ffi.Pointer<obsd_t> obs,
    int n,
    ffi.Pointer<ffi.Int32> exc,
    ffi.Pointer<nav_t> nav,
    ffi.Pointer<ffi.Double> azel,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _ppp_ar(
      rtk,
      obs,
      n,
      exc,
      nav,
      azel,
      x,
      P,
    );
  }

  late final _ppp_arPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtk_t>,
              ffi.Pointer<obsd_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<nav_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ppp_ar');
  late final _ppp_ar = _ppp_arPtr.asFunction<
      int Function(
          ffi.Pointer<rtk_t>,
          ffi.Pointer<obsd_t>,
          int,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<nav_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int postpos(
    gtime_t ts,
    gtime_t te,
    double ti,
    double tu,
    ffi.Pointer<prcopt_t> popt,
    ffi.Pointer<solopt_t> sopt,
    ffi.Pointer<filopt_t> fopt,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> infile,
    int n,
    ffi.Pointer<ffi.Int8> outfile,
    ffi.Pointer<ffi.Int8> rov,
    ffi.Pointer<ffi.Int8> base,
  ) {
    return _postpos(
      ts,
      te,
      ti,
      tu,
      popt,
      sopt,
      fopt,
      infile,
      n,
      outfile,
      rov,
      base,
    );
  }

  late final _postposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<prcopt_t>,
              ffi.Pointer<solopt_t>,
              ffi.Pointer<filopt_t>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('postpos');
  late final _postpos = _postposPtr.asFunction<
      int Function(
          gtime_t,
          gtime_t,
          double,
          double,
          ffi.Pointer<prcopt_t>,
          ffi.Pointer<solopt_t>,
          ffi.Pointer<filopt_t>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void strsvrinit(
    ffi.Pointer<strsvr_t> svr,
    int nout,
  ) {
    return _strsvrinit(
      svr,
      nout,
    );
  }

  late final _strsvrinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<strsvr_t>, ffi.Int32)>>('strsvrinit');
  late final _strsvrinit =
      _strsvrinitPtr.asFunction<void Function(ffi.Pointer<strsvr_t>, int)>();

  int strsvrstart(
    ffi.Pointer<strsvr_t> svr,
    ffi.Pointer<ffi.Int32> opts,
    ffi.Pointer<ffi.Int32> strs,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> paths,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> logs,
    ffi.Pointer<ffi.Pointer<strconv_t>> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> cmds,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> cmds_priodic,
    ffi.Pointer<ffi.Double> nmeapos,
  ) {
    return _strsvrstart(
      svr,
      opts,
      strs,
      paths,
      logs,
      conv,
      cmds,
      cmds_priodic,
      nmeapos,
    );
  }

  late final _strsvrstartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<strsvr_t>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<strconv_t>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Double>)>>('strsvrstart');
  late final _strsvrstart = _strsvrstartPtr.asFunction<
      int Function(
          ffi.Pointer<strsvr_t>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<strconv_t>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Double>)>();

  void strsvrstop(
    ffi.Pointer<strsvr_t> svr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> cmds,
  ) {
    return _strsvrstop(
      svr,
      cmds,
    );
  }

  late final _strsvrstopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<strsvr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strsvrstop');
  late final _strsvrstop = _strsvrstopPtr.asFunction<
      void Function(
          ffi.Pointer<strsvr_t>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  void strsvrstat(
    ffi.Pointer<strsvr_t> svr,
    ffi.Pointer<ffi.Int32> stat,
    ffi.Pointer<ffi.Int32> log_stat,
    ffi.Pointer<ffi.Int32> byte,
    ffi.Pointer<ffi.Int32> bps,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _strsvrstat(
      svr,
      stat,
      log_stat,
      byte,
      bps,
      msg,
    );
  }

  late final _strsvrstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<strsvr_t>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>)>>('strsvrstat');
  late final _strsvrstat = _strsvrstatPtr.asFunction<
      void Function(
          ffi.Pointer<strsvr_t>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<strconv_t> strconvnew(
    int itype,
    int otype,
    ffi.Pointer<ffi.Int8> msgs,
    int staid,
    int stasel,
    ffi.Pointer<ffi.Int8> opt,
  ) {
    return _strconvnew(
      itype,
      otype,
      msgs,
      staid,
      stasel,
      opt,
    );
  }

  late final _strconvnewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<strconv_t> Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('strconvnew');
  late final _strconvnew = _strconvnewPtr.asFunction<
      ffi.Pointer<strconv_t> Function(
          int, int, ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>)>();

  void strconvfree(
    ffi.Pointer<strconv_t> conv,
  ) {
    return _strconvfree(
      conv,
    );
  }

  late final _strconvfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<strconv_t>)>>(
          'strconvfree');
  late final _strconvfree =
      _strconvfreePtr.asFunction<void Function(ffi.Pointer<strconv_t>)>();

  int rtksvrinit(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrinit(
      svr,
    );
  }

  late final _rtksvrinitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrinit');
  late final _rtksvrinit =
      _rtksvrinitPtr.asFunction<int Function(ffi.Pointer<rtksvr_t>)>();

  void rtksvrfree(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrfree(
      svr,
    );
  }

  late final _rtksvrfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrfree');
  late final _rtksvrfree =
      _rtksvrfreePtr.asFunction<void Function(ffi.Pointer<rtksvr_t>)>();

  int rtksvrstart(
    ffi.Pointer<rtksvr_t> svr,
    int cycle,
    int buffsize,
    ffi.Pointer<ffi.Int32> strs,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> paths,
    ffi.Pointer<ffi.Int32> formats,
    int navsel,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> cmds,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> cmds_periodic,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> rcvopts,
    int nmeacycle,
    int nmeareq,
    ffi.Pointer<ffi.Double> nmeapos,
    ffi.Pointer<prcopt_t> prcopt,
    ffi.Pointer<solopt_t> solopt,
    ffi.Pointer<stream_t> moni,
    ffi.Pointer<ffi.Int8> errmsg,
  ) {
    return _rtksvrstart(
      svr,
      cycle,
      buffsize,
      strs,
      paths,
      formats,
      navsel,
      cmds,
      cmds_periodic,
      rcvopts,
      nmeacycle,
      nmeareq,
      nmeapos,
      prcopt,
      solopt,
      moni,
      errmsg,
    );
  }

  late final _rtksvrstartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtksvr_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<prcopt_t>,
              ffi.Pointer<solopt_t>,
              ffi.Pointer<stream_t>,
              ffi.Pointer<ffi.Int8>)>>('rtksvrstart');
  late final _rtksvrstart = _rtksvrstartPtr.asFunction<
      int Function(
          ffi.Pointer<rtksvr_t>,
          int,
          int,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Int32>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<prcopt_t>,
          ffi.Pointer<solopt_t>,
          ffi.Pointer<stream_t>,
          ffi.Pointer<ffi.Int8>)>();

  void rtksvrstop(
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> cmds,
  ) {
    return _rtksvrstop(
      svr,
      cmds,
    );
  }

  late final _rtksvrstopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtksvr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('rtksvrstop');
  late final _rtksvrstop = _rtksvrstopPtr.asFunction<
      void Function(
          ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int rtksvropenstr(
    ffi.Pointer<rtksvr_t> svr,
    int index,
    int str,
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<solopt_t> solopt,
  ) {
    return _rtksvropenstr(
      svr,
      index,
      str,
      path,
      solopt,
    );
  }

  late final _rtksvropenstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<rtksvr_t>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<solopt_t>)>>('rtksvropenstr');
  late final _rtksvropenstr = _rtksvropenstrPtr.asFunction<
      int Function(ffi.Pointer<rtksvr_t>, int, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<solopt_t>)>();

  void rtksvrclosestr(
    ffi.Pointer<rtksvr_t> svr,
    int index,
  ) {
    return _rtksvrclosestr(
      svr,
      index,
    );
  }

  late final _rtksvrclosestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<rtksvr_t>, ffi.Int32)>>('rtksvrclosestr');
  late final _rtksvrclosestr = _rtksvrclosestrPtr
      .asFunction<void Function(ffi.Pointer<rtksvr_t>, int)>();

  void rtksvrlock(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrlock(
      svr,
    );
  }

  late final _rtksvrlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrlock');
  late final _rtksvrlock =
      _rtksvrlockPtr.asFunction<void Function(ffi.Pointer<rtksvr_t>)>();

  void rtksvrunlock(
    ffi.Pointer<rtksvr_t> svr,
  ) {
    return _rtksvrunlock(
      svr,
    );
  }

  late final _rtksvrunlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rtksvr_t>)>>(
          'rtksvrunlock');
  late final _rtksvrunlock =
      _rtksvrunlockPtr.asFunction<void Function(ffi.Pointer<rtksvr_t>)>();

  int rtksvrostat(
    ffi.Pointer<rtksvr_t> svr,
    int type,
    ffi.Pointer<gtime_t> time,
    ffi.Pointer<ffi.Int32> sat,
    ffi.Pointer<ffi.Double> az,
    ffi.Pointer<ffi.Double> el,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> snr,
    ffi.Pointer<ffi.Int32> vsat,
  ) {
    return _rtksvrostat(
      svr,
      type,
      time,
      sat,
      az,
      el,
      snr,
      vsat,
    );
  }

  late final _rtksvrostatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<rtksvr_t>,
              ffi.Int32,
              ffi.Pointer<gtime_t>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>,
              ffi.Pointer<ffi.Int32>)>>('rtksvrostat');
  late final _rtksvrostat = _rtksvrostatPtr.asFunction<
      int Function(
          ffi.Pointer<rtksvr_t>,
          int,
          ffi.Pointer<gtime_t>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Pointer<ffi.Int32>>,
          ffi.Pointer<ffi.Int32>)>();

  void rtksvrsstat(
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<ffi.Int32> sstat,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _rtksvrsstat(
      svr,
      sstat,
      msg,
    );
  }

  late final _rtksvrsstatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>)>>('rtksvrsstat');
  late final _rtksvrsstat = _rtksvrsstatPtr.asFunction<
      void Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>)>();

  int rtksvrmark(
    ffi.Pointer<rtksvr_t> svr,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> comment,
  ) {
    return _rtksvrmark(
      svr,
      name,
      comment,
    );
  }

  late final _rtksvrmarkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('rtksvrmark');
  late final _rtksvrmark = _rtksvrmarkPtr.asFunction<
      int Function(ffi.Pointer<rtksvr_t>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int dl_readurls(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> types,
    int ntype,
    ffi.Pointer<url_t> urls,
    int nmax,
  ) {
    return _dl_readurls(
      file,
      types,
      ntype,
      urls,
      nmax,
    );
  }

  late final _dl_readurlsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<url_t>,
              ffi.Int32)>>('dl_readurls');
  late final _dl_readurls = _dl_readurlsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int, ffi.Pointer<url_t>, int)>();

  int dl_readstas(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> stas,
    int nmax,
  ) {
    return _dl_readstas(
      file,
      stas,
      nmax,
    );
  }

  late final _dl_readstasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('dl_readstas');
  late final _dl_readstas = _dl_readstasPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int dl_exec(
    gtime_t ts,
    gtime_t te,
    double ti,
    int seqnos,
    int seqnoe,
    ffi.Pointer<url_t> urls,
    int nurl,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> stas,
    int nsta,
    ffi.Pointer<ffi.Int8> dir,
    ffi.Pointer<ffi.Int8> usr,
    ffi.Pointer<ffi.Int8> pwd,
    ffi.Pointer<ffi.Int8> proxy,
    int opts,
    ffi.Pointer<ffi.Int8> msg,
    ffi.Pointer<FILE> fp,
  ) {
    return _dl_exec(
      ts,
      te,
      ti,
      seqnos,
      seqnoe,
      urls,
      nurl,
      stas,
      nsta,
      dir,
      usr,
      pwd,
      proxy,
      opts,
      msg,
      fp,
    );
  }

  late final _dl_execPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<url_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<FILE>)>>('dl_exec');
  late final _dl_exec = _dl_execPtr.asFunction<
      int Function(
          gtime_t,
          gtime_t,
          double,
          int,
          int,
          ffi.Pointer<url_t>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<FILE>)>();

  void dl_test(
    gtime_t ts,
    gtime_t te,
    double ti,
    ffi.Pointer<url_t> urls,
    int nurl,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> stas,
    int nsta,
    ffi.Pointer<ffi.Int8> dir,
    int ncol,
    int datefmt,
    ffi.Pointer<FILE> fp,
  ) {
    return _dl_test(
      ts,
      te,
      ti,
      urls,
      nurl,
      stas,
      nsta,
      dir,
      ncol,
      datefmt,
      fp,
    );
  }

  late final _dl_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gtime_t,
              gtime_t,
              ffi.Double,
              ffi.Pointer<url_t>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('dl_test');
  late final _dl_test = _dl_testPtr.asFunction<
      void Function(
          gtime_t,
          gtime_t,
          double,
          ffi.Pointer<url_t>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          int,
          ffi.Pointer<ffi.Int8>,
          int,
          int,
          ffi.Pointer<FILE>)>();

  int gis_read(
    ffi.Pointer<ffi.Int8> file,
    ffi.Pointer<gis_t> gis,
    int layer,
  ) {
    return _gis_read(
      file,
      gis,
      layer,
    );
  }

  late final _gis_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<gis_t>,
              ffi.Int32)>>('gis_read');
  late final _gis_read = _gis_readPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<gis_t>, int)>();

  void gis_free(
    ffi.Pointer<gis_t> gis,
  ) {
    return _gis_free(
      gis,
    );
  }

  late final _gis_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gis_t>)>>(
          'gis_free');
  late final _gis_free =
      _gis_freePtr.asFunction<void Function(ffi.Pointer<gis_t>)>();

  int showmsg(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _showmsg(
      format,
    );
  }

  late final _showmsgPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'showmsg');
  late final _showmsg =
      _showmsgPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void settspan(
    gtime_t ts,
    gtime_t te,
  ) {
    return _settspan(
      ts,
      te,
    );
  }

  late final _settspanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gtime_t, gtime_t)>>(
          'settspan');
  late final _settspan =
      _settspanPtr.asFunction<void Function(gtime_t, gtime_t)>();

  void settime(
    gtime_t time,
  ) {
    return _settime(
      time,
    );
  }

  late final _settimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(gtime_t)>>('settime');
  late final _settime = _settimePtr.asFunction<void Function(gtime_t)>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;
typedef wchar_t = ffi.Uint16;

class crt_locale_data_public___ffilocal extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> locale_pctype__ffilocal;

  @ffi.Int32()
  external int locale_mb_cur_max__ffilocal;

  @ffi.Uint32()
  external int locale_lc_codepage__ffilocal;
}

class crt_locale_pointers___ffilocal extends ffi.Struct {
  external ffi.Pointer<crt_locale_data___ffilocal> locinfo;

  external ffi.Pointer<crt_multibyte_data___ffilocal> mbcinfo;
}

class crt_locale_data___ffilocal extends ffi.Opaque {}

class crt_multibyte_data___ffilocal extends ffi.Opaque {}

class Mbstatet__ffilocal extends ffi.Struct {
  @ffi.Uint64()
  external int Wchar__ffilocal;

  @ffi.Uint16()
  external int Byte__ffilocal;

  @ffi.Uint16()
  external int State__ffilocal;
}

class iobuf__ffilocal extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Placeholder__ffilocal;
}

typedef FILE = iobuf__ffilocal;
typedef wint_t = ffi.Uint16;
typedef size_t = ffi.Uint64;
typedef errno_t = ffi.Int32;
typedef locale_t__ffilocal = ffi.Pointer<crt_locale_pointers___ffilocal>;
typedef rsize_t = size_t;
typedef fpos_t = ffi.Int64;
typedef CoreCrtSecureSearchSortCompareFunction__ffilocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef CoreCrtNonSecureSearchSortCompareFunction__ffilocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef onexit_t__ffilocal
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef purecall_handler__ffilocal
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef invalid_parameter_handler__ffilocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
            ffi.Pointer<wchar_t>, ffi.Uint32, uintptr_t)>>;

class div_t__ffilocal extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t__ffilocal extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t__ffilocal extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

typedef div_t = div_t__ffilocal;
typedef ldiv_t = ldiv_t__ffilocal;
typedef lldiv_t = lldiv_t__ffilocal;

class LDOUBLE__ffilocal extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint8> ld;
}

class CRT_DOUBLE__ffilocal extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class CRT_FLOAT__ffilocal extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class LONGDOUBLE__ffilocal extends ffi.Opaque {}

class LDBL12__ffilocal extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Uint8> ld12;
}

class exception__ffilocal extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class complex__ffilocal extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class double_val__ffilocal extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> Sh__ffilocal;

  @ffi.Double()
  external double Val__ffilocal;
}

class float_val__ffilocal extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint16> Sh__ffilocal;

  @ffi.Float()
  external double Val__ffilocal;
}

class ldouble_val__ffilocal extends ffi.Opaque {}

class float_const__ffilocal extends ffi.Opaque {}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;
}

typedef time32_t___ffilocal = ffi.Int64;
typedef time64_t___ffilocal = ffi.Int64;

class timespec32__ffilocal extends ffi.Struct {
  @time32_t___ffilocal()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class timespec64__ffilocal extends ffi.Struct {
  @time64_t___ffilocal()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class timespec extends ffi.Struct {
  @time_t()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

typedef time_t = time64_t___ffilocal;
typedef clock_t = ffi.Int64;
typedef wctype_t = ffi.Uint16;

class gtime_t extends ffi.Struct {
  @time_t()
  external int time;

  @ffi.Double()
  external double sec;
}

class obsd_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Uint8()
  external int sat;

  @ffi.Uint8()
  external int rcv;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> SNR;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> LLI;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> code;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> L;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> P;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> D;

  @ffi.Int32()
  external int timevalid;

  external gtime_t eventime;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> Lstd;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> Pstd;

  @ffi.Uint8()
  external int freq;
}

class obs_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  @ffi.Int32()
  external int flag;

  @ffi.Int32()
  external int rcvcount;

  @ffi.Int32()
  external int tmcount;

  external ffi.Pointer<obsd_t> data;
}

class erpd_t extends ffi.Struct {
  @ffi.Double()
  external double mjd;

  @ffi.Double()
  external double xp;

  @ffi.Double()
  external double yp;

  @ffi.Double()
  external double xpr;

  @ffi.Double()
  external double ypr;

  @ffi.Double()
  external double ut1_utc;

  @ffi.Double()
  external double lod;
}

class erp_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  external ffi.Pointer<erpd_t> data;
}

class pcv_t extends ffi.Struct {
  @ffi.Int32()
  external int sat;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> type;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> code;

  external gtime_t ts;

  external gtime_t te;

  @ffi.Array.multi([3, 3])
  external ffi.Array<ffi.Array<ffi.Double>> off;

  @ffi.Array.multi([3, 19])
  external ffi.Array<ffi.Array<ffi.Double>> var1;
}

class pcvs_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  external ffi.Pointer<pcv_t> pcv;
}

class alm_t extends ffi.Struct {
  @ffi.Int32()
  external int sat;

  @ffi.Int32()
  external int svh;

  @ffi.Int32()
  external int svconf;

  @ffi.Int32()
  external int week;

  external gtime_t toa;

  @ffi.Double()
  external double A;

  @ffi.Double()
  external double e;

  @ffi.Double()
  external double i0;

  @ffi.Double()
  external double OMG0;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M0;

  @ffi.Double()
  external double OMGd;

  @ffi.Double()
  external double toas;

  @ffi.Double()
  external double f0;

  @ffi.Double()
  external double f1;
}

class eph_t extends ffi.Struct {
  @ffi.Int32()
  external int sat;

  @ffi.Int32()
  external int iode;

  @ffi.Int32()
  external int iodc;

  @ffi.Int32()
  external int sva;

  @ffi.Int32()
  external int svh;

  @ffi.Int32()
  external int week;

  @ffi.Int32()
  external int code;

  @ffi.Int32()
  external int flag;

  external gtime_t toe;

  external gtime_t toc;

  external gtime_t ttr;

  @ffi.Double()
  external double A;

  @ffi.Double()
  external double e;

  @ffi.Double()
  external double i0;

  @ffi.Double()
  external double OMG0;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M0;

  @ffi.Double()
  external double deln;

  @ffi.Double()
  external double OMGd;

  @ffi.Double()
  external double idot;

  @ffi.Double()
  external double crc;

  @ffi.Double()
  external double crs;

  @ffi.Double()
  external double cuc;

  @ffi.Double()
  external double cus;

  @ffi.Double()
  external double cic;

  @ffi.Double()
  external double cis;

  @ffi.Double()
  external double toes;

  @ffi.Double()
  external double fit;

  @ffi.Double()
  external double f0;

  @ffi.Double()
  external double f1;

  @ffi.Double()
  external double f2;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> tgd;

  @ffi.Double()
  external double Adot;

  @ffi.Double()
  external double ndot;
}

class geph_t extends ffi.Struct {
  @ffi.Int32()
  external int sat;

  @ffi.Int32()
  external int iode;

  @ffi.Int32()
  external int frq;

  @ffi.Int32()
  external int svh;

  @ffi.Int32()
  external int sva;

  @ffi.Int32()
  external int age;

  external gtime_t toe;

  external gtime_t tof;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> vel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> acc;

  @ffi.Double()
  external double taun;

  @ffi.Double()
  external double gamn;

  @ffi.Double()
  external double dtaun;
}

class peph_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Int32()
  external int index;

  @ffi.Array.multi([71, 4])
  external ffi.Array<ffi.Array<ffi.Double>> pos;

  @ffi.Array.multi([71, 4])
  external ffi.Array<ffi.Array<ffi.Float>> std;

  @ffi.Array.multi([71, 4])
  external ffi.Array<ffi.Array<ffi.Double>> vel;

  @ffi.Array.multi([71, 4])
  external ffi.Array<ffi.Array<ffi.Float>> vst;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Float>> cov;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Float>> vco;
}

class pclk_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Int32()
  external int index;

  @ffi.Array.multi([71, 1])
  external ffi.Array<ffi.Array<ffi.Double>> clk;

  @ffi.Array.multi([71, 1])
  external ffi.Array<ffi.Array<ffi.Float>> std;
}

class seph_t extends ffi.Struct {
  @ffi.Int32()
  external int sat;

  external gtime_t t0;

  external gtime_t tof;

  @ffi.Int32()
  external int sva;

  @ffi.Int32()
  external int svh;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> vel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> acc;

  @ffi.Double()
  external double af0;

  @ffi.Double()
  external double af1;
}

class tled_t extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> name;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> alias;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> satno;

  @ffi.Int8()
  external int satclass;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> desig;

  external gtime_t epoch;

  @ffi.Double()
  external double ndot;

  @ffi.Double()
  external double nddot;

  @ffi.Double()
  external double bstar;

  @ffi.Int32()
  external int etype;

  @ffi.Int32()
  external int eleno;

  @ffi.Double()
  external double inc;

  @ffi.Double()
  external double OMG;

  @ffi.Double()
  external double ecc;

  @ffi.Double()
  external double omg;

  @ffi.Double()
  external double M;

  @ffi.Double()
  external double n;

  @ffi.Int32()
  external int rev;
}

class tle_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  external ffi.Pointer<tled_t> data;
}

class tec_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> ndata;

  @ffi.Double()
  external double rb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> lats;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> lons;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> hgts;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<ffi.Float> rms;
}

class sbsmsg_t extends ffi.Struct {
  @ffi.Int32()
  external int week;

  @ffi.Int32()
  external int tow;

  @ffi.Uint8()
  external int prn;

  @ffi.Uint8()
  external int rcv;

  @ffi.Array.multi([29])
  external ffi.Array<ffi.Uint8> msg;
}

class sbs_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  external ffi.Pointer<sbsmsg_t> msgs;
}

class sbsfcorr_t extends ffi.Struct {
  external gtime_t t0;

  @ffi.Double()
  external double prc;

  @ffi.Double()
  external double rrc;

  @ffi.Double()
  external double dt;

  @ffi.Int32()
  external int iodf;

  @ffi.Int16()
  external int udre;

  @ffi.Int16()
  external int ai;
}

class sbslcorr_t extends ffi.Struct {
  external gtime_t t0;

  @ffi.Int32()
  external int iode;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dpos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dvel;

  @ffi.Double()
  external double daf0;

  @ffi.Double()
  external double daf1;
}

class sbssatp_t extends ffi.Struct {
  @ffi.Int32()
  external int sat;

  external sbsfcorr_t fcorr;

  external sbslcorr_t lcorr;
}

class sbssat_t extends ffi.Struct {
  @ffi.Int32()
  external int iodp;

  @ffi.Int32()
  external int nsat;

  @ffi.Int32()
  external int tlat;

  @ffi.Array.multi([71])
  external ffi.Array<sbssatp_t> sat;
}

class sbsigp_t extends ffi.Struct {
  external gtime_t t0;

  @ffi.Int16()
  external int lat;

  @ffi.Int16()
  external int lon;

  @ffi.Int16()
  external int give;

  @ffi.Float()
  external double delay;
}

class sbsigpband_t extends ffi.Struct {
  @ffi.Int16()
  external int x;

  external ffi.Pointer<ffi.Int16> y;

  @ffi.Uint8()
  external int bits;

  @ffi.Uint8()
  external int bite;
}

class sbsion_t extends ffi.Struct {
  @ffi.Int32()
  external int iodi;

  @ffi.Int32()
  external int nigp;

  @ffi.Array.multi([201])
  external ffi.Array<sbsigp_t> igp;
}

class dgps_t extends ffi.Struct {
  external gtime_t t0;

  @ffi.Double()
  external double prc;

  @ffi.Double()
  external double rrc;

  @ffi.Int32()
  external int iod;

  @ffi.Double()
  external double udre;
}

class ssr_t extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<gtime_t> t0;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> udi;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int32> iod;

  @ffi.Int32()
  external int iode;

  @ffi.Int32()
  external int iodcrc;

  @ffi.Int32()
  external int ura;

  @ffi.Int32()
  external int refd;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> deph;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> ddeph;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> dclk;

  @ffi.Double()
  external double hrclk;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Float> cbias;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Double> pbias;

  @ffi.Array.multi([68])
  external ffi.Array<ffi.Float> stdpb;

  @ffi.Double()
  external double yaw_ang;

  @ffi.Double()
  external double yaw_rate;

  @ffi.Uint8()
  external int update;
}

class nav_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  @ffi.Int32()
  external int ng;

  @ffi.Int32()
  external int ngmax;

  @ffi.Int32()
  external int ns;

  @ffi.Int32()
  external int nsmax;

  @ffi.Int32()
  external int ne;

  @ffi.Int32()
  external int nemax;

  @ffi.Int32()
  external int nc;

  @ffi.Int32()
  external int ncmax;

  @ffi.Int32()
  external int na;

  @ffi.Int32()
  external int namax;

  @ffi.Int32()
  external int nt;

  @ffi.Int32()
  external int ntmax;

  external ffi.Pointer<eph_t> eph;

  external ffi.Pointer<geph_t> geph;

  external ffi.Pointer<seph_t> seph;

  external ffi.Pointer<peph_t> peph;

  external ffi.Pointer<pclk_t> pclk;

  external ffi.Pointer<alm_t> alm;

  external ffi.Pointer<tec_t> tec;

  external erp_t erp;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_gps;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_glo;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_gal;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_qzs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> utc_cmp;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> utc_irn;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> utc_sbs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_gps;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> ion_gal;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_qzs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_cmp;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> ion_irn;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> glo_fcn;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Double>> cbias;

  @ffi.Array.multi([64, 2, 3])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Double>>> rbias;

  @ffi.Array.multi([71])
  external ffi.Array<pcv_t> pcvs;

  external sbssat_t sbssat;

  @ffi.Array.multi([11])
  external ffi.Array<sbsion_t> sbsion;

  @ffi.Array.multi([71])
  external ffi.Array<dgps_t> dgps;

  @ffi.Array.multi([71])
  external ffi.Array<ssr_t> ssr;
}

class sta_t extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> name;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> marker;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> antdes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> antsno;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> rectype;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> recver;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> recsno;

  @ffi.Int32()
  external int antsetup;

  @ffi.Int32()
  external int itrf;

  @ffi.Int32()
  external int deltype;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> del;

  @ffi.Double()
  external double hgt;

  @ffi.Int32()
  external int glo_cp_align;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> glo_cp_bias;
}

class sol_t extends ffi.Struct {
  external gtime_t time;

  external gtime_t eventime;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> rr;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Float> qr;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Float> qv;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> dtr;

  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int stat;

  @ffi.Uint8()
  external int ns;

  @ffi.Float()
  external double age;

  @ffi.Float()
  external double ratio;

  @ffi.Float()
  external double prev_ratio1;

  @ffi.Float()
  external double prev_ratio2;

  @ffi.Float()
  external double thres;
}

class solbuf_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  @ffi.Int32()
  external int cyclic;

  @ffi.Int32()
  external int start;

  @ffi.Int32()
  external int end;

  external gtime_t time;

  external ffi.Pointer<sol_t> data;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> rb;

  @ffi.Array.multi([8192])
  external ffi.Array<ffi.Uint8> buff;

  @ffi.Int32()
  external int nb;
}

class solstat_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Uint8()
  external int sat;

  @ffi.Uint8()
  external int frq;

  @ffi.Float()
  external double az;

  @ffi.Float()
  external double el;

  @ffi.Float()
  external double resp;

  @ffi.Float()
  external double resc;

  @ffi.Uint8()
  external int flag;

  @ffi.Uint16()
  external int snr;

  @ffi.Uint16()
  external int lock;

  @ffi.Uint16()
  external int outc;

  @ffi.Uint16()
  external int slipc;

  @ffi.Uint16()
  external int rejc;
}

class solstatbuf_t extends ffi.Struct {
  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int nmax;

  external ffi.Pointer<solstat_t> data;
}

class rtcm_t extends ffi.Struct {
  @ffi.Int32()
  external int staid;

  @ffi.Int32()
  external int stah;

  @ffi.Int32()
  external int seqno;

  @ffi.Int32()
  external int outtype;

  external gtime_t time;

  external gtime_t time_s;

  external obs_t obs;

  external nav_t nav;

  external sta_t sta;

  external ffi.Pointer<dgps_t> dgps;

  @ffi.Array.multi([71])
  external ffi.Array<ssr_t> ssr;

  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> msg;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> msgtype;

  @ffi.Array.multi([7, 128])
  external ffi.Array<ffi.Array<ffi.Int8>> msmtype;

  @ffi.Int32()
  external int obsflag;

  @ffi.Int32()
  external int ephsat;

  @ffi.Int32()
  external int ephset;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Double>> cp;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Uint16>> lock;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Uint16>> loss;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<gtime_t>> lltime;

  @ffi.Int32()
  external int nbyte;

  @ffi.Int32()
  external int nbit;

  @ffi.Int32()
  external int len;

  @ffi.Array.multi([1200])
  external ffi.Array<ffi.Uint8> buff;

  @ffi.Uint32()
  external int word;

  @ffi.Array.multi([100])
  external ffi.Array<ffi.Uint32> nmsg2;

  @ffi.Array.multi([400])
  external ffi.Array<ffi.Uint32> nmsg3;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> opt;
}

class rnxctr_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Double()
  external double ver;

  @ffi.Int8()
  external int type;

  @ffi.Int32()
  external int sys;

  @ffi.Int32()
  external int tsys;

  @ffi.Array.multi([8, 64, 4])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Int8>>> tobs;

  external obs_t obs;

  external nav_t nav;

  external sta_t sta;

  @ffi.Int32()
  external int ephsat;

  @ffi.Int32()
  external int ephset;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> opt;
}

class url_t extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> type;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> path;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> dir;

  @ffi.Double()
  external double tint;
}

class opt_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int format;

  external ffi.Pointer<ffi.Void> var1;

  external ffi.Pointer<ffi.Int8> comment;
}

class snrmask_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> ena;

  @ffi.Array.multi([3, 9])
  external ffi.Array<ffi.Array<ffi.Double>> mask;
}

class prcopt_t extends ffi.Struct {
  @ffi.Int32()
  external int mode;

  @ffi.Int32()
  external int soltype;

  @ffi.Int32()
  external int nf;

  @ffi.Int32()
  external int navsys;

  @ffi.Double()
  external double elmin;

  external snrmask_t snrmask;

  @ffi.Int32()
  external int sateph;

  @ffi.Int32()
  external int modear;

  @ffi.Int32()
  external int glomodear;

  @ffi.Int32()
  external int gpsmodear;

  @ffi.Int32()
  external int bdsmodear;

  @ffi.Int32()
  external int arfilter;

  @ffi.Int32()
  external int maxout;

  @ffi.Int32()
  external int minlock;

  @ffi.Int32()
  external int minfixsats;

  @ffi.Int32()
  external int minholdsats;

  @ffi.Int32()
  external int mindropsats;

  @ffi.Int32()
  external int minfix;

  @ffi.Int32()
  external int armaxiter;

  @ffi.Int32()
  external int ionoopt;

  @ffi.Int32()
  external int tropopt;

  @ffi.Int32()
  external int dynamics;

  @ffi.Int32()
  external int tidecorr;

  @ffi.Int32()
  external int niter;

  @ffi.Int32()
  external int codesmooth;

  @ffi.Int32()
  external int intpref;

  @ffi.Int32()
  external int sbascorr;

  @ffi.Int32()
  external int sbassatsel;

  @ffi.Int32()
  external int rovpos;

  @ffi.Int32()
  external int refpos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> eratio;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> err;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> std;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> prn;

  @ffi.Double()
  external double sclkstab;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> thresar;

  @ffi.Double()
  external double elmaskar;

  @ffi.Double()
  external double elmaskhold;

  @ffi.Double()
  external double thresslip;

  @ffi.Double()
  external double thresdop;

  @ffi.Double()
  external double varholdamb;

  @ffi.Double()
  external double gainholdamb;

  @ffi.Double()
  external double maxtdiff;

  @ffi.Double()
  external double maxinno;

  @ffi.Double()
  external double maxgdop;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> baseline;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> ru;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> rb;

  @ffi.Array.multi([2, 64])
  external ffi.Array<ffi.Array<ffi.Int8>> anttype;

  @ffi.Array.multi([2, 3])
  external ffi.Array<ffi.Array<ffi.Double>> antdel;

  @ffi.Array.multi([2])
  external ffi.Array<pcv_t> pcvr;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Uint8> exsats;

  @ffi.Int32()
  external int maxaveep;

  @ffi.Int32()
  external int initrst;

  @ffi.Int32()
  external int outsingle;

  @ffi.Array.multi([2, 256])
  external ffi.Array<ffi.Array<ffi.Int8>> rnxopt;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Int32> posopt;

  @ffi.Int32()
  external int syncsol;

  @ffi.Array.multi([2, 66])
  external ffi.Array<ffi.Array<ffi.Double>> odisp;

  @ffi.Int32()
  external int freqopt;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> pppopt;
}

class solopt_t extends ffi.Struct {
  @ffi.Int32()
  external int posf;

  @ffi.Int32()
  external int times;

  @ffi.Int32()
  external int timef;

  @ffi.Int32()
  external int timeu;

  @ffi.Int32()
  external int degf;

  @ffi.Int32()
  external int outhead;

  @ffi.Int32()
  external int outopt;

  @ffi.Int32()
  external int outvel;

  @ffi.Int32()
  external int datum;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int geoid;

  @ffi.Int32()
  external int solstatic;

  @ffi.Int32()
  external int sstat;

  @ffi.Int32()
  external int trace;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> nmeaintv;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> sep;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> prog;

  @ffi.Double()
  external double maxsolstd;
}

class filopt_t extends ffi.Struct {
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> satantp;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> rcvantp;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> stapos;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> geoid;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> iono;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> dcb;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> eop;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> blq;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> tempdir;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> geexe;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> solstat;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> trace;
}

class rnxopt_t extends ffi.Struct {
  external gtime_t ts;

  external gtime_t te;

  @ffi.Double()
  external double tint;

  @ffi.Double()
  external double ttol;

  @ffi.Double()
  external double tunit;

  @ffi.Int32()
  external int rnxver;

  @ffi.Int32()
  external int navsys;

  @ffi.Int32()
  external int obstype;

  @ffi.Int32()
  external int freqtype;

  @ffi.Array.multi([7, 64])
  external ffi.Array<ffi.Array<ffi.Int8>> mask;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> staid;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> prog;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> runby;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int8> marker;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> markerno;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> markertype;

  @ffi.Array.multi([2, 32])
  external ffi.Array<ffi.Array<ffi.Int8>> name;

  @ffi.Array.multi([3, 32])
  external ffi.Array<ffi.Array<ffi.Int8>> rec;

  @ffi.Array.multi([3, 32])
  external ffi.Array<ffi.Array<ffi.Int8>> ant;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> apppos;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> antdel;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> glo_cp_bias;

  @ffi.Array.multi([100, 64])
  external ffi.Array<ffi.Array<ffi.Int8>> comment;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> rcvopt;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Uint8> exsats;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> glofcn;

  @ffi.Int32()
  external int outiono;

  @ffi.Int32()
  external int outtime;

  @ffi.Int32()
  external int outleaps;

  @ffi.Int32()
  external int autopos;

  @ffi.Int32()
  external int phshift;

  @ffi.Int32()
  external int halfcyc;

  @ffi.Int32()
  external int sep_nav;

  external gtime_t tstart;

  external gtime_t tend;

  external gtime_t trtcm;

  @ffi.Array.multi([7, 64, 4])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Int8>>> tobs;

  @ffi.Array.multi([7, 64])
  external ffi.Array<ffi.Array<ffi.Double>> shift;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Int32> nobs;
}

class ssat_t extends ffi.Struct {
  @ffi.Uint8()
  external int sys;

  @ffi.Uint8()
  external int vs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> azel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> resp;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> resc;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> icbias;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> vsat;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> snr_rover;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> snr_base;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> fix;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> slip;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> half;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> lock;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> outc;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> slipc;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> rejc;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> gf;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> mw;

  @ffi.Double()
  external double phw;

  @ffi.Array.multi([2, 3])
  external ffi.Array<ffi.Array<gtime_t>> pt;

  @ffi.Array.multi([2, 3])
  external ffi.Array<ffi.Array<ffi.Double>> ph;
}

class ambc_t extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<gtime_t> epoch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int32> n;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> LC;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> LCv;

  @ffi.Int32()
  external int fixcnt;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Int8> flags;
}

class rtk_t extends ffi.Struct {
  external sol_t sol;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Double> rb;

  @ffi.Int32()
  external int nx;

  @ffi.Int32()
  external int na;

  @ffi.Double()
  external double tt;

  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Double> P;

  external ffi.Pointer<ffi.Double> xa;

  external ffi.Pointer<ffi.Double> Pa;

  @ffi.Int32()
  external int nfix;

  @ffi.Int32()
  external int excsat;

  @ffi.Int32()
  external int nb_ar;

  @ffi.Int8()
  external int holdamb;

  @ffi.Array.multi([71])
  external ffi.Array<ambc_t> ambc;

  @ffi.Array.multi([71])
  external ffi.Array<ssat_t> ssat;

  @ffi.Int32()
  external int neb;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Int8> errbuf;

  external prcopt_t opt;

  @ffi.Int32()
  external int initial_mode;
}

class raw_t extends ffi.Struct {
  external gtime_t time;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<gtime_t>> tobs;

  external obs_t obs;

  external obs_t obuf;

  external nav_t nav;

  external sta_t sta;

  @ffi.Int32()
  external int ephsat;

  @ffi.Int32()
  external int ephset;

  external sbsmsg_t sbsmsg;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> msgtype;

  @ffi.Array.multi([71, 380])
  external ffi.Array<ffi.Array<ffi.Uint8>> subfrm;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Double>> lockt;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Uint8>> lockflag;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Double> icpp;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Double> off;

  @ffi.Double()
  external double icpc;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Double> prCA;

  @ffi.Array.multi([71])
  external ffi.Array<ffi.Double> dpCA;

  @ffi.Array.multi([71, 3])
  external ffi.Array<ffi.Array<ffi.Uint8>> halfc;

  @ffi.Array.multi([96])
  external ffi.Array<ffi.Int8> freqn;

  @ffi.Int32()
  external int nbyte;

  @ffi.Int32()
  external int len;

  @ffi.Int32()
  external int iod;

  @ffi.Int32()
  external int tod;

  @ffi.Int32()
  external int tbase;

  @ffi.Int32()
  external int flag;

  @ffi.Int32()
  external int outtype;

  @ffi.Array.multi([16384])
  external ffi.Array<ffi.Uint8> buff;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> opt;

  @ffi.Int32()
  external int format;

  @ffi.Int32()
  external int rcvtype;

  external ffi.Pointer<ffi.Void> rcv_data;
}

class strconv_t extends ffi.Struct {
  @ffi.Int32()
  external int itype;

  @ffi.Int32()
  external int otype;

  @ffi.Int32()
  external int nmsg;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> msgs;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Double> tint;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint32> tick;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> ephsat;

  @ffi.Int32()
  external int stasel;

  external rtcm_t rtcm;

  external raw_t raw;

  external rtcm_t out;
}

class gis_pnt_t extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> pos;
}

class gis_poly_t extends ffi.Struct {
  @ffi.Int32()
  external int npnt;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> bound;

  external ffi.Pointer<ffi.Double> pos;
}

class gis_polygon_t extends ffi.Struct {
  @ffi.Int32()
  external int npnt;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> bound;

  external ffi.Pointer<ffi.Double> pos;
}

class gisd_tag extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<gisd_tag> next;
}

class gis_t extends ffi.Struct {
  @ffi.Array.multi([32, 256])
  external ffi.Array<ffi.Array<ffi.Int8>> name;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> flag;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Pointer<gisd_t>> data;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> bound;
}

typedef gisd_t = gisd_tag;
typedef fatalfunc_t
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>;
typedef rtksvr_t = UnnamedStruct1;

class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int32()
  external int state;

  @ffi.Int32()
  external int cycle;

  @ffi.Int32()
  external int nmeacycle;

  @ffi.Int32()
  external int nmeareq;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> nmeapos;

  @ffi.Int32()
  external int buffsize;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> format;

  @ffi.Array.multi([2])
  external ffi.Array<solopt_t> solopt;

  @ffi.Int32()
  external int navsel;

  @ffi.Int32()
  external int nsbs;

  @ffi.Int32()
  external int nsol;

  external rtk_t rtk;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> nb;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> nsb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> npb;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> buff;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> sbuf;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Uint8>> pbuf;

  @ffi.Array.multi([256])
  external ffi.Array<sol_t> solbuf;

  @ffi.Array.multi([3, 10])
  external ffi.Array<ffi.Array<ffi.Uint32>> nmsg;

  @ffi.Array.multi([3])
  external ffi.Array<raw_t> raw;

  @ffi.Array.multi([3])
  external ffi.Array<rtcm_t> rtcm;

  @ffi.Array.multi([3])
  external ffi.Array<gtime_t> ftime;

  @ffi.Array.multi([3, 1024])
  external ffi.Array<ffi.Array<ffi.Int8>> files;

  @ffi.Array.multi([3, 128])
  external ffi.Array<ffi.Array<obs_t>> obs;

  external nav_t nav;

  @ffi.Array.multi([32])
  external ffi.Array<sbsmsg_t> sbsmsg;

  @ffi.Array.multi([8])
  external ffi.Array<stream_t> stream;

  external ffi.Pointer<stream_t> moni;

  @ffi.Uint32()
  external int tick;

  @ffi.Int32()
  external int thread;

  @ffi.Int32()
  external int cputime;

  @ffi.Int32()
  external int prcout;

  @ffi.Int32()
  external int nave;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> rb_ave;

  @ffi.Array.multi([3, 4096])
  external ffi.Array<ffi.Array<ffi.Int8>> cmds_periodic;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Int8> cmd_reset;

  @ffi.Double()
  external double bl_reset;

  @ffi.Int32()
  external int lock;
}

typedef stream_t = UnnamedStruct2;

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int mode;

  @ffi.Int32()
  external int state;

  @ffi.Uint32()
  external int inb;

  @ffi.Uint32()
  external int inr;

  @ffi.Uint32()
  external int outb;

  @ffi.Uint32()
  external int outr;

  @ffi.Uint32()
  external int tick_i;

  @ffi.Uint32()
  external int tick_o;

  @ffi.Uint32()
  external int tact;

  @ffi.Uint32()
  external int inbt;

  @ffi.Uint32()
  external int outbt;

  @ffi.Int32()
  external int lock;

  external ffi.Pointer<ffi.Void> port;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> path;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> msg;
}

typedef strsvr_t = UnnamedStruct3;

class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int32()
  external int state;

  @ffi.Int32()
  external int cycle;

  @ffi.Int32()
  external int buffsize;

  @ffi.Int32()
  external int nmeacycle;

  @ffi.Int32()
  external int relayback;

  @ffi.Int32()
  external int nstr;

  @ffi.Int32()
  external int npb;

  @ffi.Array.multi([16, 4096])
  external ffi.Array<ffi.Array<ffi.Int8>> cmds_periodic;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> nmeapos;

  external ffi.Pointer<ffi.Uint8> buff;

  external ffi.Pointer<ffi.Uint8> pbuf;

  @ffi.Uint32()
  external int tick;

  @ffi.Array.multi([16])
  external ffi.Array<stream_t> stream;

  @ffi.Array.multi([16])
  external ffi.Array<stream_t> strlog;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Pointer<strconv_t>> conv;

  @ffi.Int32()
  external int thread;

  @ffi.Int32()
  external int lock;
}

const int VCRT_COMPILER_PREPROCESSOR__ffilocal = 1;

const int SAL_VERSION__ffilocal = 20;

const int SAL_H_VERSION___ffilocal = 180000000;

const int USE_DECLSPECS_FOR_SAL__ffilocal = 0;

const int USE_ATTRIBUTES_FOR_SAL__ffilocal = 0;

const int CRT_PACKING__ffilocal = 8;

const int VCRUNTIME_DISABLED_WARNINGS__ffilocal = 4514;

const int HAS_EXCEPTIONS__ffilocal = 1;

const int WCHAR_T_DEFINED__ffilocal = 1;

const int NULL = 0;

const int HAS_CXX17__ffilocal = 0;

const int HAS_CXX20__ffilocal = 0;

const int HAS_NODISCARD__ffilocal = 1;

const int ARGMAX__ffilocal = 100;

const int TRUNCATE__ffilocal = -1;

const int CRT_INT_MAX__ffilocal = 2147483647;

const int CRT_SIZE_MAX__ffilocal = -1;

const String FILEW_____ffilocal = 't';

const int CRT_FUNCTIONS_REQUIRED__ffilocal = 1;

const int CRT_HAS_CXX17__ffilocal = 0;

const int ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE__ffilocal = 1;

const int CRT_BUILD_DESKTOP_APP__ffilocal = 1;

const int CRT_INTERNAL_NONSTDC_NAMES__ffilocal = 1;

const int STDC_SECURE_LIB_____ffilocal = 200411;

const int GOT_SECURE_LIB_____ffilocal = 200411;

const int STDC_WANT_SECURE_LIB_____ffilocal = 1;

const int SECURECRT_FILL_BUFFER_PATTERN__ffilocal = 254;

const int CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES__ffilocal = 0;

const int CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT__ffilocal = 0;

const int CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES__ffilocal = 1;

const int CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY__ffilocal = 0;

const int CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY__ffilocal = 0;

const String CRT_INTERNAL_STDIO_SYMBOL_PREFIX__ffilocal = '';

const int CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION__ffilocal = 1;

const int CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR__ffilocal = 2;

const int CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS__ffilocal = 4;

const int CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY__ffilocal = 8;

const int CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS__ffilocal = 16;

const int CRT_INTERNAL_SCANF_SECURECRT__ffilocal = 1;

const int CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS__ffilocal = 2;

const int CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY__ffilocal = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int NFILE__ffilocal = 512;

const int NSTREAM___ffilocal = 512;

const int IOB_ENTRIES__ffilocal = 3;

const int EOF = -1;

const int IOFBF__ffilocal = 0;

const int IOLBF__ffilocal = 64;

const int IONBF__ffilocal = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int SYS_OPEN__ffilocal = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int TMP_MAX_S__ffilocal = 2147483647;

const int SYS_OPEN = 20;

const int MAX_ITOSTR_BASE16_COUNT__ffilocal = 9;

const int MAX_ITOSTR_BASE10_COUNT__ffilocal = 12;

const int MAX_ITOSTR_BASE8_COUNT__ffilocal = 12;

const int MAX_ITOSTR_BASE2_COUNT__ffilocal = 33;

const int MAX_LTOSTR_BASE16_COUNT__ffilocal = 9;

const int MAX_LTOSTR_BASE10_COUNT__ffilocal = 12;

const int MAX_LTOSTR_BASE8_COUNT__ffilocal = 12;

const int MAX_LTOSTR_BASE2_COUNT__ffilocal = 33;

const int MAX_ULTOSTR_BASE16_COUNT__ffilocal = 9;

const int MAX_ULTOSTR_BASE10_COUNT__ffilocal = 11;

const int MAX_ULTOSTR_BASE8_COUNT__ffilocal = 12;

const int MAX_ULTOSTR_BASE2_COUNT__ffilocal = 33;

const int MAX_I64TOSTR_BASE16_COUNT__ffilocal = 17;

const int MAX_I64TOSTR_BASE10_COUNT__ffilocal = 21;

const int MAX_I64TOSTR_BASE8_COUNT__ffilocal = 23;

const int MAX_I64TOSTR_BASE2_COUNT__ffilocal = 65;

const int MAX_U64TOSTR_BASE16_COUNT__ffilocal = 17;

const int MAX_U64TOSTR_BASE10_COUNT__ffilocal = 21;

const int MAX_U64TOSTR_BASE8_COUNT__ffilocal = 23;

const int MAX_U64TOSTR_BASE2_COUNT__ffilocal = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int I8_MIN__ffilocal = -128;

const int I8_MAX__ffilocal = 127;

const int UI8_MAX__ffilocal = 255;

const int I16_MIN__ffilocal = -32768;

const int I16_MAX__ffilocal = 32767;

const int UI16_MAX__ffilocal = 65535;

const int I32_MIN__ffilocal = -2147483648;

const int I32_MAX__ffilocal = 2147483647;

const int UI32_MAX__ffilocal = 4294967295;

const int I64_MIN__ffilocal = -9223372036854775808;

const int I64_MAX__ffilocal = 9223372036854775807;

const int UI64_MAX__ffilocal = -1;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int WRITE_ABORT_MSG__ffilocal = 1;

const int CALL_REPORTFAULT__ffilocal = 2;

const int OUT_TO_DEFAULT__ffilocal = 0;

const int OUT_TO_STDERR__ffilocal = 1;

const int OUT_TO_MSGBOX__ffilocal = 2;

const int REPORT_ERRMODE__ffilocal = 3;

const int RAND_MAX = 32767;

const int CVTBUFSIZE__ffilocal = 349;

const int MAX_PATH__ffilocal = 260;

const int MAX_DRIVE__ffilocal = 3;

const int MAX_DIR__ffilocal = 256;

const int MAX_FNAME__ffilocal = 256;

const int MAX_EXT__ffilocal = 256;

const int MAX_ENV__ffilocal = 32767;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int NLSCMPERROR__ffilocal = 2147483647;

const int DOMAIN__ffilocal = 1;

const int SING__ffilocal = 2;

const int OVERFLOW__ffilocal = 3;

const int UNDERFLOW__ffilocal = 4;

const int TLOSS__ffilocal = 5;

const int PLOSS__ffilocal = 6;

const double HUGE_ENUF__ffilocal = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int DENORM__ffilocal = -2;

const int FINITE__ffilocal = -1;

const int INFCODE__ffilocal = 1;

const int NANCODE__ffilocal = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int C2__ffilocal = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int FE_DIVBYZERO__ffilocal = 4;

const int FE_INEXACT__ffilocal = 32;

const int FE_INVALID__ffilocal = 1;

const int FE_OVERFLOW__ffilocal = 8;

const int FE_UNDERFLOW__ffilocal = 16;

const int D0_C__ffilocal = 3;

const int D1_C__ffilocal = 2;

const int D2_C__ffilocal = 1;

const int D3_C__ffilocal = 0;

const int DBIAS__ffilocal = 1022;

const int DOFF__ffilocal = 4;

const int F0_C__ffilocal = 1;

const int F1_C__ffilocal = 0;

const int FBIAS__ffilocal = 126;

const int FOFF__ffilocal = 7;

const int FRND__ffilocal = 1;

const int L0_C__ffilocal = 3;

const int L1_C__ffilocal = 2;

const int L2_C__ffilocal = 1;

const int L3_C__ffilocal = 0;

const int LBIAS__ffilocal = 1022;

const int LOFF__ffilocal = 4;

const int DFRAC__ffilocal = 15;

const int DMASK__ffilocal = 32752;

const int DMAX__ffilocal = 2047;

const int DSIGN__ffilocal = 32768;

const int FFRAC__ffilocal = 127;

const int FMASK__ffilocal = 32640;

const int FMAX__ffilocal = 255;

const int FSIGN__ffilocal = 32768;

const int LFRAC__ffilocal = 65535;

const int LMASK__ffilocal = 32767;

const int LMAX__ffilocal = 32767;

const int LSIGN__ffilocal = 32768;

const int DHUGE_EXP__ffilocal = 1842;

const int FHUGE_EXP__ffilocal = 229;

const int LHUGE_EXP__ffilocal = 29490;

const int FP_LT__ffilocal = 1;

const int FP_EQ__ffilocal = 2;

const int FP_GT__ffilocal = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int UPPER__ffilocal = 1;

const int LOWER__ffilocal = 2;

const int DIGIT__ffilocal = 4;

const int SPACE__ffilocal = 8;

const int PUNCT__ffilocal = 16;

const int CONTROL__ffilocal = 32;

const int BLANK__ffilocal = 64;

const int HEX__ffilocal = 128;

const int LEADBYTE__ffilocal = 32768;

const int ALPHA__ffilocal = 259;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const String VER_RTKLIB = 'demo5';

const String PATCH_LEVEL = 'b34f.1';

const String COPYRIGHT_RTKLIB =
    'Copyright (C) 2007-2020 T.Takasu\nAll rights reserved.';

const double PI = 3.141592653589793;

const double D2R = 0.017453292519943295;

const double R2D = 57.29577951308232;

const double CLIGHT = 299792458.0;

const double SC2RAD = 3.1415926535898;

const double AU = 149597870691.0;

const double AS2R = 0.00000484813681109536;

const double OMGE = 0.000072921151467;

const double RE_WGS84 = 6378137.0;

const double FE_WGS84 = 0.0033528106647474805;

const double HION = 350000.0;

const int MAXFREQ = 6;

const double FREQL1 = 1575420000.0;

const double FREQL2 = 1227600000.0;

const double FREQE5b = 1207140000.0;

const double FREQL5 = 1176450000.0;

const double FREQL6 = 1278750000.0;

const double FREQE5ab = 1191795000.0;

const double FREQs = 2492028000.0;

const double FREQ1_GLO = 1602000000.0;

const double DFRQ1_GLO = 562500.0;

const double FREQ2_GLO = 1246000000.0;

const double DFRQ2_GLO = 437500.0;

const double FREQ3_GLO = 1202025000.0;

const double FREQ1a_GLO = 1600995000.0;

const double FREQ2a_GLO = 1248060000.0;

const double FREQ1_CMP = 1561098000.0;

const double FREQ2_CMP = 1207140000.0;

const double FREQ3_CMP = 1268520000.0;

const double EFACT_GPS = 1.0;

const double EFACT_GLO = 1.5;

const double EFACT_GAL = 1.0;

const double EFACT_QZS = 1.0;

const double EFACT_CMP = 1.0;

const double EFACT_IRN = 1.5;

const double EFACT_SBS = 3.0;

const int SYS_NONE = 0;

const int SYS_GPS = 1;

const int SYS_SBS = 2;

const int SYS_GLO = 4;

const int SYS_GAL = 8;

const int SYS_QZS = 16;

const int SYS_CMP = 32;

const int SYS_IRN = 64;

const int SYS_LEO = 128;

const int SYS_ALL = 255;

const int TSYS_GPS = 0;

const int TSYS_UTC = 1;

const int TSYS_GLO = 2;

const int TSYS_GAL = 3;

const int TSYS_QZS = 4;

const int TSYS_CMP = 5;

const int TSYS_IRN = 6;

const int NFREQ = 3;

const int NFREQGLO = 2;

const int NEXOBS = 0;

const double SNR_UNIT = 0.001;

const int MINPRNGPS = 1;

const int MAXPRNGPS = 32;

const int NSATGPS = 32;

const int NSYSGPS = 1;

const int MINPRNGLO = 0;

const int MAXPRNGLO = 0;

const int NSATGLO = 0;

const int NSYSGLO = 0;

const int MINPRNGAL = 0;

const int MAXPRNGAL = 0;

const int NSATGAL = 0;

const int NSYSGAL = 0;

const int MINPRNQZS = 0;

const int MAXPRNQZS = 0;

const int MINPRNQZS_S = 0;

const int MAXPRNQZS_S = 0;

const int NSATQZS = 0;

const int NSYSQZS = 0;

const int MINPRNCMP = 0;

const int MAXPRNCMP = 0;

const int NSATCMP = 0;

const int NSYSCMP = 0;

const int MINPRNIRN = 0;

const int MAXPRNIRN = 0;

const int NSATIRN = 0;

const int NSYSIRN = 0;

const int MINPRNLEO = 0;

const int MAXPRNLEO = 0;

const int NSATLEO = 0;

const int NSYSLEO = 0;

const int NSYS = 1;

const int MINPRNSBS = 120;

const int MAXPRNSBS = 158;

const int NSATSBS = 39;

const int MAXSAT = 71;

const int MAXSTA = 255;

const int MAXOBS = 96;

const int MAXRCV = 64;

const int MAXOBSTYPE = 64;

const double DTTOL = 0.025;

const double MAXDTOE = 7200.0;

const double MAXDTOE_QZS = 7200.0;

const double MAXDTOE_GAL = 14400.0;

const double MAXDTOE_CMP = 21600.0;

const double MAXDTOE_GLO = 1800.0;

const double MAXDTOE_IRN = 7200.0;

const double MAXDTOE_SBS = 360.0;

const double MAXDTOE_S = 86400.0;

const double MAXGDOP = 300.0;

const double INT_SWAP_TRAC = 86400.0;

const double INT_SWAP_STAT = 86400.0;

const int MAXEXFILE = 1024;

const double MAXSBSAGEF = 30.0;

const double MAXSBSAGEL = 1800.0;

const int MAXSBSURA = 8;

const int MAXBAND = 10;

const int MAXNIGP = 201;

const int MAXNGEO = 4;

const int MAXCOMMENT = 100;

const int MAXSTRPATH = 1024;

const int MAXSTRMSG = 1024;

const int MAXSTRRTK = 8;

const int MAXSBSMSG = 32;

const int MAXSOLMSG = 8191;

const int MAXRAWLEN = 16384;

const int MAXERRMSG = 4096;

const int MAXANT = 64;

const int MAXSOLBUF = 256;

const int MAXOBSBUF = 128;

const int MAXNRPOS = 16;

const int MAXLEAPS = 64;

const int MAXGISLAYER = 32;

const int MAXRCVCMD = 4096;

const double RNX2VER = 2.1;

const double RNX3VER = 3.0;

const int OBSTYPE_PR = 1;

const int OBSTYPE_CP = 2;

const int OBSTYPE_DOP = 4;

const int OBSTYPE_SNR = 8;

const int OBSTYPE_ALL = 255;

const int FREQTYPE_L1 = 1;

const int FREQTYPE_L2 = 2;

const int FREQTYPE_L3 = 4;

const int FREQTYPE_L4 = 8;

const int FREQTYPE_L5 = 16;

const int FREQTYPE_ALL = 255;

const int CODE_NONE = 0;

const int CODE_L1C = 1;

const int CODE_L1P = 2;

const int CODE_L1W = 3;

const int CODE_L1Y = 4;

const int CODE_L1M = 5;

const int CODE_L1N = 6;

const int CODE_L1S = 7;

const int CODE_L1L = 8;

const int CODE_L1E = 9;

const int CODE_L1A = 10;

const int CODE_L1B = 11;

const int CODE_L1X = 12;

const int CODE_L1Z = 13;

const int CODE_L2C = 14;

const int CODE_L2D = 15;

const int CODE_L2S = 16;

const int CODE_L2L = 17;

const int CODE_L2X = 18;

const int CODE_L2P = 19;

const int CODE_L2W = 20;

const int CODE_L2Y = 21;

const int CODE_L2M = 22;

const int CODE_L2N = 23;

const int CODE_L5I = 24;

const int CODE_L5Q = 25;

const int CODE_L5X = 26;

const int CODE_L7I = 27;

const int CODE_L7Q = 28;

const int CODE_L7X = 29;

const int CODE_L6A = 30;

const int CODE_L6B = 31;

const int CODE_L6C = 32;

const int CODE_L6X = 33;

const int CODE_L6Z = 34;

const int CODE_L6S = 35;

const int CODE_L6L = 36;

const int CODE_L8I = 37;

const int CODE_L8Q = 38;

const int CODE_L8X = 39;

const int CODE_L2I = 40;

const int CODE_L2Q = 41;

const int CODE_L6I = 42;

const int CODE_L6Q = 43;

const int CODE_L3I = 44;

const int CODE_L3Q = 45;

const int CODE_L3X = 46;

const int CODE_L1I = 47;

const int CODE_L1Q = 48;

const int CODE_L5A = 49;

const int CODE_L5B = 50;

const int CODE_L5C = 51;

const int CODE_L9A = 52;

const int CODE_L9B = 53;

const int CODE_L9C = 54;

const int CODE_L9X = 55;

const int CODE_L1D = 56;

const int CODE_L5D = 57;

const int CODE_L5P = 58;

const int CODE_L5Z = 59;

const int CODE_L6E = 60;

const int CODE_L7D = 61;

const int CODE_L7P = 62;

const int CODE_L7Z = 63;

const int CODE_L8D = 64;

const int CODE_L8P = 65;

const int CODE_L4A = 66;

const int CODE_L4B = 67;

const int CODE_L4X = 68;

const int MAXCODE = 68;

const int PMODE_SINGLE = 0;

const int PMODE_DGPS = 1;

const int PMODE_KINEMA = 2;

const int PMODE_STATIC = 3;

const int PMODE_STATIC_START = 4;

const int PMODE_MOVEB = 5;

const int PMODE_FIXED = 6;

const int PMODE_PPP_KINEMA = 7;

const int PMODE_PPP_STATIC = 8;

const int PMODE_PPP_FIXED = 9;

const int SOLF_LLH = 0;

const int SOLF_XYZ = 1;

const int SOLF_ENU = 2;

const int SOLF_NMEA = 3;

const int SOLF_STAT = 4;

const int SOLF_GSIF = 5;

const int SOLQ_NONE = 0;

const int SOLQ_FIX = 1;

const int SOLQ_FLOAT = 2;

const int SOLQ_SBAS = 3;

const int SOLQ_DGPS = 4;

const int SOLQ_SINGLE = 5;

const int SOLQ_PPP = 6;

const int SOLQ_DR = 7;

const int MAXSOLQ = 7;

const int TIMES_GPST = 0;

const int TIMES_UTC = 1;

const int TIMES_JST = 2;

const int IONOOPT_OFF = 0;

const int IONOOPT_BRDC = 1;

const int IONOOPT_SBAS = 2;

const int IONOOPT_IFLC = 3;

const int IONOOPT_EST = 4;

const int IONOOPT_TEC = 5;

const int IONOOPT_QZS = 6;

const int IONOOPT_STEC = 8;

const int TROPOPT_OFF = 0;

const int TROPOPT_SAAS = 1;

const int TROPOPT_SBAS = 2;

const int TROPOPT_EST = 3;

const int TROPOPT_ESTG = 4;

const int TROPOPT_ZTD = 5;

const int EPHOPT_BRDC = 0;

const int EPHOPT_PREC = 1;

const int EPHOPT_SBAS = 2;

const int EPHOPT_SSRAPC = 3;

const int EPHOPT_SSRCOM = 4;

const int ARMODE_OFF = 0;

const int ARMODE_CONT = 1;

const int ARMODE_INST = 2;

const int ARMODE_FIXHOLD = 3;

const int ARMODE_WLNL = 4;

const int ARMODE_TCAR = 5;

const int GLO_ARMODE_OFF = 0;

const int GLO_ARMODE_ON = 1;

const int GLO_ARMODE_AUTOCAL = 2;

const int GLO_ARMODE_FIXHOLD = 3;

const int SBSOPT_LCORR = 1;

const int SBSOPT_FCORR = 2;

const int SBSOPT_ICORR = 4;

const int SBSOPT_RANGE = 8;

const int POSOPT_POS = 0;

const int POSOPT_SINGLE = 1;

const int POSOPT_FILE = 2;

const int POSOPT_RINEX = 3;

const int POSOPT_RTCM = 4;

const int STR_NONE = 0;

const int STR_SERIAL = 1;

const int STR_FILE = 2;

const int STR_TCPSVR = 3;

const int STR_TCPCLI = 4;

const int STR_NTRIPSVR = 5;

const int STR_NTRIPCLI = 6;

const int STR_FTP = 7;

const int STR_HTTP = 8;

const int STR_NTRIPCAS = 9;

const int STR_UDPSVR = 10;

const int STR_UDPCLI = 11;

const int STR_MEMBUF = 12;

const int STRFMT_RTCM2 = 0;

const int STRFMT_RTCM3 = 1;

const int STRFMT_OEM4 = 2;

const int STRFMT_CNAV = 3;

const int STRFMT_UBX = 4;

const int STRFMT_SBP = 5;

const int STRFMT_CRES = 6;

const int STRFMT_STQ = 7;

const int STRFMT_JAVAD = 8;

const int STRFMT_NVS = 9;

const int STRFMT_BINEX = 10;

const int STRFMT_RT17 = 11;

const int STRFMT_SEPT = 12;

const int STRFMT_TERSUS = 13;

const int STRFMT_RINEX = 14;

const int STRFMT_SP3 = 15;

const int STRFMT_RNXCLK = 16;

const int STRFMT_SBAS = 17;

const int STRFMT_NMEA = 18;

const int MAXRCVFMT = 13;

const int STR_MODE_R = 1;

const int STR_MODE_W = 2;

const int STR_MODE_RW = 3;

const int GEOID_EMBEDDED = 0;

const int GEOID_EGM96_M150 = 1;

const int GEOID_EGM2008_M25 = 2;

const int GEOID_EGM2008_M10 = 3;

const int GEOID_GSI2000_M15 = 4;

const int GEOID_RAF09 = 5;

const String COMMENTH = '%';

const String MSG_DISCONN = '\$_DISCONNECT\r\n';

const int DLOPT_FORCE = 1;

const int DLOPT_KEEPCMP = 2;

const int DLOPT_HOLDERR = 4;

const int DLOPT_HOLDLST = 8;

const int LLI_SLIP = 1;

const int LLI_HALFC = 2;

const int LLI_BOCTRK = 4;

const int LLI_HALFA = 64;

const int LLI_HALFS = 128;

const double P2_5 = 0.03125;

const double P2_6 = 0.015625;

const double P2_11 = 0.00048828125;

const double P2_15 = 0.000030517578125;

const double P2_17 = 0.00000762939453125;

const double P2_19 = 0.0000019073486328125;

const double P2_20 = 9.5367431640625e-7;

const double P2_21 = 4.76837158203125e-7;

const double P2_23 = 1.19209289550781e-7;

const double P2_24 = 5.960464477539063e-8;

const double P2_27 = 7.450580596923828e-9;

const double P2_29 = 1.862645149230957e-9;

const double P2_30 = 9.313225746154785e-10;

const double P2_31 = 4.656612873077393e-10;

const double P2_32 = 2.328306436538696e-10;

const double P2_33 = 1.164153218269348e-10;

const double P2_35 = 2.91038304567337e-11;

const double P2_38 = 3.63797880709171e-12;

const double P2_39 = 1.818989403545856e-12;

const double P2_40 = 9.09494701772928e-13;

const double P2_43 = 1.13686837721616e-13;

const double P2_48 = 3.552713678800501e-15;

const double P2_50 = 8.881784197001252e-16;

const double P2_55 = 2.775557561562891e-17;

const int FILEPATHSEP = 47;
